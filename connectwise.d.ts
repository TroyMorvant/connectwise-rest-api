// Generated by typings
// Source: release/api/api.d.ts
declare module '~connectwise-rest-api/release/api/api' {
export interface AccountingBatch {
    "id"?: number;
    "batchIdentifier": string;
    "exportInvoicesFlag"?: boolean;
    "exportExpensesFlag"?: boolean;
    "exportProductsFlag"?: boolean;
    "closedFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AccountingPackage {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "directTransferFlag"?: boolean;
    "includeInvoicesFlag"?: boolean;
    "invoiceFormat"?: AccountingPackage.InvoiceFormatEnum;
    "includeExpenseFlag"?: boolean;
    "transferExpenseAsBillFlag"?: boolean;
    "expenseFormat"?: AccountingPackage.ExpenseFormatEnum;
    "supressMemoFlag"?: boolean;
    "syncPaymentInfoFlag"?: boolean;
    "includeSalesTaxFlag"?: boolean;
    "enableTaxGroupsFlag"?: boolean;
    "zeroDollarTaxAmountsFlag"?: boolean;
    "includeItemsFlag"?: boolean;
    "inventorySOHFlag"?: boolean;
    "sendComponentAmountFlag"?: boolean;
    "sendUomFlag"?: boolean;
    "includeCogsEntriesFlag"?: boolean;
    "includgeCogsDropShipFlag"?: boolean;
    "activeFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace AccountingPackage {
    type InvoiceFormatEnum = 'Default' | 'Condensed' | 'Detailed';
    type ExpenseFormatEnum = 'Default' | 'Condensed' | 'Detailed';
}
export interface Activity {
    "id"?: number;
    "name": string;
    "type"?: ActivityTypeReference;
    "company"?: CompanyReference;
    "contact"?: ContactReference;
    "phoneNumber"?: string;
    "email"?: string;
    "status"?: ActivityStatusReference;
    "opportunity"?: OpportunityReference;
    "ticket"?: TicketReference;
    "agreement"?: AgreementReference;
    "campaign"?: CampaignReference;
    "notes"?: string;
    "dateStart"?: Date;
    "dateEnd"?: Date;
    "assignedBy"?: MemberReference;
    "assignTo": MemberReference;
    "scheduleStatus"?: ScheduleStatusReference;
    "reminder"?: ReminderReference;
    "where"?: ServiceLocationReference;
    "notifyFlag"?: boolean;
    "mobileGuid"?: Guid;
    "currency"?: CurrencyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export interface ActivityReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ActivityStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "spawnFollowupFlag"?: boolean;
    "closedFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * Required when notifyType is set to: "Create Activity"
 */
export interface ActivityStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ActivityStopwatch {
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "activityId": number;
    "activityMobileGuid"?: Guid;
    "agreement"?: AgreementReference;
    "billableOption"?: ActivityStopwatch.BillableOptionEnum;
    "businessUnitId"?: number;
    "dateEntered"?: Date;
    "endTime"?: Date;
    "id"?: number;
    "internalNotes"?: string;
    "locationId"?: number;
    "member": MemberReference;
    "mobileGuid"?: Guid;
    "notes"?: string;
    "startTime"?: Date;
    "status": ActivityStopwatch.StatusEnum;
    "totalPauseTime"?: number;
    "workRole"?: WorkRoleReference;
    "workType"?: WorkTypeReference;
}
export namespace ActivityStopwatch {
    type BillableOptionEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type StatusEnum = 'Reset' | 'Running' | 'Paused' | 'Stopped';
}
export interface ActivityType {
    "id"?: number;
    "name": string;
    "points"?: number;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "emailFlag"?: boolean;
    "memoFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * Required when notifyType is set to: "Create Activity"
 */
export interface ActivityTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Addition {
    "id"?: number;
    "product": IvItemReference;
    "quantity"?: number;
    "lessIncluded"?: number;
    "unitPrice"?: number;
    "unitCost"?: number;
    "billCustomer": Addition.BillCustomerEnum;
    "effectiveDate"?: Date;
    "cancelledDate"?: Date;
    "taxableFlag"?: boolean;
    "serialNumber"?: string;
    "invoiceDescription"?: string;
    "purchaseItemFlag"?: boolean;
    "specialOrderFlag"?: boolean;
    "agreementId"?: number;
    "description"?: string;
    "billedQuantity"?: number;
    "uom"?: string;
    "extPrice"?: number;
    "extCost"?: number;
    "sequenceNumber"?: number;
    "margin"?: number;
    "prorateCost"?: number;
    "proratePrice"?: number;
    "extendedProrateCost"?: number;
    "extendedProratePrice"?: number;
    "prorateCurrentPeriodFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Addition {
    type BillCustomerEnum = 'Billable' | 'DoNotBill' | 'NoCharge';
}
export interface AddressFormat {
    "id"?: number;
    "name": string;
    "format": string;
    "defaultFlag"?: boolean;
    "countryIds"?: Array<number>;
    "addAllCountries"?: boolean;
    "removeAllCountries"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AddressFormatReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Adjustment {
    "id"?: number;
    "amount"?: number;
    "description"?: string;
    "effectiveDate"?: Date;
    "agreementId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "identifier": string;
    "type": AdjustmentTypeReference;
    "reason"?: string;
    "notes"?: string;
    "closedFlag"?: boolean;
    "closedBy"?: string;
    "closedDate"?: Date;
}
export interface AdjustmentDetail {
    "id"?: number;
    "catalogItem": CatalogItemReference;
    "description"?: string;
    "quantityOnHand"?: number;
    "unitCost"?: number;
    "warehouse": WarehouseReference;
    "warehouseBin": WarehouseBinReference;
    "quantityAdjusted": number;
    "serialNumber"?: string;
    "adjustment"?: AdjustmentReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AdjustmentReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AdjustmentType {
    "id"?: number;
    "identifier": string;
    "name"?: string;
    "auditTrailFlag"?: boolean;
    "dateCreated"?: Date;
    "createdBy"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AdjustmentTypeReference {
    "id"?: number;
    "identifier"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Agreement {
    "id"?: number;
    "name": string;
    "type": AgreementTypeReference;
    "company": CompanyReference;
    "contact": ContactReference;
    "subContractCompany"?: CompanyReference;
    "subContractContact"?: ContactReference;
    "parentAgreementId"?: number;
    "customerPO"?: string;
    "locationId"?: number;
    "businessUnitId"?: number;
    "restrictLocationFlag"?: boolean;
    "restrictDepartmentFlag"?: boolean;
    "startDate"?: Date;
    "endDate"?: Date;
    "noEndingDateFlag"?: boolean;
    "opportunity"?: OpportunityReference;
    "cancelledFlag"?: boolean;
    "dateCancelled"?: Date;
    "reasonCancelled"?: string;
    "slaId"?: number;
    "workOrder"?: string;
    "internalNotes"?: string;
    "applicationUnits"?: Agreement.ApplicationUnitsEnum;
    "applicationLimit"?: number;
    "applicationCycle"?: Agreement.ApplicationCycleEnum;
    "applicationUnlimitedFlag"?: boolean;
    "oneTimeFlag"?: boolean;
    "coverAgreementTime"?: boolean;
    "coverAgreementProduct"?: boolean;
    "coverAgreementExpense"?: boolean;
    "coverSalesTax"?: boolean;
    "carryOverUnused"?: boolean;
    "allowOverruns"?: boolean;
    "expiredDays"?: number;
    "limit"?: number;
    "expireWhenZero"?: boolean;
    "chargeToFirm"?: boolean;
    "employeeCompRate"?: Agreement.EmployeeCompRateEnum;
    "employeeCompNotExceed"?: Agreement.EmployeeCompNotExceedEnum;
    "compHourlyRate"?: number;
    "compLimitAmount"?: number;
    "billCycleId"?: number;
    "billOneTimeFlag"?: boolean;
    "billTermsId"?: number;
    "invoicingCycle"?: Agreement.InvoicingCycleEnum;
    "billToCompany"?: CompanyReference;
    "billToSite"?: SiteReference;
    "billAmount"?: number;
    "taxable"?: boolean;
    "prorateFirstBill"?: number;
    "billStartDate"?: Date;
    "taxCodeId"?: number;
    "restrictDownPayment"?: boolean;
    "prorateFlag"?: boolean;
    "invoiceDescription"?: string;
    "topComment"?: boolean;
    "bottomComment"?: boolean;
    "workRole"?: WorkRoleReference;
    "workType"?: WorkTypeReference;
    "projectTypeId"?: number;
    "invoiceTemplateSetupId"?: number;
    "billTime"?: Agreement.BillTimeEnum;
    "billExpenses"?: Agreement.BillExpensesEnum;
    "billProducts"?: Agreement.BillProductsEnum;
    "billableTimeInvoice"?: boolean;
    "billableExpenseInvoice"?: boolean;
    "billableProductInvoice"?: boolean;
    "currency"?: CurrencyReference;
    "periodType"?: Agreement.PeriodTypeEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Agreement {
    type ApplicationUnitsEnum = 'Amount' | 'Hours' | 'Incidents';
    type ApplicationCycleEnum = 'Contract2Weeks' | 'Contract4Weeks' | 'ContractYear' | 'CalendarMonth' | 'CalendarQuarter' | 'CalendarWeek' | 'ContractQuarter' | 'CalendarYear' | 'OneTimeOnly';
    type EmployeeCompRateEnum = 'Actual' | 'Hourly';
    type EmployeeCompNotExceedEnum = 'Billing' | 'Percent' | 'Amount';
    type InvoicingCycleEnum = 'CalendarYear' | 'ContractYear';
    type BillTimeEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillExpensesEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillProductsEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type PeriodTypeEnum = 'Current' | 'Future' | 'Both' | 'Undefined';
}
export interface AgreementBatchSetup {
    "id"?: number;
    "nextRunDate": Date;
    "daysInAdvance": number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AgreementReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AgreementSite {
    "id"?: number;
    "company": CompanyReference;
    "site"?: SiteReference;
    "agreementId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AgreementType {
    "id"?: number;
    "name": string;
    "prefixSuffixOption"?: AgreementType.PrefixSuffixOptionEnum;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "prePaymentFlag"?: boolean;
    "invoicePreSuffix"?: string;
    "location"?: SystemLocationReference;
    "department"?: SystemDepartmentReference;
    "restrictLocationFlag"?: boolean;
    "restrictDepartmentFlag"?: boolean;
    "sla"?: SLAReference;
    "applicationUnits"?: AgreementType.ApplicationUnitsEnum;
    "applicationLimit"?: number;
    "applicationCycle"?: AgreementType.ApplicationCycleEnum;
    "applicationUnlimitedFlag"?: boolean;
    "oneTimeFlag"?: boolean;
    "coverAgreementTimeFlag"?: boolean;
    "coverAgreementProductFlag"?: boolean;
    "coverAgreementExpenseFlag"?: boolean;
    "coverSalesTaxFlag"?: boolean;
    "carryOverUnusedFlag"?: boolean;
    "allowOverrunsFlag"?: boolean;
    "expiredDays"?: number;
    "limit"?: number;
    "expireWhenZero"?: boolean;
    "chargeToFirmFlag"?: boolean;
    "employeeCompRate": AgreementType.EmployeeCompRateEnum;
    "employeeCompNotExceed": AgreementType.EmployeeCompNotExceedEnum;
    "compHourlyRate"?: number;
    "compLimitAmount"?: number;
    "billingCycle"?: BillingCycleReference;
    "billOneTimeFlag"?: boolean;
    "billingTerms"?: BillingTermsReference;
    "invoicingCycle": AgreementType.InvoicingCycleEnum;
    "billAmount"?: number;
    "taxableFlag"?: boolean;
    "restrictDownPaymentFlag"?: boolean;
    "invoiceDescription"?: string;
    "topCommentFlag"?: boolean;
    "bottomCommentFlag"?: boolean;
    "workRole"?: WorkRoleReference;
    "workType"?: WorkTypeReference;
    "projectType"?: ProjectTypeReference;
    "invoiceTemplate"?: InvoiceTemplateReference;
    "billTime": AgreementType.BillTimeEnum;
    "billExpenses": AgreementType.BillExpensesEnum;
    "billProducts": AgreementType.BillProductsEnum;
    "billableTimeInvoiceFlag"?: boolean;
    "billableExpenseInvoiceFlag"?: boolean;
    "billableProductInvoiceFlag"?: boolean;
    "copyWorkRolesFlag"?: boolean;
    "copyWorkTypesFlag"?: boolean;
    "exclusionWorkRoleIds"?: Array<number>;
    "addAllWorkRoleExclusions"?: boolean;
    "removeAllWorkRoleExclusions"?: boolean;
    "exclusionWorkTypeIds"?: Array<number>;
    "addAllWorkTypeExclusions"?: boolean;
    "removeAllWorkTypeExclusions"?: boolean;
    "integrationXRef"?: string;
    "prorateFlag"?: boolean;
    "emailTemplate"?: EmailTemplateReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace AgreementType {
    type PrefixSuffixOptionEnum = 'Prefix' | 'Suffix';
    type ApplicationUnitsEnum = 'Amount' | 'Hours' | 'Incidents';
    type ApplicationCycleEnum = 'Contract2Weeks' | 'Contract4Weeks' | 'ContractYear' | 'CalendarMonth' | 'CalendarQuarter' | 'CalendarWeek' | 'ContractQuarter' | 'CalendarYear';
    type EmployeeCompRateEnum = 'Actual' | 'Hourly';
    type EmployeeCompNotExceedEnum = 'Billing' | 'Percent' | 'Amount';
    type InvoicingCycleEnum = 'CalendarYear' | 'ContractYear';
    type BillTimeEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillExpensesEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillProductsEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
}
export interface AgreementTypeBoardDefault {
    "id"?: number;
    "type"?: AgreementTypeReference;
    "location": SystemLocationReference;
    "department"?: SystemDepartmentReference;
    "board"?: BoardReference;
    "serviceType"?: ServiceTypeReference;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * agreementType or configurationType is required
 */
export interface AgreementTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AgreementTypeWorkRole {
    "id"?: number;
    "type"?: AgreementTypeReference;
    "workRole"?: WorkRoleReference;
    "effectiveDate"?: Date;
    "endingDate"?: Date;
    "rate"?: number;
    "rateType": AgreementTypeWorkRole.RateTypeEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace AgreementTypeWorkRole {
    type RateTypeEnum = 'AdjAmount' | 'Custom' | 'Multiplier';
}
export interface AgreementTypeWorkRoleExclusion {
    "id"?: number;
    "type"?: AgreementTypeReference;
    "workRole": WorkRoleReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AgreementTypeWorkType {
    "id"?: number;
    "type"?: AgreementTypeReference;
    "workType"?: WorkTypeReference;
    "effectiveDate"?: Date;
    "endingDate"?: Date;
    "rate"?: number;
    "rateType": AgreementTypeWorkType.RateTypeEnum;
    "billTime": AgreementTypeWorkType.BillTimeEnum;
    "hoursMin"?: number;
    "hoursMax"?: number;
    "roundBillHours"?: number;
    "overageRate"?: number;
    "overageRateType": AgreementTypeWorkType.OverageRateTypeEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace AgreementTypeWorkType {
    type RateTypeEnum = 'AdjAmount' | 'Custom' | 'Multiplier';
    type BillTimeEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type OverageRateTypeEnum = 'AdjAmount' | 'Custom' | 'Multiplier';
}
export interface AgreementTypeWorkTypeExclusion {
    "id"?: number;
    "type"?: AgreementTypeReference;
    "workType": WorkTypeReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AgreementWorkRole {
    "id"?: number;
    "workRole"?: WorkRoleReference;
    "locationId"?: number;
    "rateType": AgreementWorkRole.RateTypeEnum;
    "rate"?: number;
    "limitTo"?: number;
    "effectiveDate"?: Date;
    "endingDate"?: Date;
    "agreementId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace AgreementWorkRole {
    type RateTypeEnum = 'AdjAmount' | 'Custom' | 'Multiplier';
}
export interface AgreementWorkRoleExclusion {
    "id"?: number;
    "workRole": WorkRoleReference;
    "agreementId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AgreementWorkType {
    "id"?: number;
    "workType"?: WorkTypeReference;
    "locationId"?: number;
    "rateType": AgreementWorkType.RateTypeEnum;
    "billTime": AgreementWorkType.BillTimeEnum;
    "rate"?: number;
    "hoursMax"?: number;
    "hoursMin"?: number;
    "roundBillHours"?: number;
    "overageRate"?: number;
    "overageRateType"?: AgreementWorkType.OverageRateTypeEnum;
    "agreementLimit"?: number;
    "site"?: SiteReference;
    "effectiveDate"?: Date;
    "endingDate"?: Date;
    "agreementId"?: number;
    "company"?: CompanyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace AgreementWorkType {
    type RateTypeEnum = 'AdjAmount' | 'Custom' | 'Multiplier';
    type BillTimeEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type OverageRateTypeEnum = 'AdjAmount' | 'Custom' | 'Multiplier';
}
export interface AgreementWorkTypeExclusion {
    "id"?: number;
    "workType": WorkTypeReference;
    "agreementId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface AuditTrailEntry {
    "text"?: string;
    "enteredDate"?: string;
    "enteredBy"?: string;
    "auditType"?: string;
    "auditSubType"?: string;
    "auditSource"?: string;
}
export interface AuthAnvil {
    "id"?: number;
    "serverLocationUrl": string;
    "siteId": number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * Required when notifyType is set to: "Run Connectwise Automate Script"
 */
export interface AutomateScriptReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BatchRequest {
    "id"?: string;
    "requests"?: Array<EndpointRequest>;
    /**
     * Metadata of the entity
     */
    "headers"?: Metadata;
}
export interface BatchResponse {
    "id"?: string;
    "responses"?: Array<EndpointResponse>;
}
export interface BillingCycle {
    "id"?: number;
    "identifier": string;
    "name": string;
    "defaultFlag": boolean;
    "inactiveFlag"?: boolean;
    "billingOptions"?: BillingOptionsReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BillingCycleReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BillingDeliveryReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BillingOptionsReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BillingSetup {
    "id"?: number;
    "remitName": string;
    "location": SystemLocationReference;
    "addressOne"?: string;
    "addressTwo"?: string;
    "city"?: string;
    "state"?: StateReference;
    "zip"?: string;
    "country"?: CountryReference;
    "phone"?: string;
    "invoiceTitle": string;
    "payableName": string;
    "topcomment"?: string;
    "invoiceFooter"?: string;
    "quoteFooter"?: string;
    "overallInvoiceDefault": InvoiceTemplateReference;
    "standardInvoiceActual"?: InvoiceTemplateReference;
    "standardInvoiceFixed"?: InvoiceTemplateReference;
    "progressInvoice"?: InvoiceTemplateReference;
    "agreementInvoice"?: InvoiceTemplateReference;
    "creditMemoInvoice"?: InvoiceTemplateReference;
    "downPaymentInvoice"?: InvoiceTemplateReference;
    "miscInvoice"?: InvoiceTemplateReference;
    "salesOrderInvoice"?: InvoiceTemplateReference;
    "excludeDoNotBillTimeFlag"?: boolean;
    "excludeDoNotBillExpenseFlag"?: boolean;
    "excludeDoNotBillProductFlag"?: boolean;
    "prefixSuffixFlag"?: BillingSetup.PrefixSuffixFlagEnum;
    "prefixSuffixText"?: string;
    "chargeAdjToFirmFlag"?: boolean;
    "noWatermarkFlag"?: boolean;
    "displayTaxFlag"?: boolean;
    "allowRestrictedDeptOnRoutingFlag"?: boolean;
    "billTicketSeparatelyFlag"?: boolean;
    "billTicketCompleteFlag"?: boolean;
    "billTicketUnapprovedFlag"?: boolean;
    "billProjectCompleteFlag"?: boolean;
    "billProjectUnapprovedFlag"?: boolean;
    "progressTimeFlag"?: boolean;
    "restrictProjectDownpaymentFlag"?: boolean;
    "billSalesOrderCompleteFlag"?: boolean;
    "billProductAfterShipFlag"?: boolean;
    "restrictDownpaymentFlag"?: boolean;
    "copyNonServiceProductsFlag"?: boolean;
    "copyServiceProductsFlag"?: boolean;
    "copyAgreementProductsFlag"?: boolean;
    "printLogoFlag"?: boolean;
    "readReceiptFlag"?: boolean;
    "deliveryReceiptFlag"?: boolean;
    "disableRoutingEmailFlag"?: boolean;
    "emailTemplate": OrderStatusEmailTemplateReference;
    "localizedCountry"?: CountryReference;
    "businessNumber"?: string;
    "currency"?: CurrencyReference;
    "customLabel"?: string;
    "customText"?: string;
    "companyCode"?: string;
    "excludeAvalaraFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace BillingSetup {
    type PrefixSuffixFlagEnum = 'Prefix' | 'Suffix';
}
export interface BillingSetupRouting {
    "id"?: number;
    "sequenceNumber": number;
    "invoiceRule": BillingSetupRouting.InvoiceRuleEnum;
    "routingRule": BillingSetupRouting.RoutingRuleEnum;
    "member"?: MemberReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace BillingSetupRouting {
    type InvoiceRuleEnum = 'Agreement' | 'All' | 'Project' | 'Standard';
    type RoutingRuleEnum = 'Account' | 'Department' | 'Creator' | 'Location' | 'Project' | 'Sales' | 'Member' | 'Territory';
}
export interface BillingStatus {
    "id"?: number;
    "name": string;
    "sortOrder"?: number;
    "defaultFlag"?: boolean;
    "closedFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "sentFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BillingStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BillingTerm {
    "id"?: number;
    "name": string;
    "defaultFlag": boolean;
    "dueDays": number;
    "termsXref"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BillingTermsReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Board {
    "id"?: number;
    "name": string;
    "location": SystemLocationReference;
    "department": SystemDepartmentReference;
    "inactiveFlag"?: boolean;
    "signOffTemplate"?: ServiceSignoffReference;
    "sendToContactFlag"?: boolean;
    "contactTemplate"?: ServiceEmailTemplateReference;
    "sendToResourceFlag"?: boolean;
    "resourceTemplate"?: ServiceEmailTemplateReference;
    "projectFlag"?: boolean;
    /**
     * This field only shows if it is Project Board.
     */
    "showDependenciesFlag"?: boolean;
    /**
     * This field only shows if it is Project Board.
     */
    "showEstimatesFlag"?: boolean;
    "boardIcon"?: DocumentReference;
    "billTicketsAfterClosedFlag"?: boolean;
    "billTicketSeparatelyFlag"?: boolean;
    "billUnapprovedTimeExpenseFlag"?: boolean;
    "overrideBillingSetupFlag"?: boolean;
    "dispatchMember"?: MemberReference;
    "serviceManagerMember"?: MemberReference;
    "dutyManagerMember"?: MemberReference;
    "oncallMember"?: MemberReference;
    "workRole"?: WorkRoleReference;
    "workType"?: WorkTypeReference;
    "billTime"?: Board.BillTimeEnum;
    "billExpense"?: Board.BillExpenseEnum;
    "billProduct"?: Board.BillProductEnum;
    "autoCloseStatus"?: ServiceStatusReference;
    "autoAssignNewTicketsFlag"?: boolean;
    "autoAssignNewECTicketsFlag"?: boolean;
    "autoAssignNewPortalTicketsFlag"?: boolean;
    "discussionsLockedFlag"?: boolean;
    "timeEntryLockedFlag"?: boolean;
    "notifyEmailFrom"?: string;
    "notifyEmailFromName"?: string;
    "closedLoopDiscussionsFlag"?: boolean;
    "closedLoopResolutionFlag"?: boolean;
    "closedLoopInternalAnalysisFlag"?: boolean;
    "timeEntryDiscussionFlag"?: boolean;
    "timeEntryResolutionFlag"?: boolean;
    "timeEntryInternalAnalysisFlag"?: boolean;
    "problemSort"?: Board.ProblemSortEnum;
    "resolutionSort"?: Board.ResolutionSortEnum;
    "internalAnalysisSort"?: Board.InternalAnalysisSortEnum;
    "emailConnectorAllowReopenClosedFlag"?: boolean;
    /**
     * This field is only required when emailConnectorAllowReopenClosed is true
     */
    "emailConnectorReopenStatus"?: ServiceStatusReference;
    /**
     * This field can only be set when emailConnectorAllowReopenClosed is true
     */
    "emailConnectorReopenResourcesFlag"?: boolean;
    /**
     * This field can only be set when emailConnectorAllowReopenClosed is true
     */
    "emailConnectorNewTicketNoMatchFlag"?: boolean;
    /**
     * This field can only be set when emailConnectorAllowReopenClosed is true
     */
    "emailConnectorNeverReopenByDaysFlag"?: boolean;
    "emailConnectorReopenDaysLimit"?: number;
    "useMemberDisplayNameFlag"?: boolean;
    "sendToCCFlag"?: boolean;
    "autoAssignTicketOwnerFlag"?: boolean;
    "closedLoopAllFlag"?: boolean;
    "allSort"?: Board.AllSortEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Board {
    type BillTimeEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillExpenseEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillProductEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type ProblemSortEnum = 'Ascending' | 'Descending';
    type ResolutionSortEnum = 'Ascending' | 'Descending';
    type InternalAnalysisSortEnum = 'Ascending' | 'Descending';
    type AllSortEnum = 'Ascending' | 'Descending';
}
export interface BoardAutoAssignResource {
    "id"?: number;
    "notifyWho": NotificationRecipientReference;
    "member"?: MemberReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BoardAutoTemplate {
    "id"?: number;
    "type": ServiceTypeReference;
    "subtype": ServiceSubTypeReference;
    "item": ServiceItemReference;
    "serviceTemplate": ServiceTemplateReference;
    "board"?: BoardReference;
    "summarySetting"?: BoardAutoTemplate.SummarySettingEnum;
    "discussionSetting"?: BoardAutoTemplate.DiscussionSettingEnum;
    "internalAnalysisSetting"?: BoardAutoTemplate.InternalAnalysisSettingEnum;
    "tasksSetting"?: BoardAutoTemplate.TasksSettingEnum;
    "documentsSetting"?: BoardAutoTemplate.DocumentsSettingEnum;
    "resourcesSetting"?: BoardAutoTemplate.ResourcesSettingEnum;
    "budgetHoursSetting"?: BoardAutoTemplate.BudgetHoursSettingEnum;
    "financeInformationSetting"?: BoardAutoTemplate.FinanceInformationSettingEnum;
    "autoApplyFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace BoardAutoTemplate {
    type SummarySettingEnum = 'Append' | 'Overwrite' | 'Ignore';
    type DiscussionSettingEnum = 'Append' | 'Overwrite' | 'Ignore';
    type InternalAnalysisSettingEnum = 'Append' | 'Overwrite' | 'Ignore';
    type TasksSettingEnum = 'Append' | 'Overwrite' | 'Ignore';
    type DocumentsSettingEnum = 'Append' | 'Overwrite' | 'Ignore';
    type ResourcesSettingEnum = 'Append' | 'Overwrite' | 'Ignore';
    type BudgetHoursSettingEnum = 'Append' | 'Overwrite' | 'Ignore';
    type FinanceInformationSettingEnum = 'Append' | 'Overwrite' | 'Ignore';
}
export interface BoardCopy {
    "id"?: number;
    "name": string;
}
export interface BoardDefault {
    "id"?: number;
    "board": BoardReference;
    "serviceType"?: ServiceTypeReference;
    "defaultFlag"?: boolean;
    "agreementId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BoardExcludedMember {
    "id"?: number;
    "memberId": number;
    "boardId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BoardItem {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "board"?: BoardReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BoardItemAssociation {
    "id": number;
    "subTypeAssociationIds"?: Array<number>;
    "addAllSubTypesFlag"?: boolean;
    "removeAllSubTypesFlag"?: boolean;
    "item"?: ServiceItemReference;
    "board"?: BoardReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BoardNotification {
    "id"?: number;
    "notifyWho": NotificationRecipientReference;
    "member"?: MemberReference;
    "email"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BoardReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BoardStatus {
    "id"?: number;
    "name": string;
    "board"?: BoardReference;
    "externalIntegrationXref"?: ExternalIntegrationStatusReference;
    "sortOrder"?: number;
    "displayOnBoard"?: boolean;
    "inactive"?: boolean;
    "closedStatus"?: boolean;
    "timeEntryNotAllowed"?: boolean;
    "defaultFlag"?: boolean;
    "escalationStatus": BoardStatus.EscalationStatusEnum;
    "customerPortalDescription"?: string;
    "customerPortalFlag"?: boolean;
    "emailTemplate"?: ServiceEmailTemplateReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace BoardStatus {
    type EscalationStatusEnum = 'NotResponded' | 'Responded' | 'ResolutionPlan' | 'Resolved' | 'NoEscalation';
}
export interface BoardStatusNotification {
    "id"?: number;
    "notifyWho": NotificationRecipientReference;
    "status"?: ServiceStatusReference;
    /**
     * Service Status Notification member must be entered if the notify type is "Specific Member"
     */
    "member"?: MemberReference;
    /**
     * Service Status Notification email must be entered if the notify type is "Email Address"
     */
    "email"?: string;
    "workflowStep"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BoardSubType {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "typeAssociationIds"?: Array<number>;
    "addAllTypesFlag"?: boolean;
    "removeAllTypesFlag"?: boolean;
    "board"?: BoardReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BoardTeam {
    "id"?: number;
    "name": string;
    "teamLeader": MemberReference;
    "members"?: Array<number>;
    "defaultFlag"?: boolean;
    "notifyOnTicketDelete"?: boolean;
    "boardId"?: number;
    "locationId"?: number;
    "businessUnitId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface BoardType {
    "id"?: number;
    "name": string;
    "category"?: BoardType.CategoryEnum;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "requestForChangeFlag"?: boolean;
    "integrationXref"?: string;
    "board"?: BoardReference;
    "location"?: SystemLocationReference;
    "department"?: SystemDepartmentReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace BoardType {
    type CategoryEnum = 'Reactive' | 'Proactive';
}
export interface BoardTypeSubTypeItemAssociation {
    "id"?: number;
    "type"?: ServiceTypeReference;
    "subType"?: ServiceSubTypeReference;
    "item"?: ServiceItemReference;
    "board"?: BoardReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Calendar {
    "id"?: number;
    "name": string;
    "holidayList"?: HolidayListReference;
    "mondayStartTime"?: string;
    "mondayEndTime"?: string;
    "tuesdayStartTime"?: string;
    "tuesdayEndTime"?: string;
    "wednesdayStartTime"?: string;
    "wednesdayEndTime"?: string;
    "thursdayStartTime"?: string;
    "thursdayEndTime"?: string;
    "fridayStartTime"?: string;
    "fridayEndTime"?: string;
    "saturdayStartTime"?: string;
    "saturdayEndTime"?: string;
    "sundayStartTime"?: string;
    "sundayEndTime"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * customCalendar is a required reference if basedOn SLA Hours Type is Custom
 */
export interface CalendarReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CalendarSetupReference {
    "id"?: number;
    "ownerId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CallbackEntry {
    "id"?: number;
    "description"?: string;
    "url": string;
    "objectId": number;
    "type": string;
    "level": string;
    "memberId"?: number;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Campaign {
    "id"?: number;
    "name": string;
    "type": CampaignTypeReference;
    "subType": CampaignSubTypeReference;
    "status"?: CampaignStatusReference;
    "startDate": Date;
    "endDate"?: Date;
    "locationId"?: number;
    "member"?: MemberReference;
    "inactive"?: boolean;
    "inactiveDaysAfterEnd"?: number;
    "notes"?: string;
    "defaultGroup"?: GroupReference;
    "marketingManagerDefaultTrackId"?: number;
    "opportunityDefaultTrackId"?: number;
    "impressions"?: number;
    "budgetRevenue"?: number;
    "budgetCost"?: number;
    "actualCost"?: number;
    "budgetGrossMargin"?: number;
    "budgetROI"?: number;
    "actualRevenue"?: number;
    "actualGrossMargin"?: number;
    "actualROI"?: number;
    "emailsSent"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CampaignAudit {
    "id"?: number;
    "emailsSent": number;
    "emailsUnsent"?: number;
    "documentsCreated"?: number;
    "emailSubject"?: string;
    "group"?: GroupReference;
    "campaignId"?: number;
    "createdBy"?: string;
    "dateCreated"?: string;
}
export interface CampaignReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CampaignStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CampaignStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CampaignSubType {
    "id"?: number;
    "type": CampaignTypeReference;
    "name": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CampaignSubTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CampaignType {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CampaignTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CatalogComponent {
    "id"?: number;
    "sequenceNumber"?: number;
    "quantity": number;
    "catalogItem": CatalogItemReference;
    "hidePriceFlag"?: boolean;
    "hideItemIdentifierFlag"?: boolean;
    "hideDescriptionFlag"?: boolean;
    "hideQuantityFlag"?: boolean;
    "hideExtendedPriceFlag"?: boolean;
    "parentCatalogItem"?: CatalogItemReference;
    "price"?: number;
    "cost"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CatalogItem {
    "id"?: number;
    "identifier": string;
    "description": string;
    "inactiveFlag"?: boolean;
    "subcategory": ProductSubCategoryReference;
    "type": ProductTypeReference;
    /**
     * Defaults to Non-Inventory
     */
    "productClass"?: CatalogItem.ProductClassEnum;
    "serializedFlag"?: boolean;
    "serializedCostFlag"?: boolean;
    "phaseProductFlag"?: boolean;
    "unitOfMeasure"?: UnitOfMeasureReference;
    "minStockLevel"?: number;
    "price"?: number;
    "cost"?: number;
    "priceAttribute"?: CatalogItem.PriceAttributeEnum;
    "taxableFlag"?: boolean;
    "customerDescription": string;
    "manufacturer"?: ManufacturerReference;
    "manufacturerPartNumber"?: string;
    "vendor"?: CompanyReference;
    "vendorSku"?: string;
    "notes"?: string;
    "integrationXRef"?: string;
    "dateEntered"?: string;
    "category"?: ProductCategoryReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export namespace CatalogItem {
    type ProductClassEnum = 'Agreement' | 'Bundle' | 'Inventory' | 'NonInventory' | 'Service';
    type PriceAttributeEnum = 'FixedFee' | 'NotToExceed' | 'TimeAndMaterials' | 'OverrideRate';
}
export interface CatalogItemReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Category {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "priceLevelXref"?: string;
    "integrationXref"?: string;
    "locationIds"?: Array<number>;
    "addAllLocations"?: boolean;
    "removeAllLocations"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Certification {
    "id"?: number;
    "name": string;
    "company": CompanyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CertificationReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ChargeCode {
    "id"?: number;
    "name": string;
    "company": CompanyReference;
    "location"?: SystemLocationReference;
    "department"?: SystemDepartmentReference;
    "billTime"?: ChargeCode.BillTimeEnum;
    "expenseEntryFlag"?: boolean;
    "allowAllExpenseTypeFlag"?: boolean;
    "timeEntryFlag"?: boolean;
    /**
     * on UPDATE, if timeEntryFlag is set to true, workType will be required.
     */
    "workType"?: WorkTypeReference;
    "workRole"?: WorkRoleReference;
    "integrationXref"?: string;
    "expenseTypeIds"?: Array<number>;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ChargeCode {
    type BillTimeEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
}
export interface ChargeCodeExpenseType {
    "id"?: number;
    "type": ExpenseTypeReference;
    "chargeCode"?: ChargeCodeReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ChargeCodeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Classification {
    "id"?: number;
    "name"?: string;
    "multiplier"?: number;
    "defaultFlag"?: boolean;
    "companyFlag"?: boolean;
    "employeeFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ClassificationReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ClearPickerRequest {
    "member"?: MemberReference;
    "type"?: ClearPickerRequest.TypeEnum;
}
export namespace ClearPickerRequest {
    type TypeEnum = 'Company' | 'Vendor';
}
export interface Code {
    "id"?: number;
    "name": string;
    "description": string;
    "boardId"?: number;
    "locationId"?: number;
    "businessUnitId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Commission {
    "id"?: number;
    "member": MemberReference;
    "commissionPercent"?: number;
    "dateStart"?: Date;
    "dateEnd"?: Date;
    "location"?: SystemLocationReference;
    "department"?: SystemDepartmentReference;
    "company"?: CompanyReference;
    "site"?: SiteReference;
    "agreement"?: AgreementReference;
    "project"?: ProjectReference;
    "serviceBoard"?: BoardReference;
    "ticket"?: TicketReference;
    "territory"?: SystemLocationReference;
    "billingMethod"?: Commission.BillingMethodEnum;
    "serviceType"?: ServiceTypeReference;
    "projectBoard"?: ProjectBoardReference;
    "projectType"?: ProjectTypeReference;
    "agreementType"?: AgreementTypeReference;
    "numberOfMonths"?: number;
    "productCategory"?: ProductCategoryReference;
    "productSubCategory"?: ProductSubCategoryReference;
    "item"?: IvItemReference;
    "commissionBasis"?: Commission.CommissionBasisEnum;
    "invoiceOption"?: Commission.InvoiceOptionEnum;
    "servicesFlag"?: boolean;
    "agreementsFlag"?: boolean;
    "productsFlag"?: boolean;
    "myOpportunitiesFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Commission {
    type BillingMethodEnum = 'Agreement' | 'CreditMemo' | 'DownPayment' | 'Miscellaneous' | 'Progress' | 'Standard';
    type CommissionBasisEnum = 'SalesAmount' | 'GrossProfit';
    type InvoiceOptionEnum = 'PaidInvoices' | 'AllInvoices';
}
export interface CommunicationTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Company {
    "id"?: number;
    "identifier": string;
    "name": string;
    "status"?: CompanyStatusReference;
    "type"?: CompanyTypeReference;
    /**
     * At least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country
     */
    "addressLine1"?: string;
    /**
     * At least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country
     */
    "addressLine2"?: string;
    /**
     * At least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country
     */
    "city"?: string;
    /**
     * At least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country
     */
    "state"?: string;
    /**
     * At least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country
     */
    "zip"?: string;
    /**
     * At least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country
     */
    "country"?: CountryReference;
    "phoneNumber"?: string;
    "faxNumber"?: string;
    "website"?: string;
    "territoryId"?: number;
    "marketId"?: number;
    "accountNumber"?: string;
    "defaultContact"?: ContactReference;
    "dateAcquired"?: Date;
    "sicCode"?: SicCodeReference;
    "parentCompany"?: CompanyReference;
    "annualRevenue"?: number;
    "numberOfEmployees"?: number;
    "ownershipType"?: OwnershipTypeReference;
    /**
     * The specified system time zone for the Company
     */
    "timeZone"?: TimeZoneSetupReference;
    "leadSource"?: string;
    "leadFlag"?: boolean;
    "unsubscribeFlag"?: boolean;
    "calendarId"?: number;
    "userDefinedField1"?: string;
    "userDefinedField2"?: string;
    "userDefinedField3"?: string;
    "userDefinedField4"?: string;
    "userDefinedField5"?: string;
    "userDefinedField6"?: string;
    "userDefinedField7"?: string;
    "userDefinedField8"?: string;
    "userDefinedField9"?: string;
    "userDefinedField10"?: string;
    "vendorIdentifier"?: string;
    "taxIdentifier"?: string;
    /**
     * New companies will be created with the default tax code unless otherwise specified.
     */
    "taxCode"?: TaxCodeReference;
    "billingTerms"?: BillingTermsReference;
    "invoiceTemplate"?: InvoiceTemplateReference;
    "pricingSchedule"?: PricingScheduleReference;
    /**
     * Based on CompanyEntityType Report
     */
    "companyEntityType"?: EntityTypeReference;
    "billToCompany"?: CompanyReference;
    "billingSite"?: SiteReference;
    "billingContact"?: ContactReference;
    "invoiceDeliveryMethod"?: BillingDeliveryReference;
    "invoiceToEmailAddress"?: string;
    "invoiceCCEmailAddress"?: string;
    "deletedFlag"?: boolean;
    "dateDeleted"?: Date;
    "deletedBy"?: string;
    "mobileGuid"?: Guid;
    "facebookUrl"?: string;
    "twitterUrl"?: string;
    "linkedInUrl"?: string;
    "currency"?: CurrencyReference;
    "territoryManager"?: MemberReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export interface CompanyCustomNote {
    "id"?: number;
    "customNote": string;
    "status": CompanyStatusReference;
    "company"?: CompanyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CompanyGroup {
    "id"?: number;
    "group": GroupReference;
    "company"?: CompanyReference;
    "defaultContactFlag"?: boolean;
    "allContactsFlag"?: boolean;
    "removeAllContactsFlag"?: boolean;
    "unsubscribeFlag"?: boolean;
    "contactIds"?: Array<number>;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CompanyManagementSummary {
    "id"?: number;
    "managementSolution"?: ManagementSolutionReference;
    "groupIdentifier": string;
    /**
     * deviceType is required if the managementSolution is Legacy
     */
    "deviceType"?: CompanyManagementSummary.DeviceTypeEnum;
    "agreement"?: AgreementReference;
    "snmpMachines"?: number;
    "totalWorkstations"?: number;
    "totalServers"?: number;
    "totalWindowsServers"?: number;
    "totalWindowsWorkstations"?: number;
    "totalManagedMachines"?: number;
    "serversOffline"?: number;
    "serversDiskSpaceLow"?: number;
    "failedBackupJobs"?: number;
    "totalNotifications"?: number;
    "successfulBackupJobs"?: number;
    "serverAvailability"?: number;
    "virusesRemoved"?: number;
    "spywareItemsRemoved"?: number;
    "windowsPatchesInstalled"?: number;
    "diskCleanups"?: number;
    "diskDefragmentations"?: number;
    "fullyPatchedMachines"?: number;
    "missingOneTwoPatchesMachines"?: number;
    "missingThreeFivePatchesMachines"?: number;
    "missingMoreFivePatchesMachines"?: number;
    "missingUnscannedPatchesMachines"?: number;
    "alertsGenerated"?: string;
    "internetConnectivity"?: number;
    "diskSpaceCleanedMb"?: number;
    "missingSecurityPatches"?: string;
    "cpuUtilization"?: number;
    "memoryUtilization"?: number;
    "company"?: CompanyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace CompanyManagementSummary {
    type DeviceTypeEnum = 'WorkstationsAndServers' | 'BackupStats' | 'Servers' | 'Workstations';
}
export interface CompanyMerge {
    "toCompanyId": number;
    "name"?: CompanyMerge.NameEnum;
    "identifier"?: CompanyMerge.IdentifierEnum;
    "status"?: CompanyMerge.StatusEnum;
    "type"?: CompanyMerge.TypeEnum;
    "primaryAddress"?: CompanyMerge.PrimaryAddressEnum;
    "primaryContact"?: CompanyMerge.PrimaryContactEnum;
    "phone"?: CompanyMerge.PhoneEnum;
    "fax"?: CompanyMerge.FaxEnum;
    "website"?: CompanyMerge.WebsiteEnum;
    "market"?: CompanyMerge.MarketEnum;
    "territory"?: CompanyMerge.TerritoryEnum;
    "revenue"?: CompanyMerge.RevenueEnum;
    "revenueYear"?: CompanyMerge.RevenueYearEnum;
    "numberOfEmployees"?: CompanyMerge.NumberOfEmployeesEnum;
    "sicCode"?: CompanyMerge.SicCodeEnum;
    "dateAcquired"?: CompanyMerge.DateAcquiredEnum;
    "timeZone"?: CompanyMerge.TimeZoneEnum;
    "sourceList"?: CompanyMerge.SourceListEnum;
    "userDefinedField1"?: CompanyMerge.UserDefinedField1Enum;
    "userDefinedField2"?: CompanyMerge.UserDefinedField2Enum;
    "userDefinedField3"?: CompanyMerge.UserDefinedField3Enum;
    "userDefinedField4"?: CompanyMerge.UserDefinedField4Enum;
    "userDefinedField5"?: CompanyMerge.UserDefinedField5Enum;
    "userDefinedField6"?: CompanyMerge.UserDefinedField6Enum;
    "userDefinedField7"?: CompanyMerge.UserDefinedField7Enum;
    "userDefinedField8"?: CompanyMerge.UserDefinedField8Enum;
    "userDefinedField9"?: CompanyMerge.UserDefinedField9Enum;
    "userDefinedField10"?: CompanyMerge.UserDefinedField10Enum;
    "billingAddress"?: CompanyMerge.BillingAddressEnum;
    "billingContact"?: CompanyMerge.BillingContactEnum;
    "taxCode"?: CompanyMerge.TaxCodeEnum;
    "accountNumber"?: CompanyMerge.AccountNumberEnum;
    "billingTerms"?: CompanyMerge.BillingTermsEnum;
    "notes"?: CompanyMerge.NotesEnum;
    "sites"?: CompanyMerge.SitesEnum;
    "activities"?: CompanyMerge.ActivitiesEnum;
    "opportunities"?: CompanyMerge.OpportunitiesEnum;
    "services"?: CompanyMerge.ServicesEnum;
    "projects"?: CompanyMerge.ProjectsEnum;
    "contacts"?: CompanyMerge.ContactsEnum;
    "documents"?: CompanyMerge.DocumentsEnum;
}
export namespace CompanyMerge {
    type NameEnum = 'From' | 'To';
    type IdentifierEnum = 'From' | 'To';
    type StatusEnum = 'From' | 'To';
    type TypeEnum = 'From' | 'To';
    type PrimaryAddressEnum = 'From' | 'To';
    type PrimaryContactEnum = 'From' | 'To';
    type PhoneEnum = 'From' | 'To';
    type FaxEnum = 'From' | 'To';
    type WebsiteEnum = 'From' | 'To';
    type MarketEnum = 'From' | 'To';
    type TerritoryEnum = 'From' | 'To';
    type RevenueEnum = 'From' | 'To';
    type RevenueYearEnum = 'From' | 'To';
    type NumberOfEmployeesEnum = 'From' | 'To';
    type SicCodeEnum = 'From' | 'To';
    type DateAcquiredEnum = 'From' | 'To';
    type TimeZoneEnum = 'From' | 'To';
    type SourceListEnum = 'From' | 'To';
    type UserDefinedField1Enum = 'From' | 'To';
    type UserDefinedField2Enum = 'From' | 'To';
    type UserDefinedField3Enum = 'From' | 'To';
    type UserDefinedField4Enum = 'From' | 'To';
    type UserDefinedField5Enum = 'From' | 'To';
    type UserDefinedField6Enum = 'From' | 'To';
    type UserDefinedField7Enum = 'From' | 'To';
    type UserDefinedField8Enum = 'From' | 'To';
    type UserDefinedField9Enum = 'From' | 'To';
    type UserDefinedField10Enum = 'From' | 'To';
    type BillingAddressEnum = 'From' | 'To';
    type BillingContactEnum = 'From' | 'To';
    type TaxCodeEnum = 'From' | 'To';
    type AccountNumberEnum = 'From' | 'To';
    type BillingTermsEnum = 'From' | 'To';
    type NotesEnum = 'Discard' | 'Merge';
    type SitesEnum = 'Discard' | 'Merge';
    type ActivitiesEnum = 'Discard' | 'Merge';
    type OpportunitiesEnum = 'Discard' | 'Merge';
    type ServicesEnum = 'Discard' | 'Merge';
    type ProjectsEnum = 'Discard' | 'Merge';
    type ContactsEnum = 'Discard' | 'Merge';
    type DocumentsEnum = 'Discard' | 'Merge';
}
export interface CompanyNote {
    "id"?: number;
    "text": string;
    "type"?: NoteTypeReference;
    "flagged"?: boolean;
    "enteredBy"?: string;
    "company"?: CompanyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CompanyPickerItem {
    "id"?: number;
    "member"?: MemberReference;
    /**
     * The company or vendor selected by member from the company/vendor picker component
     */
    "company": CompanyReference;
    "companyStatus"?: CompanyStatusReference;
    "companyType"?: CompanyTypeReference;
    "companySite"?: SiteReference;
    "companyLocation"?: SystemLocationReference;
    "companyCountry"?: CountryReference;
    /**
     * If true, this record was created by the vendor picker component. Otherwise, the record was created by the company picker component.
     */
    "vendorPickerFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * Vendor Can be either Member or Company Reference
 */
export interface CompanyReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CompanySite {
    "id"?: number;
    "name": string;
    "addressLine1"?: string;
    "addressLine2"?: string;
    "city"?: string;
    "state"?: string;
    "zip"?: string;
    "country"?: CountryReference;
    "addressFormat"?: string;
    "phoneNumber"?: string;
    "faxNumber"?: string;
    "taxCodeId"?: number;
    "expenseReimbursement"?: number;
    "primaryAddressFlag"?: boolean;
    "defaultShippingFlag"?: boolean;
    "defaultBillingFlag"?: boolean;
    "defaultMailingFlag"?: boolean;
    "mobileGuid"?: Guid;
    "calendar"?: CalendarReference;
    "timeZone"?: TimeZoneSetupReference;
    "company"?: CompanyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CompanyStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "notifyFlag"?: boolean;
    "disallowSavingFlag"?: boolean;
    "notificationMessage"?: string;
    "customNoteFlag"?: boolean;
    "cancelOpenTracksFlag"?: boolean;
    "track"?: TrackReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * Required when notifyType is set to: "Change Company Status"
 */
export interface CompanyStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * A list of customers for which the member holds a team role
 */
export interface CompanyTeam {
    "id"?: number;
    "company"?: CompanyReference;
    "teamRole": TeamRoleReference;
    "locationId"?: number;
    "businessUnitId"?: number;
    "contact"?: ContactReference;
    "member"?: MemberReference;
    "accountManagerFlag"?: boolean;
    "techFlag"?: boolean;
    "salesFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "count"?: number;
    "reAssignToMember"?: MemberReference;
    "reAssignToContact"?: ContactReference;
}
export interface CompanyType {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "vendorFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CompanyTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Configuration {
    "id"?: number;
    "name": string;
    "type": ConfigurationTypeReference;
    "status"?: ConfigurationStatusReference;
    "company": CompanyReference;
    "contact"?: ContactReference;
    "site"?: SiteReference;
    "locationId"?: number;
    "businessUnitId"?: number;
    "deviceIdentifier"?: string;
    "serialNumber"?: string;
    "modelNumber"?: string;
    "tagNumber"?: string;
    "purchaseDate"?: Date;
    "installationDate"?: Date;
    "installedBy"?: MemberReference;
    "warrantyExpirationDate"?: Date;
    "vendorNotes"?: string;
    "notes"?: string;
    "macAddress"?: string;
    "lastLoginName"?: string;
    "billFlag"?: boolean;
    "backupSuccesses"?: number;
    "backupIncomplete"?: number;
    "backupFailed"?: number;
    "backupRestores"?: number;
    "lastBackupDate"?: Date;
    "backupServerName"?: string;
    "backupBillableSpaceGb"?: number;
    "backupProtectedDeviceList"?: string;
    "backupYear"?: number;
    "backupMonth"?: number;
    "ipAddress"?: string;
    "defaultGateway"?: string;
    "osType"?: string;
    "osInfo"?: string;
    "cpuSpeed"?: string;
    "ram"?: string;
    "localHardDrives"?: string;
    "parentConfigurationId"?: number;
    "vendor"?: CompanyReference;
    "manufacturer"?: ManufacturerReference;
    "questions"?: Array<ConfigurationQuestion>;
    "activeFlag"?: boolean;
    "managementLink"?: string;
    "remoteLink"?: string;
    "sla"?: SLAReference;
    "mobileGuid"?: Guid;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "displayVendorFlag"?: boolean;
    "customFields"?: Array<CustomFieldValue>;
}
export interface ConfigurationQuestion {
    "answerId"?: number;
    "questionId"?: number;
    "question"?: string;
    "answer"?: string;
    "sequenceNumber"?: number;
    "numberOfDecimals"?: number;
    "fieldType"?: ConfigurationQuestion.FieldTypeEnum;
    "requiredFlag"?: boolean;
}
export namespace ConfigurationQuestion {
    type FieldTypeEnum = 'Button' | 'Checkbox' | 'Currency' | 'Date' | 'Hyperlink' | 'IPAddress' | 'Number' | 'Password' | 'Percent' | 'Text' | 'TextArea';
}
export interface ConfigurationReference {
    "id"?: number;
    "deviceIdentifier"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ConfigurationStatus {
    "id"?: number;
    "description": string;
    "closedFlag"?: boolean;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ConfigurationStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ConfigurationType {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "systemFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ConfigurationTypeQuestion {
    "id"?: number;
    "configurationType"?: ConfigurationTypeReference;
    "fieldType": ConfigurationTypeQuestion.FieldTypeEnum;
    "entryType": ConfigurationTypeQuestion.EntryTypeEnum;
    "sequenceNumber": number;
    "question": string;
    "numberOfDecimals"?: number;
    "requiredFlag"?: boolean;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ConfigurationTypeQuestion {
    type FieldTypeEnum = 'Button' | 'Checkbox' | 'Currency' | 'Date' | 'Hyperlink' | 'IPAddress' | 'Number' | 'Password' | 'Percent' | 'Text' | 'TextArea';
    type EntryTypeEnum = 'EntryField' | 'List' | 'Option';
}
export interface ConfigurationTypeQuestionReference {
    "id"?: number;
    "question"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ConfigurationTypeQuestionValue {
    "id"?: number;
    "configurationType"?: ConfigurationTypeReference;
    "question"?: ConfigurationTypeQuestionReference;
    "value": string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ConfigurationTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ConnectWiseHostedSetup {
    "id"?: number;
    /**
     * Can be obtained via ConnectWiseHostedApiScreen report
     */
    "screenId": number;
    "description": string;
    "url": string;
    "type": ConnectWiseHostedSetup.TypeEnum;
    "origin"?: string;
    "podHeight"?: number;
    "toolbarButtonDialogHeight"?: number;
    "toolbarButtonDialogWidth"?: number;
    /**
     * Only required for ToolbarButtons
     */
    "toolbarButtonText"?: string;
    "toolbarButtonToolTip"?: string;
    "toolbarButtonIconDocumentId"?: number;
    "disabledFlag"?: boolean;
    "createdBy"?: string;
    "dateCreated"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ConnectWiseHostedSetup {
    type TypeEnum = 'Tab' | 'Pod' | 'ToolbarButton';
}
export interface Contact {
    "id"?: number;
    "firstName": string;
    "lastName"?: string;
    "type"?: ContactTypeReference;
    "company"?: CompanyReference;
    "site"?: SiteReference;
    "addressLine1"?: string;
    "addressLine2"?: string;
    "city"?: string;
    "state"?: string;
    "zip"?: string;
    "country"?: string;
    "relationship"?: RelationshipReference;
    "department"?: ContactDepartmentReference;
    "inactiveFlag"?: boolean;
    "defaultMergeContactId"?: number;
    "securityIdentifier"?: string;
    "managerContactId"?: number;
    "assistantContactId"?: number;
    "title"?: string;
    "school"?: string;
    "nickName"?: string;
    "marriedFlag"?: boolean;
    "childrenFlag"?: boolean;
    "significantOther"?: string;
    "portalPassword"?: string;
    "portalSecurityLevel"?: number;
    "disablePortalLoginFlag"?: boolean;
    "unsubscribeFlag"?: boolean;
    "gender"?: Contact.GenderEnum;
    "birthDay"?: Date;
    "anniversary"?: Date;
    "presence"?: Contact.PresenceEnum;
    "mobileGuid"?: Guid;
    "facebookUrl"?: string;
    "twitterUrl"?: string;
    "linkedInUrl"?: string;
    "defaultBillingFlag"?: boolean;
    "defaultFlag"?: boolean;
    "communicationItems"?: Array<ContactCommunicationItem>;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export namespace Contact {
    type GenderEnum = 'Male' | 'Female';
    type PresenceEnum = 'Online' | 'DoNotDisturb' | 'Away' | 'Offline' | 'NoAgent';
}
export interface ContactCommunication {
    "id"?: number;
    "contactId"?: number;
    "type": CommunicationTypeReference;
    "value": string;
    "extension"?: string;
    "defaultFlag"?: boolean;
    "mobileGuid"?: Guid;
    "communicationType"?: ContactCommunication.CommunicationTypeEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ContactCommunication {
    type CommunicationTypeEnum = 'Phone' | 'Fax' | 'Email';
}
export interface ContactCommunicationItem {
    "id"?: number;
    "type": CommunicationTypeReference;
    "value": string;
    "extension"?: string;
    "defaultFlag"?: boolean;
    "communicationType"?: ContactCommunicationItem.CommunicationTypeEnum;
}
export namespace ContactCommunicationItem {
    type CommunicationTypeEnum = 'Phone' | 'Fax' | 'Email';
}
export interface ContactDepartment {
    "id"?: number;
    "name": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ContactDepartmentReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ContactGroup {
    "id"?: number;
    "group": GroupReference;
    "contact"?: ContactReference;
    "description"?: string;
    "unsubscribeFlag"?: boolean;
    "companyUnsubcribedEmailMessage"?: string;
    "companyGroupUnsubscribedEmailMessage"?: string;
    "contactUnsubscribedEmailMessage"?: string;
    "contactGroupUnsubscribedEmailMessage"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ContactNote {
    "id"?: number;
    "contactId"?: number;
    "text": string;
    "type"?: NoteTypeReference;
    "flagged"?: boolean;
    "enteredBy"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ContactReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ContactRelationship {
    "id"?: number;
    "name": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ContactType {
    "id"?: number;
    "description": string;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ContactTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Conversion {
    "id"?: number;
    "quantity": number;
    "uomType": UnitOfMeasureReference;
    "parentUOM"?: UnitOfMeasureReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CorporateStructure {
    "id"?: number;
    "levelCount"?: CorporateStructure.LevelCountEnum;
    "level1Name"?: string;
    "level2Name"?: string;
    "level3Name"?: string;
    "level4Name"?: string;
    "level5Name"?: string;
    "fiscalYearStart": CorporateStructure.FiscalYearStartEnum;
    "locationCaption": string;
    "groupCaption": string;
    "baseCurrency": CurrencyReference;
    "president"?: MemberReference;
    "chiefOperatingOfficer"?: MemberReference;
    "controller"?: MemberReference;
    "dispatcher"?: MemberReference;
    "serviceManager"?: MemberReference;
    "dutyManager"?: MemberReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace CorporateStructure {
    type LevelCountEnum = 'Level1' | 'Level2' | 'Level3' | 'Level4' | 'Level5';
    type FiscalYearStartEnum = 'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December';
}
export interface CorporateStructureLevel {
    "id"?: number;
    "name"?: string;
}
export interface CorporateStructureLevelReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Count {
    "count"?: number;
}
export interface Country {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "currency": CurrencyReference;
    "cityCaption"?: string;
    "stateCaption"?: string;
    "zipCaption"?: string;
    "zipMinimumLength"?: number;
    "dialingPrefix"?: string;
    "addressFormat"?: AddressFormatReference;
    "countryCode"?: string;
    "localizationCaptionOne"?: string;
    "localizationValueOne"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * At least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country
 */
export interface CountryReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CreateAccountingBatchRequest {
    "id"?: number;
    "batchIdentifier": string;
    "glInterfaceIdentifier"?: string;
    /**
     * Batch must export Invoices, Expenses or Products
     */
    "exportInvoicesFlag"?: boolean;
    /**
     * Batch must export Invoices, Expenses or Products
     */
    "exportExpensesFlag"?: boolean;
    /**
     * Batch must export Invoices, Expenses or Products
     */
    "exportProductsFlag"?: boolean;
    "processedRecordIds": Array<number>;
    "summarizeExpenses"?: boolean;
}
export interface Crm {
    "id"?: number;
    "companyListCount"?: number;
    "lockProbabilityFlag"?: boolean;
    "accountManagerRole": TeamRoleReference;
    "technicalContactRole": TeamRoleReference;
    "salesRepRole": TeamRoleReference;
    "companyIdGenerationFlag"?: boolean;
    "excludeSpacesFlag"?: boolean;
    "field1Caption"?: string;
    "field2Caption"?: string;
    "field3Caption"?: string;
    "field4Caption"?: string;
    "field5Caption"?: string;
    "field6Caption"?: string;
    "field7Caption"?: string;
    "field8Caption"?: string;
    "field9Caption"?: string;
    "field10Caption"?: string;
    "primaryRepCaption"?: string;
    "secondaryRepCaption"?: string;
    "other1Caption"?: string;
    "other2Caption"?: string;
    "defaultYear"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Currency {
    "id"?: number;
    "currencyIdentifier": string;
    "name": string;
    "symbol"?: string;
    "displayIdFlag"?: boolean;
    "displaySymbolFlag"?: boolean;
    "isoCode": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CurrencyReference {
    "id"?: number;
    "symbol"?: string;
    "isoCode"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CustomFieldValue {
    "id"?: number;
    "caption"?: string;
    "type"?: CustomFieldValue.TypeEnum;
    "entryMethod"?: CustomFieldValue.EntryMethodEnum;
    "numberOfDecimals"?: number;
    "value"?: string;
}
export namespace CustomFieldValue {
    type TypeEnum = 'Button' | 'Checkbox' | 'Currency' | 'Date' | 'Hyperlink' | 'IPAddress' | 'Number' | 'Password' | 'Percent' | 'Text' | 'TextArea';
    type EntryMethodEnum = 'EntryField' | 'List' | 'Option';
}
export interface CustomReport {
    "id"?: number;
    "reportLink": string;
    "name": string;
    /**
     * The Module Name
     */
    "module": CustomReport.ModuleEnum;
    "description": string;
    "generatedFlag"?: boolean;
    "parameterPrefix"?: string;
    "parameterSeparator"?: string;
    "parameterNameSeparator"?: string;
    "parameterSuffix"?: string;
    "locationFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Location parameter
     */
    "locationParamId"?: number;
    "locationDefaultFlag"?: boolean;
    "locationOverride"?: string;
    "departmentFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Department parameter
     */
    "departmentParamId"?: number;
    "departmentDefaultFlag"?: boolean;
    "departmentOverride"?: string;
    "territoryFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Terriroty parameter
     */
    "territoryParamId"?: number;
    "territoryDefaultFlag"?: boolean;
    "territoryOverride"?: string;
    "companyFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Company parameter
     */
    "companyParamId"?: number;
    "companyOverride"?: string;
    "memberFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Member parameter
     */
    "memberParamId"?: number;
    "memberOverride"?: string;
    "startDateFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Start Date parameter
     */
    "startDateParamId"?: number;
    "startDateOverride"?: string;
    "endDateFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's End Date parameter
     */
    "endDateParamId"?: number;
    "endDateOverride"?: string;
    "oppTypeFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Opportunity Type parameter
     */
    "oppTypeParamId"?: number;
    "oppTypeOverride"?: string;
    "opportunityFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Opportunity parameter
     */
    "opportunityParamId"?: number;
    "opportunityOverride"?: string;
    "marketingCampaignFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Marketing Campaign parameter
     */
    "marketingCampaignParamId"?: number;
    "marketingCampaignOverride"?: string;
    "serviceBoardFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Service Board parameter
     */
    "serviceBoardParamId"?: number;
    "serviceBoardDefaultFlag"?: boolean;
    "serviceBoardOverride"?: string;
    "serviceTypeFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Service Type parameter
     */
    "serviceTypeParamId"?: number;
    "serviceTypeOverride"?: string;
    "serviceStatusFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Service Status parameter
     */
    "serviceStatusParamId"?: number;
    "serviceStatusOverride"?: string;
    "agreementTypeFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Agreement Type parameter
     */
    "agreementTypeParamId"?: number;
    "agreementTypeOverride"?: string;
    "agreementFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Agreement parameter
     */
    "agreementParamId"?: number;
    "agreementOverride"?: string;
    "projectTypeFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Project Type parameter
     */
    "projectTypeParamId"?: number;
    "projectTypeOverride"?: string;
    "projectFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Project parameter
     */
    "projectParamId"?: number;
    "projectOverride"?: string;
    "workRoleFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Work Role parameter
     */
    "workRoleParamId"?: number;
    "workRoleOverride"?: string;
    "workTypeFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Work Type parameter
     */
    "workTypeParamId"?: number;
    "workTypeOverride"?: string;
    "invoiceFlag"?: boolean;
    /**
     * Parameter unique identifier for the Custom Report's Invoice Type parameter
     */
    "invoiceParamId"?: number;
    "invoiceOverride"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace CustomReport {
    type ModuleEnum = 'Companies' | 'Finance' | 'Marketing' | 'Procurement' | 'Project' | 'Sales' | 'ServiceDesk' | 'TimeExpense';
}
export interface CustomReportParameter {
    "id"?: number;
    /**
     * Either a caption name or parameter name is required
     */
    "name"?: string;
    /**
     * Either a caption name or parameter name is required
     */
    "captionName"?: string;
    "customReport"?: CustomReportReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface CustomReportReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface DeliveryMethod {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "emailFlag"?: boolean;
    "integrationEmailFlag"?: boolean;
    "integrationPrintFlag"?: boolean;
    "integrationActiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Department {
    "id"?: number;
    "identifier": string;
    "name": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface DepartmentLocation {
    "id"?: number;
    "location": SystemLocationReference;
    "department": SystemDepartmentReference;
    "departmentManager"?: MemberReference;
    "dispatch"?: MemberReference;
    "serviceManager"?: MemberReference;
    "dutyManager"?: MemberReference;
    "ldapConfig"?: LdapConfigurationReference;
    "addAllLocations"?: boolean;
    "removeAllLocations"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface DepartmentMananager {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface DispatchMember {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface DocumentInfo {
    "id"?: number;
    "title"?: string;
    "fileName"?: string;
    "serverFileName"?: string;
    "owner"?: string;
    "linkFlag"?: boolean;
    "imageFlag"?: boolean;
    "publicFlag"?: boolean;
    "htmlTemplateFlag"?: boolean;
    "readOnlyFlag"?: boolean;
    "size"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface DocumentReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface DocumentSetup {
    "id"?: number;
    "uploadAsLinkFlag"?: boolean;
    "isPublicFlag"?: boolean;
    "docPath"?: string;
    "templatePath"?: string;
    "templateOutputPath"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface DutyManager {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface EmailConnector {
    "id"?: number;
    "imapSetup": ImapSetupReference;
    "serviceBoard": BoardReference;
    "defaultCompany": CompanyReference;
    "defaultMember": MemberReference;
    "location"?: SystemLocationReference;
    "department"?: SystemDepartmentReference;
    "emailNotifyFrom"?: string;
    "bccEmailTo"?: string;
    "emailErrorsTo": string;
    "setEmailToDefaultContactFlag"?: boolean;
    "noResponseFlag"?: boolean;
    "neverRespondFlag"?: boolean;
    "discardDuplicatesFlag"?: boolean;
    "postRepliesToTicketFlag"?: boolean;
    "createContactFlag"?: boolean;
    "responseEmailForNew"?: string;
    "responseEmailForExisting"?: string;
    "sourceOverride"?: ServiceSourceReference;
    "priorityOverride"?: PriorityReference;
    "typeOverride"?: ServiceTypeReference;
    "subTypeOverride"?: ServiceSubTypeReference;
    "itemOverride"?: ServiceItemReference;
    "statusOverride"?: ServiceStatusReference;
    "addCcFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface EmailConnectorParsingRule {
    "id"?: number;
    "parsingStyle"?: EmailConnectorParsingStyleReference;
    "priority": number;
    "parsingVariable": EmailConnectorParsingVariableReference;
    "searchTerm": string;
    "servicePriority"?: PriorityReference;
    "serviceStatus"?: ServiceStatusReference;
    "serviceType"?: ServiceTypeReference;
    "serviceSubType"?: ServiceSubTypeReference;
    "serviceItem"?: ServiceItemReference;
    "serviceBoard"?: BoardReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface EmailConnectorParsingStyle {
    "id"?: number;
    "parsingType": EmailConnectorParsingTypeReference;
    "parseRule": string;
    "priority": number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface EmailConnectorParsingStyleReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface EmailConnectorParsingTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface EmailConnectorParsingVariableReference {
    "id"?: number;
    "name"?: string;
    "identifier"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface EmailConnectorReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface EmailOpened {
    "id"?: number;
    "campaignId"?: number;
    "contactId": number;
    "dateOpened"?: Date;
}
export interface EmailTemplateReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface EmailToken {
    "id"?: number;
    "token"?: string;
    "description"?: string;
    "addressFlag"?: boolean;
    "agreementFlag"?: boolean;
    "companyFlag"?: boolean;
    "configFlag"?: boolean;
    "contactFlag"?: boolean;
    "invoiceFlag"?: boolean;
    "purchaseOrderFlag"?: boolean;
    "purchaseOrderStatusFlag"?: boolean;
    "rmaFlag"?: boolean;
    "salesFlag"?: boolean;
    "serviceFlag"?: boolean;
    "tracksFlag"?: boolean;
    "workflowFlag"?: boolean;
}
export interface EndpointRequest {
    "id"?: string;
    "contentType"?: string;
    "method"?: string;
    "relativeUrl"?: string;
    "body"?: string;
}
export interface EndpointResponse {
    "id"?: string;
    "code"?: number;
    "message"?: string;
    "sort"?: number;
}
/**
 * Based on CompanyEntityType Report
 */
export interface EntityTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Error {
    "code"?: string;
    "message"?: string;
    "errors"?: Array<ValidationError>;
}
export interface ExpenseEntry {
    "id"?: number;
    /**
     * Company or chargeToType is required
     */
    "company"?: CompanyReference;
    "chargeToId"?: number;
    /**
     * Company or chargeToType is required
     */
    "chargeToType"?: ExpenseEntry.ChargeToTypeEnum;
    "type": ExpenseTypeReference;
    "member"?: MemberReference;
    "paymentMethod"?: PaymentMethodReference;
    "classification"?: ClassificationReference;
    "amount": number;
    "billableOption": ExpenseEntry.BillableOptionEnum;
    "date": Date;
    "locationId"?: number;
    "businessUnitId"?: number;
    "notes"?: string;
    "agreement"?: AgreementReference;
    "invoiceAmount"?: number;
    "mobileGuid"?: Guid;
    "taxes"?: Array<ExpenseTax>;
    "invoice"?: InvoiceReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ExpenseEntry {
    type ChargeToTypeEnum = 'ServiceTicket' | 'ProjectTicket' | 'ChargeCode' | 'Activity';
    type BillableOptionEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
}
export interface ExpenseReport {
    "id"?: number;
    "member"?: MemberReference;
    "year"?: number;
    "period"?: number;
    "dateStart"?: Date;
    "dateEnd"?: Date;
    "status"?: ExpenseReport.StatusEnum;
    "total"?: number;
    "dueDate"?: Date;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ExpenseReport {
    type StatusEnum = 'Open' | 'Rejected' | 'PendingApproval' | 'ErrorsCorrected' | 'PendingProjectApproval' | 'ApprovedByTierOne' | 'RejectBySecondTier' | 'ApprovedByTierTwo' | 'ReadyToBill' | 'Billed' | 'WrittenOff' | 'BilledAgreement';
}
export interface ExpenseTax {
    "id"?: number;
    "amount"?: number;
    "type"?: ExpenseTaxTypeReference;
}
export interface ExpenseTaxTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ExpenseType {
    "id"?: number;
    "name": string;
    "amountCaption": string;
    "reimbursementRate"?: number;
    "billExpenses": ExpenseType.BillExpensesEnum;
    "invoiceMarkupOption": ExpenseType.InvoiceMarkupOptionEnum;
    "invoiceMarkupAmount"?: number;
    "advancedAmountFlag"?: boolean;
    "mileageFlag"?: boolean;
    "quantityFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "maxAmount"?: number;
    "externalIntegrationXRef"?: ExternalExpenseTypeIntegrationReference;
    "integrationXRef"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ExpenseType {
    type BillExpensesEnum = 'Billable' | 'DoNotBill' | 'NoCharge';
    type InvoiceMarkupOptionEnum = 'Percent' | 'Amount' | 'Mile';
}
export interface ExpenseTypeExemption {
    "id"?: number;
    "expenseType": ExpenseTypeReference;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelOneFlag"?: boolean;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelTwoFlag"?: boolean;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelThreeFlag"?: boolean;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelFourFlag"?: boolean;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelFiveFlag"?: boolean;
    "taxCode"?: TaxCodeReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ExpenseTypeExternalIntegrationReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ExpenseTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ExportAccountingBatchRequest {
    "batchIdentifier": string;
    "glInterfaceIdentifier"?: string;
    "thruDate"?: Date;
    "locationId"?: number;
    "summarizeInvoices"?: ExportAccountingBatchRequest.SummarizeInvoicesEnum;
    /**
     * Batch export must include invoices, expenses, or products (procurement)
     */
    "exportInvoicesFlag"?: boolean;
    "includedInvoiceIds"?: Array<number>;
    "excludedInvoiceIds"?: Array<number>;
    /**
     * Batch export must include invoices, expenses, or products (procurement)
     */
    "exportExpensesFlag"?: boolean;
    "includedExpenseIds"?: Array<number>;
    "excludedExpenseIds"?: Array<number>;
    /**
     * Batch export must include invoices, expenses, or products (procurement)
     */
    "exportProductsFlag"?: boolean;
    "includedProductIds"?: Array<string>;
    "excludedProductIds"?: Array<string>;
}
export namespace ExportAccountingBatchRequest {
    type SummarizeInvoicesEnum = 'Default' | 'Condensed' | 'Detailed';
}
export interface ExternalExpenseTypeIntegrationReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ExternalIntegrationStatusReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ExternalWorkTypeIntegrationReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface FilterValues {
    "conditions"?: string;
    "orderBy"?: string;
    "childconditions"?: string;
    "customfieldconditions"?: string;
}
export interface Forecast {
    "id"?: number;
    "name"?: string;
    "revenue"?: number;
    "cost"?: number;
    "type": Forecast.TypeEnum;
    "status"?: OpportunityStatusReference;
    "includedFlag"?: boolean;
    "recurring"?: ProductRecurring;
    "percent"?: number;
    "margin"?: number;
    "opportunityId"?: number;
    "quoteNumber"?: string;
    "quoteName"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Forecast {
    type TypeEnum = 'Product' | 'Service' | 'Agreement' | 'Other1' | 'Other2';
}
export interface FormSubmitted {
    "id"?: number;
    "campaignId"?: number;
    "contactId": number;
    "dateSubmitted"?: Date;
    "url": string;
    "queryString"?: string;
    "pageType"?: string;
    "pageSubType"?: string;
    "topic"?: string;
    "version"?: string;
    "status"?: string;
}
export interface GLExport {
    /**
     * Mapped to GlPreferences Class
     */
    "exportSettings"?: GLExportSettings;
    "vendors"?: Array<GLExportVendor>;
    "customers"?: Array<GLExportCustomer>;
    "transactions"?: Array<GLExportTransaction>;
    "expenses"?: Array<GLExportExpense>;
    "expenseBills"?: Array<GLExportExpenseBill>;
    "purchaseTransactions"?: Array<GLExportPurchaseTransaction>;
    "adjustmentTransactions"?: Array<GLExportAdjustmentTransaction>;
    "inventoryTransfers"?: Array<GLExportInventoryTransfer>;
}
export interface GLExportAdjustmentTransaction {
    "id"?: string;
    "documentType"?: string;
    "documentDate"?: Date;
    "glTypeID"?: string;
    "accountNumber"?: string;
    "memo"?: string;
    "glClass"?: string;
    "adjustmentDescription"?: string;
    "adjustmentDetail"?: Array<GLExportAdjustmentTransactionDetail>;
}
export interface GLExportAdjustmentTransactionDetail {
    "glClass"?: string;
    "description"?: string;
    "memo"?: string;
    "item"?: IvItemReference;
    "quantity"?: number;
    "total"?: number;
    "cost"?: number;
    "costAccountNumber"?: string;
    "inventoryAccountNumber"?: string;
    "accountNumber"?: string;
    "productAccountNumber"?: string;
}
export interface GLExportCustomer {
    "company"?: CompanyReference;
    "companyType"?: CompanyTypeReference;
    "contact"?: ContactReference;
    "site"?: SiteReference;
    "accountNumber"?: string;
    "billingTerms"?: BillingTermsReference;
    "billingTermsXref"?: string;
    "dueDays"?: number;
    "taxable"?: boolean;
    "taxCode"?: TaxCodeReference;
    "currency"?: CurrencyReference;
    "stateTaxXref"?: string;
    "countyTaxXref"?: string;
    "cityTaxXref"?: string;
    "countryTaxXref"?: string;
    "compositeTaxXref"?: string;
    "stateTaxRate"?: number;
    "countyTaxRate"?: number;
    "cityTaxRate"?: number;
    "countryTaxRate"?: number;
    "compositeTaxRate"?: number;
    "taxGroupRate"?: number;
    "taxAgencyXref"?: string;
    "stateTaxAgencyXref"?: string;
    "countyTaxAgencyXref"?: string;
    "cityTaxAgencyXref"?: string;
    "countryTaxAgencyXref"?: string;
    "compositeTaxAgencyXref"?: string;
}
export interface GLExportExpense {
    "id"?: number;
    "documentDate"?: Date;
    "documentType"?: string;
    "apAccountNumber"?: string;
    "apClass"?: string;
    "accountNumber"?: string;
    "glClass"?: string;
    "glTypeId"?: string;
    "memo"?: string;
    "description"?: string;
    "periodStartDate"?: Date;
    "periodEndDate"?: Date;
    "member"?: MemberReference;
    "vendorNumber"?: string;
    "company"?: CompanyReference;
    "companyAccountNumber"?: string;
    "project"?: ProjectReference;
    "currency"?: CurrencyReference;
    "total"?: number;
    "offset"?: GLExportExpenseOffset;
}
export interface GLExportExpenseBill {
    "id"?: number;
    "documentDate"?: string;
    "documentType"?: string;
    "documentNumber"?: string;
    "memo"?: string;
    "glClass"?: string;
    "apAccountNumber"?: string;
    "member"?: MemberReference;
    "vendorNumber"?: string;
    "currency"?: CurrencyReference;
    "total"?: number;
    "detail"?: Array<GLExportExpenseBillDetail>;
}
export interface GLExportExpenseBillDetail {
    "id"?: number;
    "documentDate"?: string;
    "glTypeId"?: string;
    "memo"?: string;
    "company"?: CompanyReference;
    "accountNumber"?: string;
    "expenseClass"?: ClassificationReference;
    "currency"?: CurrencyReference;
    "total"?: number;
    "billable"?: boolean;
    "reimbursable"?: boolean;
    "companyAdvance"?: boolean;
}
export interface GLExportExpenseOffset {
    "id"?: number;
    "documentDate"?: Date;
    "documentType"?: string;
    "accountNumber"?: string;
    "glTypeId"?: string;
    "glClass"?: string;
    "member"?: MemberReference;
    "memo"?: string;
    "description"?: string;
    "total"?: number;
}
export interface GLExportInventoryTransfer {
    "id"?: string;
    "documentType"?: string;
    "documentDate"?: Date;
    "accountNumber"?: string;
    "glClass"?: string;
    "glTypeId"?: string;
    "description"?: string;
    "salesCode"?: string;
    "memo"?: string;
    "costAcccountNumber"?: string;
    "inventoryAccountNumber"?: string;
    "transferId"?: number;
    "item"?: IvItemReference;
    "glItemId"?: string;
    "salesDescription"?: string;
    "itemDescription"?: string;
    "currency"?: CurrencyReference;
    "itemPrice"?: number;
    "taxable"?: boolean;
    "unitOfMeasure"?: UnitOfMeasureReference;
    "quantity"?: number;
    "cost"?: number;
    "total"?: number;
    "subCategory"?: ProductSubCategoryReference;
    "serializedFlag"?: boolean;
    "serialNumbers"?: string;
    "shipmentMethod"?: ShipmentMethodReference;
    "bin"?: WarehouseBinReference;
    "warehouse"?: WarehouseReference;
    "transferFromBin"?: WarehouseBinReference;
    "transferFromLocationXref"?: string;
    "transferToBin"?: WarehouseBinReference;
    "transferToLocationXref"?: string;
    "locationXref"?: string;
    "priceLevelXref"?: string;
    "uomScheduleXref"?: string;
    "itemTypeXref"?: string;
    "inventoryXref"?: string;
    "cogsXref"?: string;
    "taxNote"?: string;
    "taxCode"?: TaxCodeReference;
    "offset"?: GLExportInventoryTransferOffset;
}
export interface GLExportInventoryTransferOffset {
    "id"?: number;
    "documentType"?: string;
    "documentDate"?: Date;
    "accountNumber"?: string;
    "glClass"?: string;
    "total"?: number;
    "memo"?: string;
    "description"?: string;
    "glTypeId"?: string;
}
export interface GLExportPurchaseTransaction {
    "id"?: string;
    "documentDate"?: Date;
    "documentNumber"?: string;
    "description"?: string;
    "memo"?: string;
    "apAccountNumber"?: string;
    "purchaseDate"?: Date;
    "company"?: CompanyReference;
    "companyType"?: CompanyTypeReference;
    "contact"?: ContactReference;
    "site"?: SiteReference;
    "purchaseClass"?: string;
    "freightAmount"?: number;
    "freightPackingSlip"?: string;
    "packingSlip"?: string;
    "dropshipFlag"?: boolean;
    "currency"?: CurrencyReference;
    "total"?: number;
    "billingTerms"?: BillingTermsReference;
    "billingTermsXref"?: string;
    "dueDays"?: number;
    "vendorNumber"?: string;
    "vendorAccountNumber"?: string;
    "vendorInvoiceDate"?: Date;
    "vendorInvoiceNumber"?: string;
    "taxAgencyXref"?: string;
    "stateTaxXref"?: string;
    "countyTaxXref"?: string;
    "cityTaxXref"?: string;
    "shipToCompany"?: CompanyReference;
    "shipToCompanyAccountNumber"?: string;
    "shipToCompanyType"?: CompanyTypeReference;
    "shipToContact"?: ContactReference;
    "shipToSite"?: SiteReference;
    "shipToTaxGroup"?: string;
    "taxCode"?: TaxCodeReference;
    "taxGroupRate"?: number;
    "useAvalaraTaxFlag"?: boolean;
    "purchaseHeaderTaxGroup"?: string;
    "purchaseHeaderTaxableFlag"?: boolean;
    "purchaseHeaderFreightTaxableFlag"?: boolean;
    "purchaseDetail"?: Array<GLExportPurchaseTransactionDetail>;
    "purchaseDetailTax"?: Array<GLExportPurchaseTransactionDetailTax>;
}
export interface GLExportPurchaseTransactionDetail {
    "id"?: number;
    "documentDate"?: Date;
    "glClass"?: string;
    "glTypeId"?: string;
    "glItemId"?: string;
    "salesCode"?: string;
    "description"?: string;
    "cost"?: number;
    "memo"?: string;
    "taxNote"?: string;
    "vendorNumber"?: string;
    "accountNumber"?: string;
    "costAccountNumber"?: string;
    "inventoryAccountNumber"?: string;
    "vendorAccountNumber"?: string;
    "item"?: IvItemReference;
    "itemDescription"?: string;
    "salesDescription"?: string;
    "taxable"?: boolean;
    "itemPrice"?: number;
    "itemCost"?: number;
    "unitOfMeasure"?: UnitOfMeasureReference;
    "quantity"?: number;
    "total"?: number;
    "currency"?: CurrencyReference;
    "serializedFlag"?: boolean;
    "serialNumbers"?: string;
    "dropShippedFlag"?: boolean;
    "lineNumber"?: number;
    "warehouseBin"?: WarehouseBinReference;
    "warehouseSite"?: SiteReference;
    "subCategory"?: ProductSubCategoryReference;
    "shipmentMethod"?: ShipmentMethodReference;
    "itemTypeXref"?: string;
    "inventoryXref"?: string;
    "cogsXref"?: string;
    "uomScheduleXref"?: string;
    "priceLevelXref"?: string;
    "locationXref"?: string;
    "taxCode"?: TaxCodeReference;
    "purchaseHeaderTaxGroup"?: string;
    "taxCodeXref"?: string;
    "taxRate"?: number;
    "taxAgencyXref"?: string;
}
export interface GLExportPurchaseTransactionDetailTax {
    "id"?: number;
    "documentDate"?: Date;
    "accountNumber"?: string;
    "glClass"?: string;
    "cost"?: number;
    "salesCode"?: string;
    "glTypeId"?: string;
    "glItemId"?: string;
    "memo"?: string;
    "vendorNumber"?: string;
    "vendorAccountNumber"?: string;
    "costAccountNumber"?: string;
    "inventoryAccountNumber"?: string;
    "itemTypeXref"?: string;
    "inventoryXref"?: string;
    "cogsXref"?: string;
    "uomScheduleXref"?: string;
    "priceLevelXref"?: string;
    "locationXref"?: string;
    "item"?: IvItemReference;
    "taxableFlag"?: boolean;
    "salesDescription"?: string;
    "itemDescription"?: string;
    "itemPrice"?: number;
    "itemCost"?: number;
    "unitOfMeasure"?: UnitOfMeasureReference;
    "quantity"?: number;
    "total"?: number;
    "currency"?: CurrencyReference;
    "serializedFlag"?: boolean;
    "serialNumbers"?: string;
    "dropShippedFlag"?: boolean;
    "lineNumber"?: number;
    "warehouseSite"?: SiteReference;
    "warehouseBin"?: WarehouseBinReference;
    "shipmentMethod"?: ShipmentMethodReference;
    "subCategory"?: ProductSubCategoryReference;
    "taxCode"?: TaxCodeReference;
    "taxRate"?: number;
    "taxRatePercent"?: number;
    "taxAgencyXref"?: string;
    "taxNote"?: string;
    "purchaseHeaderTaxGroup"?: string;
}
/**
 * Mapped to GlPreferences Class
 */
export interface GLExportSettings {
}
export interface GLExportTransaction {
    "id"?: number;
    "glClass"?: string;
    "glTypeId"?: string;
    "documentDate"?: Date;
    "documentNumber"?: string;
    "documentType"?: string;
    "memo"?: string;
    "description"?: string;
    "attention"?: string;
    "salesTerritory"?: string;
    "company"?: CompanyReference;
    "companyType"?: CompanyTypeReference;
    "companyAccountNumber"?: string;
    "site"?: SiteReference;
    "billingTerms"?: BillingTermsReference;
    "billingTermsXref"?: string;
    "dueDays"?: number;
    "dueDate"?: Date;
    "emailDeliveryFlag"?: boolean;
    "printDeliveryFlag"?: boolean;
    "agreementPrePaymentFlag"?: boolean;
    "accountNumber"?: string;
    "billingType"?: string;
    "glEntryIds"?: string;
    "purchaseOrder"?: PurchaseOrderReference;
    "project"?: ProjectReference;
    "currency"?: CurrencyReference;
    "total"?: number;
    "salesRepId"?: string;
    "salesRepName"?: string;
    "taxable"?: boolean;
    "taxableTotal"?: number;
    "taxCode"?: TaxCodeReference;
    "taxGroupRate"?: number;
    "piggyBackFlag"?: boolean;
    "taxAccountNumber"?: string;
    "salesTax"?: number;
    "stateTax"?: number;
    "countyTax"?: number;
    "cityTax"?: number;
    "taxableAmount1"?: number;
    "taxableAmount2"?: number;
    "taxableAmount3"?: number;
    "taxableAmount4"?: number;
    "taxableAmount5"?: number;
    "taxAgencyXref"?: string;
    "stateTaxXref"?: string;
    "countyTaxXref"?: string;
    "taxId"?: string;
    "taxDpAppliedFlag"?: boolean;
    "useAvalaraFlag"?: boolean;
    "sendAvalaraTaxFlag"?: boolean;
    "shipToCompany"?: CompanyReference;
    "shipCompanyAccountNumber"?: string;
    "shipCompanyType"?: CompanyTypeReference;
    "shipTaxId"?: string;
    "shipSite"?: SiteReference;
    "shipContact"?: ContactReference;
    "detail"?: Array<GLExportTransactionDetail>;
}
export interface GLExportTransactionDetail {
    "id"?: number;
    "documentDate"?: Date;
    "documentType"?: string;
    "accountNumber"?: string;
    "glClass"?: string;
    "glTypeId"?: string;
    "glItemId"?: string;
    "invoiceSummaryOption"?: number;
    "cost"?: number;
    "salesCode"?: string;
    "memo"?: string;
    "description"?: string;
    "quantity"?: number;
    "total"?: number;
    "currency"?: CurrencyReference;
    "timeEntry"?: TimeEntryReference;
    "costAccountNumber"?: string;
    "inventoryAccountNumber"?: string;
    "productAccountNumber"?: string;
    "taxCode"?: TaxCodeReference;
    "taxCodeXref"?: string;
    "taxAgencyXref"?: string;
    "taxNote"?: string;
    "taxRate"?: number;
    "taxRatePercent"?: number;
    "taxableFlag"?: boolean;
    "taxable2Flag"?: boolean;
    "taxable3Flag"?: boolean;
    "taxable4Flag"?: boolean;
    "taxable5Flag"?: boolean;
    "item"?: IvItemReference;
    "itemTaxableFlag"?: boolean;
    "itemPrice"?: number;
    "itemCost"?: number;
    "itemDescription"?: string;
    "salesDescription"?: string;
    "unitOfMeasure"?: UnitOfMeasureReference;
    "subCategory"?: ProductSubCategoryReference;
    "serializedFlag"?: boolean;
    "serialNumbers"?: string;
    "warehouseSite"?: SiteReference;
    "warehouseBin"?: WarehouseBinReference;
    "shipmentMethod"?: ShipmentMethodReference;
    "dropShippedFlag"?: boolean;
    "itemTypeXref"?: string;
    "inventoryXref"?: string;
    "cogsXref"?: string;
    "uomScheduleXref"?: string;
    "priceLevelXref"?: string;
    "locationXref"?: string;
}
export interface GLExportVendor {
    /**
     * Vendor Can be either Member or Company Reference
     */
    "member"?: MemberReference;
    /**
     * Vendor Can be either Member or Company Reference
     */
    "vendor"?: CompanyReference;
    "vendorNumber"?: string;
    "company"?: CompanyReference;
    "contact"?: ContactReference;
    "accountNumber"?: string;
    "billingTerms"?: BillingTermsReference;
    "dueDays"?: number;
    "site"?: SiteReference;
    "taxCode"?: TaxCodeReference;
}
export interface GenericIdIdentifierReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
}
export interface Group {
    "id"?: number;
    "name": string;
    "publicDescription"?: string;
    "publicFlag"?: boolean;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * Required when notifyType is set to: "Add to Group"
 */
export interface GroupReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Guid {
}
export interface Holiday {
    "id"?: number;
    "name": string;
    /**
     * Can be set to false to set a holiday for specific hours (Defaults to True)
     */
    "allDayFlag"?: boolean;
    /**
     * If this is not a full day holiday dateStart and dateEnd must be specified
     */
    "dateStart": Date;
    "dateEnd"?: Date;
    "holidayList"?: HolidayListReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface HolidayList {
    "id"?: number;
    "name": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface HolidayListReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Imap {
    "id"?: number;
    "name"?: string;
    "imapName"?: string;
    "processedName"?: string;
    "server"?: string;
    "userName"?: string;
    "password"?: string;
    "port"?: number;
    "sslFlag"?: boolean;
    "emailConnector"?: EmailConnectorReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ImapSetupReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Impact {
    "id"?: number;
    "name"?: string;
    "description": string;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ImportMassMaintenance {
    "deletedContactCount"?: number;
    "deletedCompanyCount"?: number;
    "message"?: string;
    "success"?: boolean;
}
export interface InOutBoard {
    "id"?: number;
    "member": MemberReference;
    "inOutType": InOutTypeReference;
    "additionalInfo"?: string;
    "dateBack": Date;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface InOutType {
    "id"?: number;
    "description": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface InOutTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Info {
    "version"?: string;
    "isCloud"?: boolean;
    "serverTimeZone"?: string;
}
export interface IntegratorLogin {
    "id"?: number;
    "username": string;
    /**
     * The password will never be returned in response
     */
    "password": string;
    /**
     * This flag controls whether the integrator can access only the db records it created, or all system records
     */
    "canAccessAllRecordsFlag"?: boolean;
    "canAccessAllApisFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "dateInactivated"?: Date;
    "inactivatedBy"?: MemberReference;
    "serviceTicketApiFlag"?: boolean;
    /**
     * If integrator has access to ServiceTicket API, a service board is required
     */
    "board"?: BoardReference;
    "serviceBoardCallbackUrl"?: string;
    "serviceBoardLegacyCallbackFlag"?: boolean;
    "timeEntryApiFlag"?: boolean;
    /**
     * If integrator has access to TimeEntry API, a member is required
     */
    "member"?: MemberReference;
    "timeEntryCallbackUrl"?: string;
    "timeEntryLegacyCallbackFlag"?: boolean;
    "managedServicesApiFlag"?: boolean;
    "managedServicesAutoChildFlag"?: boolean;
    /**
     * True if integrator is allowed to child configurations
     */
    "managedServicesChildingFlag"?: boolean;
    "contactApiFlag"?: boolean;
    "contactCallbackUrl"?: string;
    "contactLegacyCallbackFlag"?: boolean;
    "companyApiFlag"?: boolean;
    "companyCallbackUrl"?: string;
    "companyLegacyCallbackFlag"?: boolean;
    "activityApiFlag"?: boolean;
    "activityCallbackUrl"?: string;
    "activityLegacyCallbackFlag"?: boolean;
    "ntrSupportApiFlag"?: boolean;
    "logMeInSupportApiFlag"?: boolean;
    "invoiceApiFlag"?: boolean;
    "productApiFlag"?: boolean;
    "productCallbackUrl"?: string;
    "productLegacyCallbackFlag"?: boolean;
    "opportunityApiFlag"?: boolean;
    "opportunityCallbackUrl"?: string;
    "opportunityLegacyCallbackFlag"?: boolean;
    /**
     * True if the member has access to the Opportunity Conversion Api
     */
    "opportunityConversionApiFlag"?: boolean;
    "memberApiFlag"?: boolean;
    "marketingApiFlag"?: boolean;
    "purchasingApiFlag"?: boolean;
    "purchasingCallbackUrl"?: string;
    "purchasingLegacyCallbackFlag"?: boolean;
    "reportingApiFlag"?: boolean;
    "systemApiFlag"?: boolean;
    "projectApiFlag"?: boolean;
    "projectCallbackUrl"?: string;
    "projectLegacyCallbackFlag"?: boolean;
    "configurationApiFlag"?: boolean;
    "configurationAutoChildFlag"?: boolean;
    /**
     * True if integrator is allowed to child configurations
     */
    "configurationChildlingFlag"?: boolean;
    "configurationCallbackUrl"?: string;
    "configurationLegacyCallbackFlag"?: boolean;
    "scheduleApiFlag"?: boolean;
    "scheduleCallbackUrl"?: string;
    "scheduleLegacyCallbackFlag"?: boolean;
    "agreementApiFlag"?: boolean;
    "agreementCallbackUrl"?: string;
    "agreementCallbackLegacyFlag"?: boolean;
    "documentApiFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface IntegratorLoginReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Invoice {
    "id"?: number;
    "invoiceNumber"?: string;
    "type": Invoice.TypeEnum;
    "status"?: BillingStatusReference;
    "company": CompanyReference;
    "billToCompany"?: CompanyReference;
    "shipToCompany"?: CompanyReference;
    "applyToType"?: Invoice.ApplyToTypeEnum;
    "applyToId"?: number;
    "attention"?: string;
    "billingSite"?: SiteReference;
    "shippingSite"?: SiteReference;
    "billingTerms"?: BillingTermsReference;
    "reference"?: string;
    "customerPO"?: string;
    /**
     * Can be obtained via InvoiceTemplate report
     */
    "templateSetupId"?: number;
    /**
     * Can be obtained via InvoiceEmailTemplate report
     */
    "emailTemplateId"?: number;
    "addToBatchEmailList"?: boolean;
    "date"?: Date;
    "restrictDownpaymentFlag"?: boolean;
    "locationId"?: number;
    /**
     * departmentId is only required for special invoices
     */
    "departmentId"?: number;
    "territoryId"?: number;
    "topComment"?: string;
    "bottomComment"?: string;
    "taxableFlag"?: boolean;
    "taxCode"?: TaxCodeReference;
    "internalNotes"?: string;
    "downpaymentPreviouslyTaxedFlag"?: boolean;
    "serviceTotal"?: number;
    "currency"?: CurrencyReference;
    "dueDate"?: Date;
    "expenseTotal"?: number;
    "productTotal"?: number;
    "previousProgressApplied"?: number;
    "serviceAdjustmentAmount"?: number;
    "agreementAmount"?: number;
    "downpaymentApplied"?: number;
    "subtotal"?: number;
    "total"?: number;
    "remainingDownpayment"?: number;
    "salesTax"?: number;
    "adjustmentReason"?: string;
    "adjustedBy"?: string;
    "payments"?: number;
    "credits"?: number;
    "balance"?: number;
    "specialInvoiceFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Invoice {
    type TypeEnum = 'Agreement' | 'CreditMemo' | 'DownPayment' | 'Miscellaneous' | 'Progress' | 'Standard';
    type ApplyToTypeEnum = 'All' | 'Agreement' | 'Project' | 'ProjectPhase' | 'SalesOrder' | 'Ticket';
}
export interface InvoiceEmailTemplate {
    "id"?: number;
    "name": string;
    "serviceSurvey"?: ServiceSurveyReference;
    "useSenderFlag"?: boolean;
    /**
     * From fields (first name, last name, email address) are required if useSenderFlag is false
     */
    "firstName"?: string;
    /**
     * From fields (first name, last name, email address) are required if useSenderFlag is false
     */
    "lastName"?: string;
    /**
     * From fields (first name, last name, email address) are required if useSenderFlag is false
     */
    "emailAddress"?: string;
    "subject": string;
    "body"?: string;
    "copySenderFlag"?: boolean;
    "invoiceStatus"?: BillingStatusReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface InvoiceReference {
    "id"?: number;
    "identifier"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface InvoiceTemplate {
    "id"?: number;
    "name": string;
    "marginLeft"?: number;
    "marginRight"?: number;
    "marginTop"?: number;
    "marginBottom"?: number;
    "logoVisibleFlag"?: boolean;
    "headerLogoPosition"?: InvoiceTemplate.HeaderLogoPositionEnum;
    "remitToVisibileFlag"?: boolean;
    "headerAddressPosition"?: InvoiceTemplate.HeaderAddressPositionEnum;
    "headerTitleVisibileFlag"?: boolean;
    "headerTitleCaption"?: string;
    "headerTitlePosition"?: InvoiceTemplate.HeaderTitlePositionEnum;
    "headerTitleFont"?: InvoiceTemplate.HeaderTitleFontEnum;
    "headerTermsVisibleFlag"?: boolean;
    "headerTermsCaption"?: string;
    "headerDueDateVisibleFlag"?: boolean;
    "headerDueDateCaption"?: string;
    "headerPoNumberVisibleFlag"?: boolean;
    "headerPoNumberCaption"?: string;
    "headerReferenceVisibleFlag"?: boolean;
    "headerReferenceCaption"?: string;
    "headerAccountVisibleFlag"?: boolean;
    "headerAccountCaption"?: string;
    "headerTaxIdVisibleFlag"?: boolean;
    "headerTaxIdCaption"?: string;
    "headerShipToVisibleFlag"?: boolean;
    "headerShipToCaption"?: string;
    "serviceHeaderTicketNumberVisibleFlag"?: boolean;
    "serivceHeaderTicketNumberCaption"?: string;
    "serviceHeaderCompanyNameVisibleFlag"?: boolean;
    "serviceHeaderCompanyNameCaption"?: string;
    "serviceHeaderSummaryVisibleFlag"?: boolean;
    "serviceHeaderSummaryCaption"?: string;
    "serviceHeaderContactNameVisibleFlag"?: boolean;
    "serviceHeaderContactNameCaption"?: string;
    "serviceHeaderDetailDescriptionVisibleFlag"?: boolean;
    "serviceHeaderDetailDescriptionCaption"?: string;
    "serviceHeaderResolutionVisibleFlag"?: boolean;
    "serviceHeaderResolutionCaption"?: string;
    "serviceHeaderAmountVisibleFlag"?: boolean;
    "serviceHeaderAmountCaption"?: string;
    "serviceHeaderBillingMethodVisibleFlag"?: boolean;
    "serviceHeaderBillingMethodCaption"?: string;
    "serviceHeaderClosedTasksVisibleFlag"?: boolean;
    "serviceHeaderOpenTasksVisibleFlag"?: boolean;
    "serviceHeaderBundledTicketsVisibleFlag"?: boolean;
    "projectHeaderProjectNameVisibleFlag"?: boolean;
    "projectHeaderProjectNameCaption"?: string;
    "projectHeaderCompanyNameVisibleFlag"?: boolean;
    "projectHeaderCompanyNameCaption"?: string;
    "projectHeaderOriginalDownpaymentVisibleFlag"?: boolean;
    "projectHeaderOriginalDownpaymentCaption"?: string;
    "projectHeaderContactNameVisibleFlag"?: boolean;
    "projectHeaderContactNameCaption"?: string;
    "projectHeaderAmountVisibleFlag"?: boolean;
    "projectHeaderAmountCaption"?: string;
    "projectHeaderBillingMethodVisibleFlag"?: boolean;
    "projectHeaderBillingMethodCaption"?: string;
    "projectHeaderBillingTypeVisibleFlag"?: boolean;
    "projectHeaderBillingTypeCaption"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace InvoiceTemplate {
    type HeaderLogoPositionEnum = 'LeftSide' | 'RightSide' | 'Center';
    type HeaderAddressPositionEnum = 'LeftSide' | 'RightSide' | 'Center';
    type HeaderTitlePositionEnum = 'LeftSide' | 'RightSide' | 'Center';
    type HeaderTitleFontEnum = 'Regular' | 'RegularBold' | 'Large' | 'LargeBold' | 'ExtraLarge' | 'ExtraLargeBold';
}
export interface InvoiceTemplateReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface InvoiceTemplateSetup {
    "id"?: number;
    "name"?: string;
    "customFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface IvItemReference {
    "id"?: number;
    "identifier"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface JArray {
}
export interface JObject {
}
export interface KPI {
    "id"?: number;
    "name"?: string;
    "category": KPICategoryReference;
    "dateFilter"?: string;
    "sortOrder"?: number;
    "inactiveFlag"?: boolean;
}
export interface KPICategory {
    "id"?: number;
    "name"?: string;
    "sortOrder"?: number;
}
export interface KPICategoryReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface KPIReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface KnowledgeBaseArticle {
    "id"?: number;
    "title": string;
    "issue": string;
    "resolution": string;
    "locationId"?: number;
    "businessUnitId"?: number;
    "board"?: BoardReference;
    "categoryId"?: number;
    "subCategoryId"?: number;
    "dateCreated"?: string;
    "createdBy"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * A list of knowledge base articles that the member is the approver
 */
export interface KnowledgebaseArticle {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface LdapConfiguration {
    "id"?: number;
    "name": string;
    /**
     * FQDN of the Server.
     */
    "server": string;
    /**
     * Domain Name of the server.
     */
    "domain": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface LdapConfigurationReference {
    "id"?: number;
    "name"?: string;
    "server"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface LegacySubCategory {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Link {
    "id"?: number;
    "name": string;
    "tableReferenceId"?: number;
    "url"?: string;
    "screenLink"?: Link.ScreenLinkEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Link {
    type ScreenLinkEnum = 'Company' | 'Contact' | 'Service' | 'Invoice' | 'PurchaseOrder' | 'SalesOrder';
}
export interface LinkClicked {
    "id"?: number;
    "campaignId"?: number;
    "contactId": number;
    "dateClicked"?: Date;
    "url": string;
    "queryString"?: string;
}
export interface Location {
    "id"?: number;
    "ownerLevelId"?: number;
    "structureLevel": CorporateStructureLevelReference;
    "name": string;
    "manager"?: MemberReference;
    "reportsTo"?: SystemLocationReference;
    "salesRep"?: string;
    "timeZoneSetup"?: TimeZoneSetupReference;
    "calendar"?: CalendarReference;
    "overrideAddressLine1"?: string;
    "overrideAddressLine2"?: string;
    "overrideCity"?: string;
    "overrideState"?: string;
    "overrideZip"?: string;
    "overrideCountry"?: CountryReference;
    "overridePhoneNumber"?: string;
    "overrideFaxNumber"?: string;
    "owaUrl"?: string;
    "payrollXref"?: string;
    "locationFlag"?: boolean;
    "clientFlag"?: boolean;
    "workRoleIds"?: Array<number>;
    "departmentIds"?: Array<number>;
    "topNavigationLogo"?: DocumentReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface LocationDepartment {
    "id"?: number;
    "location"?: SystemLocationReference;
    "department"?: SystemDepartmentReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface LocationWorkRole {
    "id"?: number;
    "location"?: SystemLocationReference;
    "workRole"?: WorkRoleReference;
    "workRoleInactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ManagedDevicesIntegration {
    "id"?: number;
    "name": string;
    "solution": string;
    "portalUrl"?: string;
    "loginBy": ManagedDevicesIntegration.LoginByEnum;
    /**
     * This is only required when globalLoginFlag = true
     */
    "globalLoginUsername"?: string;
    /**
     * This is only required when globalLoginFlag = true
     */
    "globalLoginPassword"?: string;
    "defaultBillingLevel": ManagedDevicesIntegration.DefaultBillingLevelEnum;
    "managementItSetupType"?: string;
    "defaultLocation"?: SystemLocationReference;
    "defaultDepartment"?: SystemDepartmentReference;
    "integratorLogin"?: IntegratorLoginReference;
    "matchOnSerialNumberFlag"?: boolean;
    "disableNewCrossReferencesFlag"?: boolean;
    "configBillCustomerFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ManagedDevicesIntegration {
    type LoginByEnum = 'Member' | 'Global';
    type DefaultBillingLevelEnum = 'Summary' | 'Detail';
}
export interface ManagedDevicesIntegrationCrossReference {
    "id"?: number;
    "managedDevicesIntegration"?: ManagedDevicesIntegrationReference;
    "vendorType"?: string;
    "vendorLevel"?: string;
    /**
     * agreementType or configurationType is required
     */
    "agreementType"?: AgreementTypeReference;
    "product"?: IvItemReference;
    /**
     * agreementType or configurationType is required
     */
    "configurationType"?: ConfigurationTypeReference;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ManagedDevicesIntegrationLogin {
    "id"?: number;
    "managedDevicesIntegration"?: ManagedDevicesIntegrationReference;
    "username": string;
    "password": string;
    "member": MemberReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ManagedDevicesIntegrationNotification {
    "id"?: number;
    "managedDevicesIntegration"?: ManagedDevicesIntegrationReference;
    "notifyWho": NotificationRecipientReference;
    /**
     * Required if notifyWho/identifier == 'M' (Specific Member)
     */
    "member"?: MemberReference;
    "logType": ManagedDevicesIntegrationNotification.LogTypeEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ManagedDevicesIntegrationNotification {
    type LogTypeEnum = 'All' | 'Error' | 'NewManagedSolution' | 'NewDeviceType' | 'NewConfiguration' | 'NewAddition' | 'Info';
}
export interface ManagedDevicesIntegrationReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Management {
    "id"?: number;
    "runTime"?: Date;
    "addedConfigurationStatus": ConfigurationStatusReference;
    "deletedConfigurationStatus": ConfigurationStatusReference;
    "integratorLogin": IntegratorLoginReference;
    "scheduleExecutiveSummaryReportFlag": boolean;
    /**
     * This is only required when scheduleExecutiveSummaryReportFlag = true
     */
    "executiveSummaryReportScheduleDay"?: number;
    /**
     * This is only required when scheduleExecutiveSummaryReportFlag = true. Input should be in 24 hour format, ie 2pm is 14
     */
    "executiveSummaryReportScheduleHour"?: number;
    /**
     * This is only required when scheduleExecutiveSummaryReportFlag = true
     */
    "executiveSummaryReportScheduleMinute"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ManagementBackup {
    "id"?: number;
    "type": AgreementTypeReference;
    "item": CatalogItemReference;
    "billingLevel": ManagementBackup.BillingLevelEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ManagementBackup {
    type BillingLevelEnum = 'Summary' | 'Detail';
}
export interface ManagementEmail {
    "id"?: number;
    "name": string;
    "managementSolution": ManagementEmail.ManagementSolutionEnum;
    "identifier": string;
    /**
     * emailUsername is required when managementSolution set to Postini.
     */
    "emailUsername"?: string;
    /**
     * emailPassword is required when managementSolution set to Postini. The password field can only be set on initial POST.
     */
    "emailPassword"?: string;
    /**
     * serverPrefix is required when managementSolution set to Postini.
     */
    "serverPrefix"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ManagementEmail {
    type ManagementSolutionEnum = 'DoubleCheck' | 'Postini';
}
export interface ManagementItSolution {
    "id"?: number;
    "name": string;
    "managementItSolutionType": ManagementItSolution.ManagementItSolutionTypeEnum;
    /**
     * This is only required when managementItSolutionType is Custom
     */
    "managementSolutionName"?: string;
    /**
     * This is only required for Level Platforms and Kaseya
     */
    "managementServerUrl"?: string;
    /**
     * This is only required for Level Platforms and Kaseya when overrideWebServiceLocationFlag is true
     */
    "webserviceOverrideUrl"?: string;
    /**
     * This is only required for Level Platforms and Kaseya when overrideLoginLocationFlag is true
     */
    "portalOverrideLoginUrl"?: string;
    "globalLoginFlag"?: boolean;
    /**
     * This is only required when globalLoginFlag = true
     */
    "globalLoginUsername"?: string;
    /**
     * This is only required when globalLoginFlag = true
     */
    "globalLoginPassword"?: string;
    "usingSslFlag"?: boolean;
    /**
     * This is only required for N-Able solution
     */
    "nAbleUsername"?: string;
    /**
     * This is only required for N-Able solution
     */
    "nAblePassword"?: string;
    "overrideWebServiceLocationFlag"?: boolean;
    "overrideLoginLocationFlag"?: boolean;
    /**
     * This is only required for Continuum solution
     */
    "continuumApiUsername"?: string;
    /**
     * This is only required for Continuum solution
     */
    "continuumApiPassword"?: string;
    /**
     * This is only required for Level Platforms solution
     */
    "levelApiUsername"?: string;
    /**
     * This is only required for Level Platforms solution
     */
    "levelApiPassword"?: string;
    /**
     * This is only required for Level Platforms solution
     */
    "levelVarDomain"?: string;
    "noDisplayFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ManagementItSolution {
    type ManagementItSolutionTypeEnum = 'LevelPlatforms' | 'Kaseya' | 'NAble' | 'Continuum' | 'Custom';
}
export interface ManagementItSolutionAgreementInterfaceParameter {
    "id"?: number;
    "managedDevicesIntegration"?: ManagedDevicesIntegrationReference;
    "agreementType": AgreementTypeReference;
    "serverProduct"?: IvItemReference;
    "workstationProduct"?: IvItemReference;
    "spamStatsProduct"?: IvItemReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ManagementLogDocumentInfo {
}
export interface ManagementNetworkSecurity {
    "id"?: number;
    "name": string;
    "username"?: string;
    "password"?: string;
    "site": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ManagementReportNotification {
    "id"?: number;
    "notifyWho": NotificationRecipientReference;
    "member"?: MemberReference;
    "email"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ManagementSolutionReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Manufacturer {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ManufacturerReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface MarketDescription {
    "id"?: number;
    "name": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface MarketingCompany {
    "id": number;
    "groupId"?: number;
    "defaultContactFlag"?: boolean;
    "allContactsFlag"?: boolean;
    "unsubscribeFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface MarketingContact {
    "id": number;
    "groupId"?: number;
    "note"?: string;
    "unsubscribeFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Member {
    "id"?: number;
    "identifier": string;
    /**
     * ConditionallyRequired. API Member will get random password generated
     */
    "password"?: string;
    "firstName": string;
    "middleInitial"?: string;
    "lastName": string;
    "title"?: string;
    "reportCard"?: ReportCardReference;
    /**
     * F = Full Member, A = API Member, C = StreamlineIT Member, X = Subcontractor Member
     */
    "licenseClass": Member.LicenseClassEnum;
    "disableOnlineFlag"?: boolean;
    "enableMobileFlag"?: boolean;
    "type"?: MemberTypeReference;
    "employeeIdentifer"?: string;
    "vendorNumber"?: string;
    "notes"?: string;
    "timeZone": TimeZoneSetupReference;
    "country"?: CountryReference;
    "serviceBoardTeamIds"?: Array<number>;
    "enableMobileGpsFlag"?: boolean;
    "inactiveDate"?: Date;
    "inactiveFlag"?: boolean;
    "lastLogin"?: string;
    "photo"?: DocumentReference;
    "officeEmail"?: string;
    "officePhone"?: string;
    "officeExtension"?: string;
    "mobileEmail"?: string;
    "mobilePhone"?: string;
    "mobileExtension"?: string;
    "homeEmail"?: string;
    "homePhone"?: string;
    "homeExtension"?: string;
    "defaultEmail": Member.DefaultEmailEnum;
    "defaultPhone": Member.DefaultPhoneEnum;
    "securityRole": SecurityRoleReference;
    "adminFlag"?: boolean;
    "structureLevel": StructureReference;
    "securityLocation": SystemLocationReference;
    "defaultLocation": SystemLocationReference;
    "defaultDepartment": SystemDepartmentReference;
    "reportsTo"?: MemberReference;
    "restrictLocationFlag"?: boolean;
    "restrictDepartmentFlag"?: boolean;
    "workRole": WorkRoleReference;
    "workType"?: WorkTypeReference;
    "timeApprover": MemberReference;
    "expenseApprover": MemberReference;
    "billableForecast"?: number;
    "dailyCapacity"?: number;
    "hourlyCost"?: number;
    "hourlyRate"?: number;
    "includeInUtilizationReportingFlag"?: boolean;
    "requireExpenseEntryFlag"?: boolean;
    "requireTimeSheetEntryFlag"?: boolean;
    "requireStartAndEndTimeOnTimeEntryFlag"?: boolean;
    "allowInCellEntryOnTimeSheet"?: boolean;
    "enterTimeAgainstCompanyFlag"?: boolean;
    "allowExpensesEnteredAgainstCompaniesFlag"?: boolean;
    "timeReminderEmailFlag"?: boolean;
    "daysTolerance"?: number;
    "minimumHours"?: number;
    "timeSheetStartDate"?: Date;
    "hireDate": Date;
    "serviceDefaultLocation"?: SystemLocationReference;
    "serviceDefaultDepartment"?: SystemDepartmentReference;
    "serviceDefaultBoard"?: BoardReference;
    "restrictServiceDefaultLocationFlag"?: boolean;
    "restrictServiceDefaultDepartmentFlag"?: boolean;
    "excludedServiceBoardIds"?: Array<number>;
    "projectDefaultLocation"?: SystemLocationReference;
    "projectDefaultDepartment"?: SystemDepartmentReference;
    "projectDefaultBoard"?: ProjectBoardReference;
    "restrictProjectDefaultLocationFlag"?: boolean;
    "restrictProjectDefaultDepartmentFlag"?: boolean;
    "excludedProjectBoardIds"?: Array<number>;
    "scheduleDefaultLocation"?: SystemLocationReference;
    "scheduleDefaultDepartment"?: SystemDepartmentReference;
    "scheduleCapacity"?: number;
    "serviceLocation"?: ServiceLocationReference;
    "restrictScheduleFlag"?: boolean;
    "hideMemberInDispatchPortalFlag"?: boolean;
    "calendar"?: CalendarReference;
    "salesDefaultLocation": SystemLocationReference;
    "restrictDefaultSalesTerritoryFlag"?: boolean;
    "warehouse"?: WarehouseReference;
    "warehouseBin"?: WarehouseBinReference;
    "restrictDefaultWarehouseFlag"?: boolean;
    "restrictDefaultWarehouseBinFlag"?: boolean;
    "mapiName"?: string;
    "calendarSyncIntegrationFlag"?: boolean;
    "enableLdapAuthenticationFlag"?: boolean;
    "ldapConfiguration"?: LdapConfigurationReference;
    "ldapUserName"?: string;
    "companyActivityTabFormat": Member.CompanyActivityTabFormatEnum;
    "invoiceTimeTabFormat": Member.InvoiceTimeTabFormatEnum;
    "invoiceScreenDefaultTabFormat": Member.InvoiceScreenDefaultTabFormatEnum;
    "invoicingDisplayOptions": Member.InvoicingDisplayOptionsEnum;
    "agreementInvoicingDisplayOptions": Member.AgreementInvoicingDisplayOptionsEnum;
    "corelyticsUsername"?: string;
    "corelyticsPassword"?: string;
    "remotePackage"?: Member.RemotePackageEnum;
    "remotePackagePlatform"?: string;
    "remotePackageUserName"?: string;
    "remotePackagePassword"?: string;
    "remotePackageAccount"?: string;
    "authenticationServiceType"?: Member.AuthenticationServiceTypeEnum;
    "timebasedOneTimePasswordActivated"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Member {
    type LicenseClassEnum = 'F' | 'A' | 'C' | 'X';
    type DefaultEmailEnum = 'Office' | 'Mobile' | 'Home';
    type DefaultPhoneEnum = 'Office' | 'Mobile' | 'Home';
    type CompanyActivityTabFormatEnum = 'SummaryList' | 'DetailList';
    type InvoiceTimeTabFormatEnum = 'SummaryList' | 'DetailList';
    type InvoiceScreenDefaultTabFormatEnum = 'ShowInvoicingTab' | 'ShowAgreementInvoicingTab';
    type InvoicingDisplayOptionsEnum = 'RemainOnInvoicingScreen' | 'ShowRecentInvoices';
    type AgreementInvoicingDisplayOptionsEnum = 'RemainOnInvoicingScreen' | 'ShowRecentInvoices';
    type RemotePackageEnum = 'LogMeIn' | 'NTR';
    type AuthenticationServiceTypeEnum = 'AuthAnvil' | 'GoogleAuthenticator';
}
export interface MemberAccrual {
    "id"?: number;
    "accrualType": MemberAccrual.AccrualTypeEnum;
    "year": number;
    "hours": number;
    "reason": string;
    "member"?: MemberReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace MemberAccrual {
    type AccrualTypeEnum = 'Holiday' | 'PTO' | 'Sick' | 'Vacation';
}
export interface MemberCertification {
    "id"?: number;
    "certification": CertificationReference;
    "percentComplete"?: number;
    "dateReceived"?: Date;
    "dateExpires"?: Date;
    "certificationNumber"?: string;
    "notes"?: string;
    "member"?: MemberReference;
    "company"?: CompanyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface MemberDeactivation {
    /**
     * The List of Activities Assigned to the Member
     */
    "salesActivity"?: SalesActivity;
    "serviceTeam"?: ServiceTeam;
    /**
     * A list of customers for which the member holds a team role
     */
    "companyTeam"?: CompanyTeam;
    /**
     * The Workflows to which the member is assigned
     */
    "workflow"?: Workflow;
    "statusWorkflow"?: StatusWorkflow;
    /**
     * The Service (Ticket) Templates on which the Member is the assignedTo resource
     */
    "serviceTemplate"?: ServiceTemplate;
    /**
     * A list of the member's currently assigned Opportunities
     */
    "opportunity"?: Opportunity;
    /**
     * A list of Sales Teams to which the member is assigned
     */
    "salesTeam"?: SalesTeam;
    /**
     * A list of Projects that the member is the project manager
     */
    "projectManager"?: ProjectManager;
    /**
     * A list of knowledge base articles that the member is the approver
     */
    "knowledgeBasebArticle"?: KnowledgebaseArticle;
    "myCompanyPresidentRole"?: MyCompanyPresidentRole;
    "myCompanyCOORole"?: MyCompanyCOORole;
    "myCompanyControllerRole"?: MyCompanyControllerRole;
    "myCompanyDispatchRole"?: MyCompanyDispatchRole;
    "myCompanyServiceManagerRole"?: MyCompanyServiceManagerRole;
    "myCompanyDutyManagerRole"?: MyCompanyDutyManagerRole;
    "departmentManager"?: DepartmentMananager;
    "dispatchMember"?: DispatchMember;
    "serviceManager"?: ServiceManger;
    "dutyManager"?: DutyManager;
    "deleteOpenTimeSheetsFlag"?: boolean;
}
export interface MemberDelegation {
    "id"?: number;
    "delegationType": MemberDelegation.DelegationTypeEnum;
    "delegatedTo": MemberReference;
    "dateStart": Date;
    "dateEnd": Date;
    "member"?: MemberReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace MemberDelegation {
    type DelegationTypeEnum = 'Approval' | 'Project';
}
/**
 * Service Status Notification member must be entered if the notify type is "Specific Member"
 */
export interface MemberReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface MemberSkill {
    "id"?: number;
    "skill": SkillReference;
    "skillLevel": MemberSkill.SkillLevelEnum;
    "certifiedFlag"?: boolean;
    "yearsExperience"?: number;
    "notes"?: string;
    "member"?: MemberReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace MemberSkill {
    type SkillLevelEnum = 'Beginner' | 'Intermediate' | 'Advanced' | 'Expert';
}
export interface MemberTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface MenuEntry {
    "id"?: number;
    "menuLocation": MenuLocationReference;
    "caption": string;
    "link": string;
    "newWindowFlag": boolean;
    "locationIds"?: Array<number>;
    "origin"?: string;
    "addAllLocations"?: boolean;
    "removeAllLocations"?: boolean;
    "smallMenuIconId"?: number;
    "largeMenuIconId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface MenuEntryLocation {
    "id"?: number;
    "location": SystemLocationReference;
    "menuEntry"?: SystemMenuEntryReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface MenuLocationReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * Metadata of the entity
 */
export interface Metadata {
}
export interface MyCompanyCOORole {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface MyCompanyControllerRole {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface MyCompanyDispatchRole {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface MyCompanyDutyManagerRole {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface MyCompanyPresidentRole {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface MyCompanyServiceManagerRole {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface NoteType {
    "id"?: number;
    "identifier"?: string;
    "name": string;
    "defaultFlag"?: boolean;
    "importFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface NoteTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface NotificationRecipient {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "externalFlag"?: boolean;
    "serviceFlag"?: boolean;
    "salesFlag"?: boolean;
    "invoiceFlag"?: boolean;
    "agreementFlag"?: boolean;
    "memberFlag"?: boolean;
    "configFlag"?: boolean;
    "mspFlag"?: boolean;
    "trackFlag"?: boolean;
    "projectFlag"?: boolean;
    "procurementFlag"?: boolean;
    "knowledgeBaseFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * Required when notifyType is set to: "Create Activity", "Send Email", "Add Follower", "Assign Resource", "Close Survey"
 */
export interface NotificationRecipientReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface NotifyTypeReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * A list of the member's currently assigned Opportunities
 */
export interface Opportunity {
    "id"?: number;
    "name": string;
    "expectedCloseDate"?: Date;
    "type"?: OpportunityTypeReference;
    "stage"?: OpportunityStageReference;
    "status"?: OpportunityStatusReference;
    "priority"?: OpportunityPriorityReference;
    "notes"?: string;
    "probability"?: OpportunityProbabilityReference;
    "source"?: string;
    "rating"?: OpportunityRatingReference;
    "campaign"?: CampaignReference;
    "primarySalesRep": MemberReference;
    "secondarySalesRep"?: MemberReference;
    "locationId"?: number;
    "businessUnitId"?: number;
    "company": CompanyReference;
    "contact": ContactReference;
    "site": SiteReference;
    "customerPO"?: string;
    "pipelineChangeDate"?: Date;
    "dateBecameLead"?: Date;
    "closedDate"?: Date;
    "closedBy"?: MemberReference;
    "totalSalesTax"?: number;
    "shipToCompany"?: CompanyReference;
    "shipToContact"?: ContactReference;
    "shipToSite"?: SiteReference;
    "billToCompany"?: CompanyReference;
    "billToContact"?: ContactReference;
    "billToSite"?: SiteReference;
    "billingTerms"?: BillingTermsReference;
    "taxCode"?: TaxCodeReference;
    "currency"?: CurrencyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface OpportunityContact {
    "id"?: number;
    "contact": ContactReference;
    "company"?: CompanyReference;
    "role"?: OpportunitySalesRoleReference;
    "notes"?: string;
    "referralFlag"?: boolean;
    "opportunityId"?: number;
    "phoneNumber"?: string;
    "emailAddress"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OpportunityNote {
    "id"?: number;
    "opportunityId"?: number;
    "type"?: NoteTypeReference;
    "text": string;
    "flagged"?: boolean;
    "enteredBy"?: string;
    "mobileGuid"?: Guid;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OpportunityPriorityReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OpportunityProbabilityReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OpportunityRating {
    "id"?: number;
    "name": string;
    "sortOrder"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OpportunityRatingReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OpportunityReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OpportunitySalesRoleReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OpportunityStage {
    "id"?: number;
    "name": string;
    "probability"?: OpportunityProbabilityReference;
    "color"?: string;
    "sequenceNumber"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OpportunityStageReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OpportunityStatus {
    "id"?: number;
    "name": string;
    "wonFlag"?: boolean;
    "lostFlag"?: boolean;
    "closedFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "enteredBy"?: string;
    "dateEntered"?: Date;
}
/**
 * Required when acceptanceChangeStatusFlag is true
 */
export interface OpportunityStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OpportunityToAgreementConversion {
    "agreementId"?: number;
    "name"?: string;
    "type"?: AgreementTypeReference;
    "startDate"?: string;
    "endDate"?: string;
    "noEndingDateFlag"?: boolean;
    "billCycleId"?: number;
    "billOneTimeFlag"?: boolean;
    "locationId"?: number;
    "businessUnitId"?: number;
    "includeAllNotesFlag"?: boolean;
    "includeAllDocumentsFlag"?: boolean;
    "includeAllProductsFlag"?: boolean;
    "includeNoteIds"?: Array<number>;
    "includeDocumentIds"?: Array<number>;
    "includeProductIds"?: Array<number>;
}
export interface OpportunityToProjectConversion {
    "projectId"?: number;
    "name"?: string;
    "status"?: ProjectStatusReference;
    "locationId"?: number;
    "businessUnitId"?: number;
    "board"?: ProjectBoardReference;
    "manager"?: MemberReference;
    "estimatedStart"?: string;
    "estimatedEnd"?: string;
    "includeAllNotesFlag"?: boolean;
    "includeAllDocumentsFlag"?: boolean;
    "includeAllProductsFlag"?: boolean;
    "includeNoteIds"?: Array<number>;
    "includeDocumentIds"?: Array<number>;
    "includeProductIds"?: Array<number>;
}
export interface OpportunityToSalesOrderConversion {
    "salesOrderId"?: number;
    "name"?: string;
    "includeAllNotesFlag"?: boolean;
    "includeAllDocumentsFlag"?: boolean;
    "includeAllProductsFlag"?: boolean;
    "includeNoteIds"?: Array<number>;
    "includeDocumentIds"?: Array<number>;
    "includeProductIds"?: Array<number>;
}
export interface OpportunityToServiceTicketConversion {
    "ticketId"?: number;
    "summary"?: string;
    "includeAllNotesFlag"?: boolean;
    "includeAllDocumentsFlag"?: boolean;
    "includeAllProductsFlag"?: boolean;
    "includeNoteIds"?: Array<number>;
    "includeDocumentIds"?: Array<number>;
    "includeProductIds"?: Array<number>;
}
export interface OpportunityType {
    "id"?: number;
    "description": string;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OpportunityTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Order {
    "id"?: number;
    "company": CompanyReference;
    "contact"?: ContactReference;
    "phone"?: string;
    "phoneExt"?: string;
    "email"?: string;
    "site"?: SiteReference;
    "status": OrderStatusReference;
    "opportunity"?: OpportunityReference;
    "orderDate"?: Date;
    "dueDate"?: Date;
    "billingTerms"?: BillingTermsReference;
    "taxCode"?: TaxCodeReference;
    "poNumber"?: string;
    "locationId"?: number;
    "businessUnitId"?: number;
    "salesRep": MemberReference;
    "notes"?: string;
    "billClosedFlag"?: boolean;
    "billShippedFlag"?: boolean;
    "restrictDownpaymentFlag"?: boolean;
    "description"?: string;
    "topCommentFlag"?: boolean;
    "bottomCommentFlag"?: boolean;
    "shipToCompany"?: CompanyReference;
    "shipToContact"?: ContactReference;
    "shipToSite"?: SiteReference;
    "billToCompany"?: CompanyReference;
    "billToContact"?: ContactReference;
    "billToSite"?: SiteReference;
    "productIds"?: Array<number>;
    "documentIds"?: Array<number>;
    "invoiceIds"?: Array<number>;
    "configIds"?: Array<number>;
    "total"?: number;
    "taxTotal"?: number;
    "currency"?: CurrencyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OrderStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "sortOrder"?: number;
    "closedFlag"?: boolean;
    "emailTemplate"?: OrderStatusEmailTemplateReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OrderStatusEmailTemplate {
    "id"?: number;
    "status"?: OrderStatusReference;
    "useSenderFlag"?: boolean;
    "firstName"?: string;
    "lastName"?: string;
    "emailAddress"?: string;
    "subject": string;
    "body": string;
    "copySenderFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OrderStatusEmailTemplateReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OrderStatusNotification {
    "id"?: number;
    "notifyWho": NotificationRecipientReference;
    "status"?: OrderStatusReference;
    /**
     * Order Status Notification member must be entered if the notify type is "Specific Member"
     */
    "member"?: MemberReference;
    /**
     * Order Status Notification sendEmail must be entered if the notify type is "Email Address"
     */
    "email"?: string;
    "workflowStep"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * Required when notifyType is set to: "Change Sales Order Status"
 */
export interface OrderStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Other {
    "id"?: number;
    "defaultLdap"?: LdapConfigurationReference;
    "defaultFromAddress": string;
    "portalUrlOverride": string;
    "siteUrl": string;
    "logoPath"?: string;
    "contactSync"?: Other.ContactSyncEnum;
    "serverTimeZone": TimeZoneSetupReference;
    "defaultCalendar": CalendarReference;
    "defaultAddressFormat": AddressFormatReference;
    "useSslFlag"?: boolean;
    "syncLeadsFlag"?: boolean;
    "includePortalLinkFlag"?: boolean;
    "useExpandedFormatTimeFlag"?: boolean;
    "useExpandedFormatActivityFlag"?: boolean;
    /**
     * If true, all Members time zone will also be set to serverTimeZone. Otherwise, only My Company time zone will be updated.
     */
    "updateMemberTimeZonesFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Other {
    type ContactSyncEnum = 'FL' | 'LF' | 'CFL' | 'CLF';
}
export interface OwnershipType {
    "id"?: number;
    "name": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface OwnershipTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ParsingType {
    "id"?: number;
    "name"?: string;
    "parseRule"?: string;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ParsingVariable {
    "id"?: number;
    "name"?: string;
    "code"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PatchOperation {
    "op"?: string;
    "path"?: string;
    "value"?: string;
}
export interface Payment {
    "id"?: number;
    "type"?: string;
    "invoice"?: InvoiceReference;
    "amount": number;
    "paymentDate"?: Date;
    "appliedBy"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PaymentMethodReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PaymentType {
    "id"?: number;
    "name": string;
    "classification": ClassificationReference;
    "defaultFlag"?: boolean;
    "companyFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PhaseStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PortalCalendar {
    "id"?: number;
    "weekStart": PortalCalendar.WeekStartEnum;
    "adjust1Start"?: string;
    "adjust1End"?: string;
    "adjust1Hours"?: number;
    "adjust2Start"?: string;
    "adjust2End"?: string;
    "adjust2Hours"?: number;
    "adjust3Start"?: string;
    "adjust3End"?: string;
    "adjust3Hours"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace PortalCalendar {
    type WeekStartEnum = 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday';
}
export interface PortalConfiguration {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "company"?: CompanyReference;
    "loginBackgroundColor"?: string;
    "portalBackgroundColor"?: string;
    "menuColor"?: string;
    "buttonColor"?: string;
    "headerColor"?: string;
    "url"?: string;
    "language"?: PortalConfiguration.LanguageEnum;
    "welcomeText"?: string;
    "boardIds"?: Array<number>;
    "agreementTypeIds"?: Array<number>;
    "configTypeIds"?: Array<number>;
    "locationIds"?: Array<number>;
    "displayVendorFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace PortalConfiguration {
    type LanguageEnum = 'English' | 'Spanish' | 'French' | 'British' | 'Australian' | 'BrazilianPortuguese' | 'CanadianFrench' | 'German' | 'NewZealand';
}
export interface PortalConfigurationInvoiceSetup {
    "id"?: number;
    "portalConfiguration"?: PortalConfigurationReference;
    "displayInvPmtFlag"?: boolean;
    "allowInvPmtFlag"?: boolean;
    "location"?: SystemLocationReference;
    "paymentProcessor"?: PortalConfigurationInvoiceSetup.PaymentProcessorEnum;
    "login"?: string;
    "password"?: string;
    "urlOverride"?: string;
    "billingStatusIds"?: Array<number>;
    "addAllStatuses"?: boolean;
    "removeAllStatuses"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace PortalConfigurationInvoiceSetup {
    type PaymentProcessorEnum = 'AuthorizeNET' | 'PayPal';
}
export interface PortalConfigurationOpportunitySetup {
    "id"?: number;
    "opportunityStatusRecIDs"?: Array<number>;
    "addAllOpportunityStatuses"?: boolean;
    "removeAllOpportunityStatuses"?: boolean;
    "opportunityTypeRecIDs"?: Array<number>;
    "addAllOpportunityTypes"?: boolean;
    "removeAllOpportunityTypes"?: boolean;
    "restrictViewByOpportunityStatusFlag"?: boolean;
    "restrictViewByOpportunityTypeFlag"?: boolean;
    "acceptanceChangeStatusFlag"?: boolean;
    "acceptanceCreateActivityFlag"?: boolean;
    /**
     * Required when acceptanceChangeStatusFlag is true
     */
    "acceptanceOpportunityStatus"?: OpportunityStatusReference;
    "acceptanceSendEmailFlag"?: boolean;
    "acceptanceEmailFromFirstName"?: string;
    "acceptanceEmailFromLastName"?: string;
    "acceptanceEmailSubject"?: string;
    "acceptanceEmailBody"?: string;
    /**
     * Required when acceptanceSendEmailFlag is true
     */
    "acceptanceFromEmail"?: string;
    /**
     * Required when acceptanceCreateActivityFlag is true
     */
    "acceptanceEmailActivityType"?: ActivityTypeReference;
    /**
     * Required when acceptanceCreateActivityFlag is true
     */
    "acceptanceEmailAssignedByMember"?: MemberReference;
    "rejectionChangeStatusFlag"?: boolean;
    "rejectionCreateActivityFlag"?: boolean;
    /**
     * Required when rejectionChangeStatusFlag is true
     */
    "rejectionOpportunityStatus"?: OpportunityStatusReference;
    "rejectionSendEmailFlag"?: boolean;
    "rejectionEmailFromFirstName"?: string;
    "rejectionEmailFromLastName"?: string;
    /**
     * Required when rejectionSendEmailFlag is true
     */
    "rejectionFromEmail"?: string;
    "rejectionEmailSubject"?: string;
    "rejectionEmailBody"?: string;
    /**
     * Required when rejectionCreateActivityFlag is true
     */
    "rejectionEmailActivityType"?: ActivityTypeReference;
    /**
     * Required when rejectionCreateActivityFlag is true
     */
    "rejectionEmailAssignedByMember"?: MemberReference;
    "confirmationSendEmailFlag"?: boolean;
    "confirmationEmailUseDefaultCompanyEmailAddressFlag"?: boolean;
    "confirmationEmailFromFirstName"?: string;
    "confirmationEmailFromLastName"?: string;
    /**
     * Required when confirmationSendEmailFlag is true
     */
    "confirmationFromEmail"?: string;
    "confirmationEmailSubject"?: string;
    "confirmationEmailBody"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PortalConfigurationPasswordEmailSetup {
    "id"?: number;
    "validPasswordEmailUseCustomEmailFlag"?: boolean;
    "validPasswordEmailFromFirstName"?: string;
    "validPasswordEmailFromLastName"?: string;
    /**
     * Required when validPasswordEmailUseCustomEmailFlag is true
     */
    "validPasswordEmailFromEmail"?: string;
    "validPasswordEmailSubject"?: string;
    "validPasswordEmailBody"?: string;
    "invalidPasswordEmailUseCustomEmailFlag"?: boolean;
    "invalidPasswordEmailFromFirstName"?: string;
    "invalidPasswordEmailFromLastName"?: string;
    /**
     * Required when invalidPasswordEmailUseCustomEmailFlag is true
     */
    "invalidPasswordEmailFromEmail"?: string;
    "invalidPasswordEmailSubject"?: string;
    "invalidPasswordEmailBody"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PortalConfigurationProjectSetup {
    "id"?: number;
    "portalConfig"?: PortalConfigurationReference;
    "projectNameFlag"?: boolean;
    "projectTypeFlag"?: boolean;
    "statusFlag"?: boolean;
    "projectManagerFlag"?: boolean;
    "billingMethodFlag"?: boolean;
    "contactFlag"?: boolean;
    "estimatedStartFlag"?: boolean;
    "estimatedEndFlag"?: boolean;
    "descriptionFlag"?: boolean;
    "lastUpdatedFlag"?: boolean;
    "onlyDisplay"?: PortalConfigurationProjectSetup.OnlyDisplayEnum;
    "timeMaterialBudgetHrsFlag"?: boolean;
    "timeMaterialScheduledStartFlag"?: boolean;
    "timeMaterialScheduledFinishFlag"?: boolean;
    "timeMaterialScheduledHrsFlag"?: boolean;
    "timeMaterialActualStartFlag"?: boolean;
    "timeMaterialActualFinishFlag"?: boolean;
    "timeMaterialActualHrsFlag"?: boolean;
    "timeMaterialBillFlag"?: boolean;
    "timeMaterialStatusFlag"?: boolean;
    "timeMaterialAssignedFlag"?: boolean;
    "fixedFeeBudgetHrsFlag"?: boolean;
    "fixedFeeScheduledStartFlag"?: boolean;
    "fixedFeeScheduledFinishFlag"?: boolean;
    "fixedFeeScheduledHrsFlag"?: boolean;
    "fixedFeeActualStartFlag"?: boolean;
    "fixedFeeActualFinishFlag"?: boolean;
    "fixedFeeActualHrsFlag"?: boolean;
    "fixedFeeBillFlag"?: boolean;
    "fixedFeeStatusFlag"?: boolean;
    "fixedFeeAssignedFlag"?: boolean;
    "projectIssueBudgetHrsFlag"?: boolean;
    "projectIssueScheduledStartFlag"?: boolean;
    "projectIssueScheduledFinishFlag"?: boolean;
    "projectIssueScheduledHrsFlag"?: boolean;
    "projectIssueActualStartFlag"?: boolean;
    "projectIssueActualFinishFlag"?: boolean;
    "projectIssueActualHrsFlag"?: boolean;
    "projectIssueBillFlag"?: boolean;
    "projectIssueStatusFlag"?: boolean;
    "projectIssueAssignedFlag"?: boolean;
    "projectDetailTotalHoursFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace PortalConfigurationProjectSetup {
    type OnlyDisplayEnum = 'DoNotDisplay' | 'Closed30Days' | 'Closed60Days' | 'Closed90Days' | 'Closed120Days' | 'AllClosed';
}
export interface PortalConfigurationReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PortalConfigurationServiceSetup {
    "id"?: number;
    "serviceTypeFlag"?: boolean;
    "serviceSubTypeFlag"?: boolean;
    "serviceSubTypeItemFlag"?: boolean;
    "statusFlag"?: boolean;
    "siteNameFlag"?: boolean;
    "enteredDateFlag"?: boolean;
    "lastUpdateFlag"?: boolean;
    "requiredDateFlag"?: boolean;
    "contactFlag"?: boolean;
    "assignedResourcesFlag"?: boolean;
    "slaInfoFlag"?: boolean;
    "serviceBoardFlag"?: boolean;
    "budgetHoursFlag"?: boolean;
    "actualHoursFlag"?: boolean;
    "approvalStatusFlag"?: boolean;
    "openTasksFlag"?: boolean;
    "closedTasksFlag"?: boolean;
    "displayClosedTicketsOption": PortalConfigurationServiceSetup.DisplayClosedTicketsOptionEnum;
    "timeMaterialsTicketTemplate": ServiceSignoffReference;
    "fixedFeeTicketTemplate": ServiceSignoffReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace PortalConfigurationServiceSetup {
    type DisplayClosedTicketsOptionEnum = 'DoNotDisplay' | 'Closed30Days' | 'Closed60Days' | 'Closed90Days' | 'Closed120Days' | 'AllClosed';
}
export interface PortalReport {
    "id"?: number;
    "portalConfiguration"?: PortalConfigurationReference;
    "name": string;
    "url": string;
    "openSameWindowFlag"?: boolean;
    "customFlag"?: boolean;
    "displayFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PortalSecurity {
    "identifier"?: string;
    "enabled"?: boolean;
    "id"?: number;
    "functionIdentifier"?: string;
    "functionDescription"?: string;
    "levelOne"?: boolean;
    "levelTwo"?: boolean;
    "levelThree"?: boolean;
    "levelFour"?: boolean;
    "levelFive"?: boolean;
    "levelSix"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PortalSecurityLevel {
    "id"?: number;
    "captionIdentifier"?: string;
    "isDefaultFlag"?: boolean;
    "caption"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PricingBreak {
    "id"?: number;
    "detailId"?: number;
    "amount"?: number;
    "quantityStart": number;
    "quantityEnd"?: number;
    "unlimited"?: boolean;
    "priceMethod": PricingBreak.PriceMethodEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace PricingBreak {
    type PriceMethodEnum = 'FlatRateForRange' | 'PercentMarkupFromCost' | 'PercentMarkdownFromPrice' | 'PricePerUnit';
}
export interface PricingDetail {
    "id"?: number;
    "product"?: CatalogItemReference;
    "category"?: ProductCategoryReference;
    "subCategory"?: ProductSubCategoryReference;
    "startDate": Date;
    "endDate"?: Date;
    "noEndDate"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PricingSchedule {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "defaultFlag"?: boolean;
    "currency"?: CurrencyReference;
    "companies"?: Array<number>;
    "setAllCompaniesFlag"?: boolean;
    "removeAllCompaniesFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PricingScheduleReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Priority {
    "id"?: number;
    "name": string;
    "color": string;
    "sortOrder"?: number;
    "defaultFlag"?: boolean;
    "imageLink"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PriorityReference {
    "id"?: number;
    "name"?: string;
    "sort"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProductCategoryReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProductComponent {
    "id"?: number;
    "sequenceNumber"?: number;
    "quantity": number;
    "catalogItem": CatalogItemReference;
    "hidePriceFlag"?: boolean;
    "hideItemIdentifierFlag"?: boolean;
    "hideDescriptionFlag"?: boolean;
    "hideQuantityFlag"?: boolean;
    "vendor"?: CompanyReference;
    "parentProductItem"?: ProductItemReference;
    "productItem"?: ProductItemReference;
    "price"?: number;
    "cost"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProductItem {
    "id"?: number;
    "catalogItem": CatalogItemReference;
    "chargeToId": number;
    "chargeToType": ProductItem.ChargeToTypeEnum;
    "description"?: string;
    "sequenceNumber"?: number;
    "quantity"?: number;
    "price"?: number;
    "cost"?: number;
    "discount"?: number;
    "priceMethod"?: ProductItem.PriceMethodEnum;
    "billableOption": ProductItem.BillableOptionEnum;
    "agreement"?: AgreementReference;
    "locationId"?: number;
    "businessUnitId"?: number;
    "vendor"?: CompanyReference;
    "vendorSku"?: string;
    "taxableFlag"?: boolean;
    "dropshipFlag"?: boolean;
    "specialOrderFlag"?: boolean;
    "phaseProductFlag"?: boolean;
    "cancelledFlag"?: boolean;
    "quantityCancelled"?: number;
    "cancelledReason"?: string;
    "customerDescription"?: string;
    "internalNotes"?: string;
    "productSuppliedFlag"?: boolean;
    "subContractorShipToId"?: number;
    "subContractorAmountLimit"?: number;
    "recurring"?: ProductRecurring;
    "sla"?: SLAReference;
    "entityType"?: EntityTypeReference;
    "forecastDetailId"?: number;
    "cancelledBy"?: number;
    "cancelledDate"?: Date;
    "warehouse"?: string;
    "warehouseBin"?: string;
    "purchaseDate"?: Date;
    "integrationXRef"?: string;
    "listPrice"?: number;
    "serialNumberIds"?: Array<number>;
    "company"?: CompanyReference;
    "forecastStatus"?: OpportunityStatusReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "bypassForecastUpdate"?: boolean;
    "customFields"?: Array<CustomFieldValue>;
}
export namespace ProductItem {
    type ChargeToTypeEnum = 'Ticket' | 'Project' | 'Invoice' | 'Opportunity' | 'SalesOrder';
    type PriceMethodEnum = 'FlatRateForRange' | 'PercentMarkupFromCost' | 'PercentMarkdownFromPrice' | 'PricePerUnit';
    type BillableOptionEnum = 'Billable' | 'DoNotBill' | 'NoCharge';
}
export interface ProductItemReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProductPickingShippingDetail {
    "id"?: number;
    "pickedQuantity": number;
    "shippedQuantity": number;
    "warehouse": WarehouseReference;
    "warehouseBin": WarehouseBinReference;
    "shipmentMethod"?: ShipmentMethodReference;
    "serialNumber"?: string;
    "serialNumberIds"?: Array<number>;
    "trackingNumber"?: string;
    "productItem"?: ProductItemReference;
    "lineNumber"?: number;
    "quantity"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProductRecurring {
    "recurringRevenue": number;
    "recurringCost": number;
    "startDate": Date;
    "endDate": Date;
    "billCycleId": number;
    "cycles": number;
    "cycleType": ProductRecurring.CycleTypeEnum;
}
export namespace ProductRecurring {
    type CycleTypeEnum = 'CalendarYear' | 'ContractYear';
}
export interface ProductReference {
    "id"?: number;
    "description"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProductSubCategoryReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProductType {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "typeXref"?: ProductType.TypeXrefEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ProductType {
    type TypeXrefEnum = 'InventoryPart' | 'NonInventoryPart' | 'OtherCharge' | 'Service';
}
export interface ProductTypeExemption {
    "id"?: number;
    "productType": ProductTypeReference;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelOneFlag"?: boolean;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelTwoFlag"?: boolean;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelThreeFlag"?: boolean;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelFourFlag"?: boolean;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelFiveFlag"?: boolean;
    "taxCode"?: TaxCodeReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProductTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Project {
    "id"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "actualEnd"?: Date;
    "actualHours"?: number;
    "actualStart"?: Date;
    "agreement"?: AgreementReference;
    "billExpenses"?: Project.BillExpensesEnum;
    "billingAmount"?: number;
    "billingAttention"?: string;
    "billingMethod": Project.BillingMethodEnum;
    "billingRateType"?: Project.BillingRateTypeEnum;
    "billingTerms"?: BillingTermsReference;
    "billProducts"?: Project.BillProductsEnum;
    "billProjectAfterClosedFlag"?: boolean;
    "billTime"?: Project.BillTimeEnum;
    "billToCompany"?: CompanyReference;
    "billToContact"?: ContactReference;
    "billToSite"?: SiteReference;
    "billUnapprovedTimeAndExpense"?: boolean;
    "board": ProjectBoardReference;
    "budgetAnalysis"?: Project.BudgetAnalysisEnum;
    "budgetFlag"?: boolean;
    "budgetHours"?: number;
    "businessUnitId"?: number;
    "company": CompanyReference;
    "contact"?: ContactReference;
    "customerPO"?: string;
    "description"?: string;
    "currency"?: CurrencyReference;
    "downpayment"?: number;
    "estimatedEnd": Date;
    "estimatedExpenseRevenue"?: number;
    "estimatedHours"?: number;
    "estimatedProductRevenue"?: number;
    "estimatedStart": Date;
    "estimatedTimeRevenue"?: number;
    "expenseApprover"?: MemberReference;
    "includeDependenciesFlag"?: boolean;
    "includeEstimatesFlag"?: boolean;
    "locationId"?: number;
    "manager"?: MemberReference;
    "name": string;
    "opportunity"?: OpportunityReference;
    "projectTemplateId"?: number;
    "restrictDownPaymentFlag"?: boolean;
    "scheduledEnd"?: Date;
    "scheduledHours"?: number;
    "scheduledStart"?: Date;
    "shipToCompany"?: CompanyReference;
    "shipToContact"?: ContactReference;
    "shipToSite"?: SiteReference;
    "site"?: SiteReference;
    "status"?: ProjectStatusReference;
    "timeApprover"?: MemberReference;
    "type"?: ProjectTypeReference;
    "doNotDisplayInPortalFlag"?: boolean;
    "billingStartDate"?: Date;
    "estimatedTimeCost"?: number;
    "estimatedExpenseCost"?: number;
    "estimatedProductCost"?: number;
    "taxCode"?: TaxCodeReference;
}
export namespace Project {
    type BillExpensesEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillingMethodEnum = 'ActualRates' | 'FixedFee' | 'NotToExceed' | 'OverrideRate';
    type BillingRateTypeEnum = 'WorkRole' | 'StaffMember';
    type BillProductsEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillTimeEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BudgetAnalysisEnum = 'ActualHours' | 'BillableHours';
}
export interface ProjectBoardReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProjectContact {
    "id"?: number;
    "projectId"?: number;
    "contact": ContactReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * A list of Projects that the member is the project manager
 */
export interface ProjectManager {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface ProjectNote {
    "id"?: number;
    "projectId"?: number;
    "text": string;
    "type"?: NoteTypeReference;
    "flagged"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProjectPhase {
    "id"?: number;
    "projectId"?: number;
    "description": string;
    "board"?: ProjectBoardReference;
    "status"?: PhaseStatusReference;
    "agreement"?: AgreementReference;
    "opportunity"?: OpportunityReference;
    "parentPhase"?: ProjectPhaseReference;
    "wbsCode"?: string;
    "billTime"?: ProjectPhase.BillTimeEnum;
    "billExpenses"?: ProjectPhase.BillExpensesEnum;
    "billProducts"?: ProjectPhase.BillProductsEnum;
    "markAsMilestoneFlag"?: boolean;
    "notes"?: string;
    "deadlineDate"?: Date;
    "billSeparatelyFlag"?: boolean;
    /**
     * billingMethod is required if the phase billSeparatelyFlag is true
     */
    "billingMethod"?: ProjectPhase.BillingMethodEnum;
    "scheduledHours"?: number;
    "scheduledStart"?: string;
    "scheduledEnd"?: string;
    "actualHours"?: number;
    "actualStart"?: string;
    "actualEnd"?: string;
    "budgetHours"?: number;
    "locationId"?: number;
    "businessUnitId"?: number;
    "hourlyRate"?: number;
    "billingStartDate"?: Date;
    /**
     * This phase can only be billed after it has been closed
     */
    "billPhaseClosedFlag"?: boolean;
    /**
     * This phase can only be billed after the project has been closed
     */
    "billProjectClosedFlag"?: boolean;
    "downpayment"?: number;
    "poNumber"?: string;
    "poAmount"?: number;
    "estimatedTimeCost"?: number;
    "estimatedExpenseCost"?: number;
    "estimatedProductCost"?: number;
    "estimatedTimeRevenue"?: number;
    "estimatedExpenseRevenue"?: number;
    "estimatedProductRevenue"?: number;
    "currency"?: CurrencyReference;
    "billToCompany"?: CompanyReference;
    "billToContact"?: ContactReference;
    "billToSite"?: SiteReference;
    "shipToCompany"?: CompanyReference;
    "shipToContact"?: ContactReference;
    "shipToSite"?: SiteReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ProjectPhase {
    type BillTimeEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillExpensesEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillProductsEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillingMethodEnum = 'ActualRates' | 'FixedFee' | 'NotToExceed' | 'OverrideRate';
}
export interface ProjectPhaseReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProjectReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProjectRoleReference {
    "id"?: number;
    "identifier"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProjectSecurityRole {
    "id"?: number;
    "name": string;
    "managerRoleFlag"?: boolean;
    "defaultContactFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProjectSecurityRoleSetting {
    "id"?: number;
    "addLevel"?: ProjectSecurityRoleSetting.AddLevelEnum;
    "editLevel"?: ProjectSecurityRoleSetting.EditLevelEnum;
    "deleteLevel"?: ProjectSecurityRoleSetting.DeleteLevelEnum;
    "inquireLevel"?: ProjectSecurityRoleSetting.InquireLevelEnum;
    "moduleIdentifier"?: string;
    "myFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ProjectSecurityRoleSetting {
    type AddLevelEnum = 'All' | 'My' | 'None';
    type EditLevelEnum = 'All' | 'My' | 'None';
    type DeleteLevelEnum = 'All' | 'My' | 'None';
    type InquireLevelEnum = 'All' | 'My' | 'None';
}
export interface ProjectStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "noTimeFlag"?: boolean;
    "closedFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * Required when notifyType is set to: "Change Project Status"
 */
export interface ProjectStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProjectTeammember {
    "id"?: number;
    "projectId"?: number;
    "hours"?: number;
    "member": MemberReference;
    "projectRole": ProjectRoleReference;
    "workRole"?: WorkRoleReference;
    "startDate"?: Date;
    "endDate"?: Date;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProjectType {
    "id"?: number;
    "name"?: string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "integrationXref"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ProjectTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PurchaseOrder {
    "id"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "businessUnitId"?: number;
    "cancelReason"?: string;
    "closedFlag"?: boolean;
    "customerCity"?: string;
    "customerCompany"?: CompanyReference;
    "customerContact"?: ContactReference;
    "customerCountry"?: CountryReference;
    "customerExtension"?: string;
    "customerName"?: string;
    "customerPhone"?: string;
    "customerSite"?: SiteReference;
    "customerSiteName"?: string;
    "customerState"?: string;
    "customerStreetLine1"?: string;
    "customerStreetLine2"?: string;
    "customerZip"?: string;
    "dateClosed"?: Date;
    "dropShipCustomerFlag"?: boolean;
    "enteredBy"?: string;
    "freightCost"?: number;
    "freightPackingSlip"?: string;
    "freightTaxTotal"?: number;
    "internalNotes"?: string;
    "locationId": number;
    "poDate"?: Date;
    "poNumber"?: string;
    "salesTax"?: number;
    "shipmentDate"?: Date;
    "shipmentMethod"?: ShipmentMethodReference;
    "shippingInstructions"?: string;
    "status": PurchaseOrderStatusReference;
    "subTotal"?: number;
    "taxCode"?: TaxCodeReference;
    "taxFreightFlag"?: boolean;
    "taxPoFlag"?: boolean;
    "terms": BillingTermsReference;
    "total"?: number;
    "trackingNumber"?: string;
    /**
     * Determines whether or not to update all of the shipment info for each associated line item when new shipment info is passed in
     */
    "updateShipmentInfo"?: boolean;
    /**
     * Determines whether or not to update vendor order number for each associated line item when new vendor order number is passed in
     */
    "updateVendorOrderNumber"?: boolean;
    "vendorCompany": CompanyReference;
    "vendorContact"?: ContactReference;
    "vendorInvoiceDate"?: Date;
    "vendorInvoiceNumber"?: string;
    "vendorOrderNumber"?: string;
    "vendorSite"?: SiteReference;
    "warehouse"?: WarehouseReference;
    "currency"?: CurrencyReference;
}
export interface PurchaseOrderLineItem {
    "id"?: number;
    "backorderedFlag"?: boolean;
    "canceledBy"?: string;
    "canceledFlag"?: boolean;
    "canceledReason"?: string;
    "closedFlag"?: boolean;
    "dateCanceled"?: Date;
    "dateCanceledUtc"?: Date;
    "description": string;
    "displayInternalNotesFlag"?: boolean;
    "expectedShipDate"?: Date;
    "internalNotes"?: string;
    "lineNumber": number;
    "packingSlip"?: string;
    "product": IvItemReference;
    "purchaseOrderId"?: number;
    "quantity": number;
    "receivedQuantity"?: number;
    "serialNumbers"?: string;
    "shipDate"?: Date;
    "shipmentMethod"?: ShipmentMethodReference;
    "tax"?: number;
    "trackingNumber"?: string;
    "unitCost"?: number;
    "unitOfMeasure": UnitOfMeasureReference;
    "vendorOrderNumber"?: string;
    "warehouse"?: WarehouseReference;
    "warehouseBin"?: WarehouseBinReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PurchaseOrderReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PurchaseOrderStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "closedFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "defaultClosedFlag"?: boolean;
    "sortOrder"?: number;
    "emailTemplate"?: PurchaseOrderStatusEmailTemplateReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PurchaseOrderStatusEmailTemplate {
    "id"?: number;
    "status"?: PurchaseOrderStatusReference;
    "useSenderFlag"?: boolean;
    "firstName"?: string;
    "lastName"?: string;
    "emailAddress"?: string;
    "subject": string;
    "body"?: string;
    "copySenderFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PurchaseOrderStatusEmailTemplateReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PurchaseOrderStatusNotification {
    "id"?: number;
    "notifyWho": NotificationRecipientReference;
    "status"?: PurchaseOrderStatusReference;
    /**
     * Purchase Order Status Notification member must be entered if the notify type is "Specific Member"
     */
    "member"?: MemberReference;
    /**
     * Purchase Order Status Notification email must be entered if the notify type is "Email Address"
     */
    "email"?: string;
    "workflowStep"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface PurchaseOrderStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Purchasing {
    "id"?: number;
    "startingPurchaseOrderNum": number;
    "purchaseOrderPrefix"?: string;
    "purchaseOrderSuffix"?: string;
    "prefixSuffixType"?: Purchasing.PrefixSuffixTypeEnum;
    "disableCostUpdatesFlag"?: boolean;
    "disableNegativeInventoryFlag"?: boolean;
    "costingMethod": Purchasing.CostingMethodEnum;
    "autoClosePurchaseOrderFlag"?: boolean;
    "autoClosePurchaseOrderItemFlag"?: boolean;
    "autoApprovePurchaseOrderFlag"?: boolean;
    "taxPurchaseOrderFlag"?: boolean;
    "taxFreightFlag"?: boolean;
    "useVendorTaxCodeFlag"?: boolean;
    "numDecimalPlaces"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Purchasing {
    type PrefixSuffixTypeEnum = 'Prefix' | 'Suffix';
    type CostingMethodEnum = 'FIFO' | 'LIFO' | 'AverageCosting';
}
export interface RMAAction {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface RMADisposition {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface RelationshipReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ReminderReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Report {
    "name"?: string;
}
export interface ReportCard {
    "id"?: number;
    "name": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ReportCardDetail {
    "id"?: number;
    "kpi": KPIReference;
    "sortOrder"?: number;
    "reportCard"?: ReportCardReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ReportCardReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ReportDataResponse {
    "columnDefinitions"?: Array<JObject>;
    "rowValues"?: Array<JObject>;
}
export interface ReportingService {
    "id"?: number;
    "reportingUserName"?: string;
    /**
     * To blank out the password, enter an empty string here.
     */
    "reportingPassword"?: string;
    "reportingDomain"?: string;
    "reportingUrl"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface RequestPasswordRequest {
    "email": string;
}
export interface RmaStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "sortOrder"?: number;
    "closedFlag"?: boolean;
    "emailTemplate"?: RmaStatusEmailTemplateReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface RmaStatusEmailTemplate {
    "id"?: number;
    "status"?: RmaStatusReference;
    "useSenderFlag"?: boolean;
    "firstName"?: string;
    "lastName"?: string;
    "emailAddress"?: string;
    "subject": string;
    "body": string;
    "copySenderFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface RmaStatusEmailTemplateReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface RmaStatusNotification {
    "id"?: number;
    "notifyWho": NotificationRecipientReference;
    "status"?: RmaStatusReference;
    /**
     * RMA Status Notification member must be entered if the notify type is "Specific Member"
     */
    "member"?: MemberReference;
    /**
     * RMA Status Notification sendEmail must be entered if the notify type is "Email Address"
     */
    "email"?: string;
    "workflowStep"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface RmaStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Role {
    "id"?: number;
    "name": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SLA {
    "id"?: number;
    "name": string;
    "basedOn": SLA.BasedOnEnum;
    /**
     * customCalendar is a required reference if basedOn SLA Hours Type is Custom
     */
    "customCalendar"?: CalendarReference;
    "defaultFlag"?: boolean;
    "applicationOrder"?: number;
    "hiImpactHiUrgency"?: PriorityReference;
    "hiImpactMedUrgency"?: PriorityReference;
    "hiImpactLowUrgency"?: PriorityReference;
    "medImpactHiUrgency"?: PriorityReference;
    "medImpactMedUrgency"?: PriorityReference;
    "medImpactLowUrgency"?: PriorityReference;
    "lowImpactHiUrgency"?: PriorityReference;
    "lowImpactMedUrgency"?: PriorityReference;
    "lowImpactLowUrgency"?: PriorityReference;
    "respondHours"?: number;
    "respondPercent"?: number;
    "planWithin"?: number;
    "planWithinPercent"?: number;
    "resolutionHours"?: number;
    "resolutionPercent"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace SLA {
    type BasedOnEnum = 'MyCalendar' | 'Customer' | 'AllHours' | 'Custom';
}
export interface SLAPriority {
    "id"?: number;
    "priority": PriorityReference;
    "respondHours"?: number;
    "respondPercent"?: number;
    "planWithin"?: number;
    "planWithinPercent"?: number;
    "resolutionHours"?: number;
    "resolutionPercent"?: number;
    "sla"?: SLAReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SLAReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * The List of Activities Assigned to the Member
 */
export interface SalesActivity {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface SalesProbability {
    "id"?: number;
    "probability": number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SalesQuota {
    "id"?: number;
    "member": MemberReference;
    "forecastYear"?: number;
    "location": SystemLocationReference;
    "department"?: SystemDepartmentReference;
    "category"?: ProductCategoryReference;
    "subCategory"?: ProductSubCategoryReference;
    "januaryRevenue"?: number;
    "januaryMargin"?: number;
    "februaryRevenue"?: number;
    "februaryMargin"?: number;
    "marchRevenue"?: number;
    "marchMargin"?: number;
    "aprilRevenue"?: number;
    "aprilMargin"?: number;
    "mayRevenue"?: number;
    "mayMargin"?: number;
    "juneRevenue"?: number;
    "juneMargin"?: number;
    "julyRevenue"?: number;
    "julyMargin"?: number;
    "augustRevenue"?: number;
    "augustMargin"?: number;
    "septemberRevenue"?: number;
    "septemberMargin"?: number;
    "octoberRevenue"?: number;
    "octoberMargin"?: number;
    "novemberRevenue"?: number;
    "novemberMargin"?: number;
    "decemberRevenue"?: number;
    "decemberMargin"?: number;
    "currency"?: CurrencyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SalesTeam {
    "id"?: number;
    "salesTeamIdentifier": string;
    "salesTeamDescription": string;
    "salesTeamLocation": SystemLocationReference;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SalesTeamMember {
    "id"?: number;
    "member": MemberReference;
    "location"?: SystemLocationReference;
    "department"?: SystemDepartmentReference;
    "allowAccessFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SalesTeamReference {
    "id"?: number;
    "identifier"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ScheduleColor {
    "id"?: number;
    /**
     * A startPercent (0 or higher) is required if endPercent has value
     */
    "startPercent"?: number;
    /**
     * A endPercent is required if startPercent has value
     */
    "endPercent"?: number;
    /**
     * Must be a valid Hexadecimal Color Code
     */
    "color": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ScheduleDetail {
    "id"?: number;
    "scheduleEntry"?: ScheduleEntryReference;
    "dateStart"?: Date;
    "dateEnd"?: Date;
    "member"?: MemberReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ScheduleEntry {
    "id"?: number;
    "objectId"?: number;
    "name"?: string;
    /**
     * Activity schedule requires a member
     */
    "member"?: MemberReference;
    "where"?: ServiceLocationReference;
    "dateStart"?: Date;
    "dateEnd"?: Date;
    "reminder"?: ReminderReference;
    "status"?: ScheduleStatusReference;
    "type": ScheduleTypeReference;
    "span"?: ScheduleSpanReference;
    "doneFlag"?: boolean;
    "acknowledgedFlag"?: boolean;
    "ownerFlag"?: boolean;
    "allowScheduleConflictsFlag"?: boolean;
    "addMemberToProjectFlag"?: boolean;
    "projectRoleId"?: number;
    "mobileGuid"?: Guid;
    "closeDate"?: Date;
    "hours"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ScheduleEntryReference {
    "id"?: number;
    "description"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ScheduleReminderTime {
    "id"?: number;
    /**
     * Time is calculated in minutes
     */
    "time"?: number;
    "name"?: string;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ScheduleSpanReference {
    "id"?: number;
    "identifier"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ScheduleStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "showAsTentativeFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ScheduleStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ScheduleStopwatch {
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "agreement"?: AgreementReference;
    "billableOption"?: ScheduleStopwatch.BillableOptionEnum;
    "businessUnitId"?: number;
    "dateEntered"?: Date;
    "endTime"?: Date;
    "id"?: number;
    "internalNotes"?: string;
    "locationId"?: number;
    "member": MemberReference;
    "mobileGuid"?: Guid;
    "notes"?: string;
    "scheduleId": number;
    "scheduleMobileGuid"?: Guid;
    "startTime"?: Date;
    "status": ScheduleStopwatch.StatusEnum;
    "totalPauseTime"?: number;
    "workRole"?: WorkRoleReference;
    "workType"?: WorkTypeReference;
}
export namespace ScheduleStopwatch {
    type BillableOptionEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type StatusEnum = 'Reset' | 'Running' | 'Paused' | 'Stopped';
}
export interface ScheduleType {
    "id"?: number;
    "name": string;
    "identifier": string;
    "chargeCode"?: ChargeCodeReference;
    "where"?: ServiceLocationReference;
    "systemFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ScheduleTypeReference {
    "id"?: number;
    "identifier"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SecurityRole {
    "id"?: number;
    "name": string;
    "adminFlag"?: boolean;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SecurityRoleReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SecurityRoleSetting {
    "id"?: number;
    "addLevel"?: SecurityRoleSetting.AddLevelEnum;
    "editLevel"?: SecurityRoleSetting.EditLevelEnum;
    "deleteLevel"?: SecurityRoleSetting.DeleteLevelEnum;
    "inquireLevel"?: SecurityRoleSetting.InquireLevelEnum;
    "moduleFunctionName"?: string;
    "moduleFunctionDescription"?: string;
    "myAllFlag"?: boolean;
    "moduleFunctionIdentifier"?: string;
    "reportFlag"?: boolean;
    "restrictFlag"?: boolean;
    "customFlag"?: boolean;
    "moduleDescription"?: string;
    "moduleIdentifier"?: string;
    "moduleName"?: string;
    "sortOrder"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace SecurityRoleSetting {
    type AddLevelEnum = 'All' | 'My' | 'None';
    type EditLevelEnum = 'All' | 'My' | 'None';
    type DeleteLevelEnum = 'All' | 'My' | 'None';
    type InquireLevelEnum = 'All' | 'My' | 'None';
}
export interface Service {
    "id"?: number;
    "srNotify": Service.SrNotifyEnum;
    "scheduleSpan": Service.ScheduleSpanEnum;
    "hideDelimiterFlag"?: boolean;
    "allowCCFlag"?: boolean;
    "headerColor"?: string;
    "memberColor"?: string;
    "contactColor"?: string;
    "unknownColor"?: string;
    "calendarSetup"?: CalendarSetupReference;
    "headerColorDisableFlag"?: boolean;
    "memberColorDisableFlag"?: boolean;
    "contactColorDisableFlag"?: boolean;
    "unknownColorDisableFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Service {
    type SrNotifyEnum = 'None' | 'All' | 'NewRequestsOnly' | 'ClosedRequestsOnly' | 'NewAndClosedRequests';
    type ScheduleSpanEnum = 'Standard' | 'OfficeHours' | 'Overnight';
}
export interface ServiceCodeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ServiceEmailTemplate {
    "id"?: number;
    "type": ServiceEmailTemplate.TypeEnum;
    "serviceSurvey"?: ServiceSurveyReference;
    "serviceBoard"?: BoardReference;
    "useSenderFlag"?: boolean;
    /**
     * From fields (first name, last name, email address) are required if useSenderFlag is false.
     */
    "firstName"?: string;
    /**
     * From fields (first name, last name, email address) are required if useSenderFlag is false.
     */
    "lastName"?: string;
    /**
     * From fields (first name, last name, email address) are required if useSenderFlag is false.
     */
    "emailAddress"?: string;
    "subject"?: string;
    "body"?: string;
    "copySenderFlag"?: boolean;
    "tasksFlag"?: boolean;
    "resourceRecordsFlag"?: boolean;
    "externalContactNotifications"?: boolean;
    "internalContactNotifications"?: boolean;
    /**
     * serviceStatus is required if the email template type is "Specific".
     */
    "serviceStatus"?: ServiceStatusReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ServiceEmailTemplate {
    type TypeEnum = 'New' | 'Closed' | 'Other' | 'Specific' | 'RMA' | 'Invoice' | 'SalesOrder' | 'PurchaseOrder';
}
export interface ServiceEmailTemplateReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ServiceItemReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ServiceLocation {
    "id"?: number;
    "name": string;
    "where": ServiceLocation.WhereEnum;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ServiceLocation {
    type WhereEnum = 'OnSite' | 'Remote' | 'InHouse';
}
export interface ServiceLocationReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ServiceManger {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface ServiceNote {
    "id"?: number;
    "ticketId"?: number;
    "text"?: string;
    "detailDescriptionFlag"?: boolean;
    "internalAnalysisFlag"?: boolean;
    "resolutionFlag"?: boolean;
    "member"?: MemberReference;
    "contact"?: ContactReference;
    "customerUpdatedFlag"?: boolean;
    "processNotifications"?: boolean;
    "dateCreated"?: string;
    "createdBy"?: string;
    "internalFlag"?: boolean;
    "externalFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ServiceSignoff {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "visibleLogoFlag"?: boolean;
    "companyInfoFlag"?: boolean;
    "billingTermsFlag"?: boolean;
    "summaryFlag"?: boolean;
    "discussionFlag"?: boolean;
    /**
     * On add/post, if this is set to true but no value is set for task, task is defaulted to ServiceTasks.All
     */
    "taskFlag"?: boolean;
    /**
     * On add/post, if this is set but no value is set for taskFlag, taskFlag is set to true
     */
    "task"?: ServiceSignoff.TaskEnum;
    "configurationsFlag"?: boolean;
    "internalNotesFlag"?: boolean;
    "resolutionFlag"?: boolean;
    /**
     * On add/post, if any time related flag is set to true, this is also set to true
     */
    "timeFlag"?: boolean;
    "timeMemberFlag"?: boolean;
    "timeDateFlag"?: boolean;
    "timeStartEndFlag"?: boolean;
    "timeBillFlag"?: boolean;
    "timeHoursFlag"?: boolean;
    "timeRateFlag"?: boolean;
    "timeExtendedAmountFlag"?: boolean;
    "timeWorkTypeFlag"?: boolean;
    "timeAgreementFlag"?: boolean;
    "timeNotesFlag"?: boolean;
    "timeManualFlag"?: boolean;
    "timeManualEntry"?: number;
    "timeTaxFlag"?: boolean;
    /**
     * On add/post, if any expense related flag is set to true, this is also set to true
     */
    "expenseFlag"?: boolean;
    "expenseDateFlag"?: boolean;
    "expenseMemberFlag"?: boolean;
    "expenseTypeFlag"?: boolean;
    "expenseBillFlag"?: boolean;
    "expenseAmountFlag"?: boolean;
    "expenseAgreementFlag"?: boolean;
    "expenseNotesFlag"?: boolean;
    "expenseTaxFlag"?: boolean;
    "expenseManualFlag"?: boolean;
    "expenseManualEntry"?: number;
    /**
     * On add/post, if any product related flag is set to true, this is also set to true
     */
    "productFlag"?: boolean;
    "productDescriptionFlag"?: boolean;
    "productBillFlag"?: boolean;
    "productQuantityFlag"?: boolean;
    "productPriceFlag"?: boolean;
    "productExtendedAmountFlag"?: boolean;
    "productAgreementFlag"?: boolean;
    "productManualFlag"?: boolean;
    "productManualEntry"?: number;
    "productTaxFlag"?: boolean;
    "technicianSignoffFlag"?: boolean;
    /**
     * On add/post, if customerSignoffText.Length > 0, this is set to true
     */
    "customerSignoffTextFlag"?: boolean;
    "customerSignoffText"?: string;
    "customerSignoffFieldsFlag"?: boolean;
    /**
     * On add/post, if billingMethodsText.Length > 0, this is set to true
     */
    "billingMethodsTextFlag"?: boolean;
    "billingMethodsText"?: string;
    "creditCardFieldsFlag"?: boolean;
    "defaultFFFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ServiceSignoff {
    type TaskEnum = 'All' | 'Closed' | 'Open';
}
export interface ServiceSignoffReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ServiceSourceReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ServiceStatusReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ServiceSubTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ServiceSurvey {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "headerIncludeLogoFlag"?: boolean;
    "headerText"?: string;
    "headerTextVisibleFlag"?: boolean;
    "footerText"?: string;
    "footerTextVisibleFlag"?: boolean;
    "thankYouText"?: string;
    "notifyWho"?: GenericIdIdentifierReference;
    "notifyWhoVisibleFlag"?: boolean;
    "notifyMember"?: MemberReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ServiceSurveyQuestion {
    "id"?: number;
    "sequenceNumber"?: number;
    "type": ServiceSurveyQuestion.TypeEnum;
    "question": string;
    "options"?: Array<ServiceSurveyQuestionOption>;
    "includeFlag"?: boolean;
    "requiredFlag"?: boolean;
    "noAnswerPoints"?: number;
    "surveyId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ServiceSurveyQuestion {
    type TypeEnum = 'OpenEnded' | 'Selection';
}
export interface ServiceSurveyQuestionOption {
    "includeFlag"?: boolean;
    "caption": string;
    "points"?: number;
}
export interface ServiceSurveyReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ServiceTeam {
    "id"?: number;
    "name"?: string;
    "leader"?: MemberReference;
    "location"?: SystemLocationReference;
    "department"?: SystemDepartmentReference;
    "deleteNotifyFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface ServiceTeamReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * The Service (Ticket) Templates on which the Member is the assignedTo resource
 */
export interface ServiceTemplate {
    "id"?: number;
    "name": string;
    "board": BoardReference;
    "type"?: ServiceTypeReference;
    "item"?: ServiceItemReference;
    "subtype"?: ServiceSubTypeReference;
    "serviceLocation"?: ServiceLocationReference;
    "status": ServiceStatusReference;
    "source": ServiceSourceReference;
    "priority": PriorityReference;
    "team": ServiceTeamReference;
    "company"?: CompanyReference;
    "contact"?: ContactReference;
    "site"?: SiteReference;
    "assignedNotifyFlag"?: boolean;
    "location": SystemLocationReference;
    "department": SystemDepartmentReference;
    "summary": string;
    "problem"?: string;
    "hoursBudget"?: number;
    "internalAnalysis"?: string;
    "timeBillableFlag"?: boolean;
    "expenseBillableFlag"?: boolean;
    "purchaseOrderNumber"?: string;
    "reference"?: string;
    "billCompleteFlag"?: boolean;
    "billServiceSeparatelyFlag"?: boolean;
    "billingAmount"?: number;
    "billUnapprovedTimeAndExpensesFlag"?: boolean;
    "overrideFlag"?: boolean;
    "timeInvoiceFlag"?: boolean;
    "expenseInvoiceFlag"?: boolean;
    "productInvoiceFlag"?: boolean;
    "agreement"?: AgreementReference;
    "billingMethod": ServiceTemplate.BillingMethodEnum;
    "severity": ServiceTemplate.SeverityEnum;
    "impact": ServiceTemplate.ImpactEnum;
    "assignedBy": MemberReference;
    "scheduleDaysBefore"?: number;
    "serviceDaysBefore"?: number;
    "attachScheduleToNewServiceFlag"?: boolean;
    "templateFlag"?: boolean;
    "emailContactFlag"?: boolean;
    "emailResourceFlag"?: boolean;
    "emailCCFlag"?: boolean;
    "emailCC"?: string;
    "restrictDownpaymentFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export namespace ServiceTemplate {
    type BillingMethodEnum = 'ActualRates' | 'FixedFee' | 'NotToExceed' | 'OverrideRate';
    type SeverityEnum = 'Low' | 'Medium' | 'High';
    type ImpactEnum = 'Low' | 'Medium' | 'High';
}
/**
 * Required when notifyType is set to: "Create a Service Ticket"
 */
export interface ServiceTemplateReference {
    "id"?: number;
    "name"?: string;
    "summary"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ServiceTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SetupScreen {
    "id"?: number;
    "category"?: string;
    "name"?: string;
    "description"?: string;
    "moduleDescription"?: string;
    "moduleIdentifier"?: string;
    "moduleName"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Severity {
    "id"?: number;
    "name"?: string;
    "description": string;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ShipmentMethod {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "trackingUrl"?: string;
    "shippingType"?: ShipmentMethod.ShippingTypeEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace ShipmentMethod {
    type ShippingTypeEnum = 'None' | 'FedExTwoDay' | 'FedExPriority' | 'FedExGround' | 'UpsNextDay' | 'UpsSecondDay' | 'UpsGround' | 'CourierService' | 'UspsPriority' | 'UspsExpress';
}
export interface ShipmentMethodReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SicCodeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SiteReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Skill {
    "id"?: number;
    "name": string;
    "category": SkillCategoryReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SkillCategory {
    "id"?: number;
    "name": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SkillCategoryReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SkillReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Source {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "enteredBy"?: string;
    "dateEntered"?: Date;
}
export interface State {
    "id"?: number;
    "identifier": string;
    "name": string;
    "country"?: CountryReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface StateReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface StatusExternalIntegrationReference {
    "id"?: number;
    "identifier": string;
    "name": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface StatusWorkflow {
    "count"?: number;
    "reAssignToMember"?: MemberReference;
}
export interface StructureReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SubCategory {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "integrationXref"?: string;
    "category": ProductCategoryReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SuccessResponse {
    "success"?: boolean;
    "message"?: string;
}
export interface Survey {
    "id"?: number;
    "name": string;
    "instructions"?: string;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SurveyOption {
    "id"?: number;
    "caption": string;
    "points": number;
    "visibleflag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SurveyQuestion {
    "id"?: number;
    "survey"?: SurveyReference;
    "fieldType": SurveyQuestion.FieldTypeEnum;
    "entryType": SurveyQuestion.EntryTypeEnum;
    "sequenceNumber": number;
    "question": string;
    "numberOfDecimals"?: number;
    "requiredFlag"?: boolean;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace SurveyQuestion {
    type FieldTypeEnum = 'Button' | 'Checkbox' | 'Currency' | 'Date' | 'Hyperlink' | 'IPAddress' | 'Number' | 'Password' | 'Percent' | 'Text' | 'TextArea';
    type EntryTypeEnum = 'EntryField' | 'List' | 'Option';
}
export interface SurveyQuestionReference {
    "id"?: number;
    "question"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SurveyQuestionValue {
    "id"?: number;
    "survey"?: SurveyReference;
    "question"?: SurveyQuestionReference;
    "value": string;
    "defaultFlag"?: boolean;
    "pointValue"?: number;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SurveyReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SurveyResult {
    "id"?: number;
    "ticketId": number;
    "emailAddress"?: string;
    "footerResponse"?: string;
    "contactMeFlag"?: boolean;
    "contact"?: ContactReference;
    "results"?: Array<SurveyResultDetail>;
    "totalPoints"?: number;
    "company"?: CompanyReference;
    "surveyId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SurveyResultDetail {
    "questionId": number;
    /**
     * If question type is Selection, this should be the option array index
     */
    "answer"?: string;
}
export interface SystemDepartmentReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SystemLocationReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface SystemMenuEntryReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Task {
    "id"?: number;
    "ticketId"?: number;
    "notes"?: string;
    "closedFlag"?: boolean;
    "priority"?: number;
    "schedule"?: ScheduleEntryReference;
    "code"?: ServiceCodeReference;
    "resolution"?: string;
    "childScheduleAction"?: Task.ChildScheduleActionEnum;
    "childTicketId"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Task {
    type ChildScheduleActionEnum = 'Transfer' | 'Delete' | 'Done';
}
export interface TaxCode {
    "id"?: number;
    "identifier": string;
    "description": string;
    "invoiceCaption": string;
    "country"?: CountryReference;
    "effectiveDate": Date;
    "defaultFlag"?: boolean;
    "displayOnInvoiceFlag"?: boolean;
    "canadaCalculateGSTFlag"?: boolean;
    "cancelDate"?: Date;
    "levelOneRate"?: number;
    "levelOneRateType"?: TaxCode.LevelOneRateTypeEnum;
    "levelOneTaxableMax"?: number;
    "levelOneCaption"?: string;
    "levelOneTaxCodeXref"?: string;
    "levelOneAgencyXref"?: string;
    "levelOneServicesFlag"?: boolean;
    "levelOneExpensesFlag"?: boolean;
    "levelOneProductsFlag"?: boolean;
    "levelOneApplySingleUnitFlag"?: boolean;
    "levelOneApplySingleUnitMin"?: number;
    "levelOneApplySingleUnitMax"?: number;
    "levelTwoRate"?: number;
    "levelTwoRateType"?: TaxCode.LevelTwoRateTypeEnum;
    "levelTwoTaxableMax"?: number;
    "levelTwoCaption"?: string;
    "levelTwoTaxCodeXref"?: string;
    "levelTwoAgencyXref"?: string;
    "levelTwoServicesFlag"?: boolean;
    "levelTwoExpensesFlag"?: boolean;
    "levelTwoProductsFlag"?: boolean;
    "levelTwoApplySingleUnitFlag"?: boolean;
    "levelTwoApplySingleUnitMin"?: number;
    "levelTwoApplySingleUnitMax"?: number;
    "levelThreeRate"?: number;
    "levelThreeRateType"?: TaxCode.LevelThreeRateTypeEnum;
    "levelThreeTaxableMax"?: number;
    "levelThreeCaption"?: string;
    "levelThreeTaxCodeXref"?: string;
    "levelThreeAgencyXref"?: string;
    "levelThreeServicesFlag"?: boolean;
    "levelThreeExpensesFlag"?: boolean;
    "levelThreeProductsFlag"?: boolean;
    "levelThreeApplySingleUnitFlag"?: boolean;
    "levelThreeApplySingleUnitMin"?: number;
    "levelThreeApplySingleUnitMax"?: number;
    "levelFourRate"?: number;
    "levelFourRateType"?: TaxCode.LevelFourRateTypeEnum;
    "levelFourTaxableMax"?: number;
    "levelFourCaption"?: string;
    "levelFourTaxCodeXref"?: string;
    "levelFourAgencyXref"?: string;
    "levelFourServicesFlag"?: boolean;
    "levelFourExpensesFlag"?: boolean;
    "levelFourProductsFlag"?: boolean;
    "levelFourApplySingleUnitFlag"?: boolean;
    "levelFourApplySingleUnitMin"?: number;
    "levelFourApplySingleUnitMax"?: number;
    "levelFiveRate"?: number;
    "levelFiveRateType"?: TaxCode.LevelFiveRateTypeEnum;
    "levelFiveTaxableMax"?: number;
    "levelFiveCaption"?: string;
    "levelFiveTaxCodeXref"?: string;
    "levelFiveAgencyXref"?: string;
    "levelFiveServicesFlag"?: boolean;
    "levelFiveExpensesFlag"?: boolean;
    "levelFiveProductsFlag"?: boolean;
    "levelFiveApplySingleUnitFlag"?: boolean;
    "levelFiveApplySingleUnitMin"?: number;
    "levelFiveApplySingleUnitMax"?: number;
    "workRoleIds"?: Array<number>;
    "addAllWorkRoles"?: boolean;
    "removeAllWorkRoles"?: boolean;
    "expenseTypeIds"?: Array<number>;
    "addAllExpenseTypes"?: boolean;
    "removeAllExpenseTypes"?: boolean;
    "productTypeIds"?: Array<number>;
    "addAllProductTypes"?: boolean;
    "removeAllProductTypes"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace TaxCode {
    type LevelOneRateTypeEnum = 'Amount' | 'Percent';
    type LevelTwoRateTypeEnum = 'Amount' | 'Percent';
    type LevelThreeRateTypeEnum = 'Amount' | 'Percent';
    type LevelFourRateTypeEnum = 'Amount' | 'Percent';
    type LevelFiveRateTypeEnum = 'Amount' | 'Percent';
}
/**
 * New companies will be created with the default tax code unless otherwise specified.
 */
export interface TaxCodeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface TaxCodeXRef {
    "id"?: number;
    "description": string;
    "defaultFlag"?: boolean;
    "levelOne"?: TaxCodeXRef.LevelOneEnum;
    "levelTwo"?: TaxCodeXRef.LevelTwoEnum;
    "levelThree"?: TaxCodeXRef.LevelThreeEnum;
    "levelFour"?: TaxCodeXRef.LevelFourEnum;
    "levelFive"?: TaxCodeXRef.LevelFiveEnum;
    "taxCode"?: TaxCodeReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace TaxCodeXRef {
    type LevelOneEnum = 'NonTaxable' | 'Taxable';
    type LevelTwoEnum = 'NonTaxable' | 'Taxable';
    type LevelThreeEnum = 'NonTaxable' | 'Taxable';
    type LevelFourEnum = 'NonTaxable' | 'Taxable';
    type LevelFiveEnum = 'NonTaxable' | 'Taxable';
}
export interface TaxIntegration {
    "taxIntegrationType"?: TaxIntegration.TaxIntegrationTypeEnum;
    "id"?: number;
    "accountNumber"?: string;
    "licenseKey"?: string;
    "serviceUrl"?: string;
    "companyCode"?: string;
    "timeTaxCode"?: string;
    "expenseTaxCode"?: string;
    "productTaxCode"?: string;
    "invoiceAmountTaxCode"?: string;
    "enabledFlag"?: boolean;
    "commitTransactionsFlag"?: boolean;
    "salesInvoiceFlag"?: boolean;
    "freightTaxCode"?: string;
    "accountingIntegrationFlag"?: boolean;
    "taxLineFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace TaxIntegration {
    type TaxIntegrationTypeEnum = 'Avalara';
}
export interface Team {
    "id"?: number;
    "type": Team.TypeEnum;
    "member"?: MemberReference;
    "salesTeam"?: SalesTeamReference;
    "commissionPercent"?: number;
    "referralFlag"?: boolean;
    "opportunityId"?: number;
    "responsibleFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Team {
    type TypeEnum = 'Individual' | 'Team';
}
export interface TeamMember {
    "id"?: number;
    "board"?: BoardReference;
    "team": ServiceTeamReference;
    "member": MemberReference;
    "teamLeaderFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface TeamRole {
    "id"?: number;
    "name": string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface TeamRoleReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Ticket {
    "id"?: number;
    "summary": string;
    "recordType"?: Ticket.RecordTypeEnum;
    "board"?: BoardReference;
    "status"?: ServiceStatusReference;
    "project"?: ProjectReference;
    "phase"?: ProjectPhaseReference;
    "wbsCode"?: string;
    "company": CompanyReference;
    "site"?: SiteReference;
    "siteName"?: string;
    "addressLine1"?: string;
    "addressLine2"?: string;
    "city"?: string;
    "stateIdentifier"?: string;
    "zip"?: string;
    "country"?: CountryReference;
    "contact"?: ContactReference;
    "contactName"?: string;
    "contactPhoneNumber"?: string;
    "contactPhoneExtension"?: string;
    "contactEmailAddress"?: string;
    "type"?: ServiceTypeReference;
    "subType"?: ServiceSubTypeReference;
    "item"?: ServiceItemReference;
    "team"?: ServiceTeamReference;
    "owner"?: MemberReference;
    "priority"?: PriorityReference;
    "serviceLocation"?: ServiceLocationReference;
    "source"?: ServiceSourceReference;
    "requiredDate"?: Date;
    "budgetHours"?: number;
    "opportunity"?: OpportunityReference;
    "agreement"?: AgreementReference;
    "severity"?: Ticket.SeverityEnum;
    "impact"?: Ticket.ImpactEnum;
    "externalXRef"?: string;
    "poNumber"?: string;
    "knowledgeBaseCategoryId"?: number;
    "knowledgeBaseSubCategoryId"?: number;
    "allowAllClientsPortalView"?: boolean;
    "customerUpdatedFlag"?: boolean;
    "automaticEmailContactFlag"?: boolean;
    "automaticEmailResourceFlag"?: boolean;
    "automaticEmailCcFlag"?: boolean;
    "automaticEmailCc"?: string;
    /**
     * Only available for POST, will not be returned in the response
     */
    "initialDescription"?: string;
    /**
     * Only available for POST, will not be returned in the response
     */
    "initialInternalAnalysis"?: string;
    /**
     * Only available for POST, will not be returned in the response
     */
    "initialResolution"?: string;
    "contactEmailLookup"?: string;
    /**
     * Can be set to false to skip notification processing when adding or updating a ticket (Defaults to True)
     */
    "processNotifications"?: boolean;
    "skipCallback"?: boolean;
    "closedDate"?: string;
    "closedBy"?: string;
    "closedFlag"?: boolean;
    "dateEntered"?: string;
    "enteredBy"?: string;
    "actualHours"?: number;
    "approved"?: boolean;
    "subBillingMethod"?: Ticket.SubBillingMethodEnum;
    "subBillingAmount"?: number;
    "subDateAccepted"?: string;
    "dateResolved"?: string;
    "dateResplan"?: string;
    "dateResponded"?: string;
    "resolveMinutes"?: number;
    "resPlanMinutes"?: number;
    "respondMinutes"?: number;
    "isInSla"?: boolean;
    "knowledgeBaseLinkId"?: number;
    "resources"?: string;
    "parentTicketId"?: number;
    "hasChildTicket"?: boolean;
    "knowledgeBaseLinkType"?: Ticket.KnowledgeBaseLinkTypeEnum;
    "billTime"?: Ticket.BillTimeEnum;
    "billExpenses"?: Ticket.BillExpensesEnum;
    "billProducts"?: Ticket.BillProductsEnum;
    "predecessorType"?: Ticket.PredecessorTypeEnum;
    "predecessorId"?: number;
    "predecessorClosedFlag"?: boolean;
    "lagDays"?: number;
    "lagNonworkingDaysFlag"?: boolean;
    "estimatedStartDate"?: Date;
    "duration"?: number;
    "locationId"?: number;
    "businessUnitId"?: number;
    "mobileGuid"?: Guid;
    "sla"?: SLAReference;
    "currency"?: CurrencyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export namespace Ticket {
    type RecordTypeEnum = 'ServiceTicket' | 'ProjectTicket' | 'ProjectIssue';
    type SeverityEnum = 'Low' | 'Medium' | 'High';
    type ImpactEnum = 'Low' | 'Medium' | 'High';
    type SubBillingMethodEnum = 'ActualRates' | 'FixedFee' | 'NotToExceed' | 'OverrideRate';
    type KnowledgeBaseLinkTypeEnum = 'ServiceTicket' | 'ProjectTicket' | 'ProjectIssue' | 'KnowledgeBaseArticle' | 'Time' | 'Activity';
    type BillTimeEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillExpensesEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type BillProductsEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type PredecessorTypeEnum = 'Ticket' | 'Phase';
}
export interface TicketMerge {
    "mergeTicketIds": Array<number>;
    "status": ServiceStatusReference;
}
export interface TicketReference {
    "id"?: number;
    "summary"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface TicketStopwatch {
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "agreement"?: AgreementReference;
    "billableOption"?: TicketStopwatch.BillableOptionEnum;
    "businessUnitId"?: number;
    "dateEntered"?: Date;
    "endTime"?: Date;
    "id"?: number;
    "internalNotes"?: string;
    "locationId"?: number;
    "member": MemberReference;
    "mobileGuid"?: Guid;
    "notes"?: string;
    "serviceStatus"?: ServiceStatusReference;
    "startTime"?: Date;
    "status": TicketStopwatch.StatusEnum;
    "ticket": TicketReference;
    "ticketMobileGuid"?: Guid;
    "totalPauseTime"?: number;
    "workRole"?: WorkRoleReference;
    "workType"?: WorkTypeReference;
    "showNotesInDiscussionFlag"?: boolean;
    "showNotesInInternalFlag"?: boolean;
    "showNotesInResolutionFlag"?: boolean;
    "emailNotesToContactFlag"?: boolean;
    "emailNotesToResourcesFlag"?: boolean;
}
export namespace TicketStopwatch {
    type BillableOptionEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type StatusEnum = 'Reset' | 'Running' | 'Paused' | 'Stopped';
}
export interface TicketSync {
    "id"?: number;
    "name": string;
    "vendorType": TicketSync.VendorTypeEnum;
    "integratorLogin": IntegratorLoginReference;
    "company": CompanyReference;
    "url": string;
    "userName"?: string;
    "password"?: string;
    "psg"?: string;
    "problemDescription"?: boolean;
    "internalAnalysis"?: boolean;
    "resolution"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace TicketSync {
    type VendorTypeEnum = 'Zenith' | 'Kaseya';
}
export interface TimeAccrual {
    "id"?: number;
    "location"?: SystemLocationReference;
    /**
     * if vacationFlag is set to false, system will clear out or ingore the values of vacationAvailableType, vacationCarryoverAllowedFlag, vacationCarryoverLimit
     */
    "vacationFlag"?: boolean;
    "vacationAvailableType"?: TimeAccrual.VacationAvailableTypeEnum;
    "vacationCarryoverAllowedFlag"?: boolean;
    "vacationCarryoverLimit"?: number;
    /**
     * if sickFlag is set to false, system will clear out or ignore the values of sickAvailableType, sickCarryoverAllowedFlag, sickCarryoverLimit
     */
    "sickFlag"?: boolean;
    "sickAvailableType"?: TimeAccrual.SickAvailableTypeEnum;
    "sickCarryoverAllowedFlag"?: boolean;
    "sickCarryoverLimit"?: number;
    /**
     * if ptoFlag is set to false, system will clear out or ignore the values of ptoAvailableType, ptoCarryoverAllowedFlag, ptoCarryoverLimit
     */
    "ptoFlag"?: boolean;
    "ptoAvailableType"?: TimeAccrual.PtoAvailableTypeEnum;
    "ptoCarryoverAllowedFlag"?: boolean;
    "ptoCarryoverLimit"?: number;
    /**
     * if holidayFlag is set to false, system will clear out or ignore the values of holidayAvailableType, holidayCarryoverAllowedFlag, holidayCarryoverLimit
     */
    "holidayFlag"?: boolean;
    "holidayAvailableType"?: TimeAccrual.HolidayAvailableTypeEnum;
    "holidayCarryoverAllowedFlag"?: boolean;
    "holidayCarryoverLimit"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace TimeAccrual {
    type VacationAvailableTypeEnum = 'AnniversaryYear' | 'CalendarYear';
    type SickAvailableTypeEnum = 'AnniversaryYear' | 'CalendarYear';
    type PtoAvailableTypeEnum = 'AnniversaryYear' | 'CalendarYear';
    type HolidayAvailableTypeEnum = 'AnniversaryYear' | 'CalendarYear';
}
export interface TimeAccrualDetail {
    "id"?: number;
    /**
     * Available types are: Holiday, PTO, Sick and Vacation.
     */
    "accrualType": TimeAccrualDetail.AccrualTypeEnum;
    "startYear": number;
    "endYear": number;
    "hours": number;
    "timeAccrual"?: TimeAccrualReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace TimeAccrualDetail {
    type AccrualTypeEnum = 'Holiday' | 'PTO' | 'Sick' | 'Vacation';
}
export interface TimeAccrualReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface TimeEntry {
    "id"?: number;
    /**
     * If chargeToId is not specified, we asume you enter time against the company specified
     */
    "company"?: CompanyReference;
    /**
     * If chargeToId is not specified, we asume you enter time against the company specified
     */
    "chargeToId"?: number;
    /**
     * If chargeToId is not specified, we asume you enter time against the company specified
     */
    "chargeToType"?: TimeEntry.ChargeToTypeEnum;
    "member"?: MemberReference;
    "locationId"?: number;
    "businessUnitId"?: number;
    "workType"?: WorkTypeReference;
    "workRole"?: WorkRoleReference;
    "agreement"?: AgreementReference;
    "timeStart": Date;
    "timeEnd"?: Date;
    "hoursDeduct"?: number;
    "actualHours"?: number;
    "billableOption"?: TimeEntry.BillableOptionEnum;
    "notes"?: string;
    "internalNotes"?: string;
    "addToDetailDescriptionFlag"?: boolean;
    "addToInternalAnalysisFlag"?: boolean;
    "addToResolutionFlag"?: boolean;
    /**
     * This is an action flag. To update this value use the /service/tickets endpoint automaticEmailResourceFlag field
     */
    "emailResourceFlag"?: boolean;
    /**
     * This is an action flag. To update this value use the /service/tickets endpoint automaticEmailContactFlag field
     */
    "emailContactFlag"?: boolean;
    /**
     * This is an action flag. To update this value use the /service/tickets endpoint automaticEmailCcFlag field
     */
    "emailCcFlag"?: boolean;
    /**
     * To update this value use the /service/tickets endpoint automaticEmailCc field
     */
    "emailCc"?: string;
    "hoursBilled"?: number;
    "enteredBy"?: string;
    "dateEntered"?: Date;
    "invoice"?: InvoiceReference;
    "mobileGuid"?: Guid;
    /**
     * This field may only be Updated, it is defaulted on Create
     */
    "hourlyRate"?: number;
    "timeSheet"?: TimeSheetReference;
    "status"?: TimeEntry.StatusEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export namespace TimeEntry {
    type ChargeToTypeEnum = 'ServiceTicket' | 'ProjectTicket' | 'ChargeCode' | 'Activity';
    type BillableOptionEnum = 'Billable' | 'DoNotBill' | 'NoCharge' | 'NoDefault';
    type StatusEnum = 'Open' | 'Rejected' | 'PendingApproval' | 'ErrorsCorrected' | 'PendingProjectApproval' | 'ApprovedByTierOne' | 'RejectBySecondTier' | 'ApprovedByTierTwo' | 'ReadyToBill' | 'Billed' | 'WrittenOff' | 'BilledAgreement';
}
export interface TimeEntryReference {
    "id"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface TimeExpense {
    "id"?: number;
    "tier1ApprovalFlag"?: boolean;
    "tier2ApprovalFlag"?: boolean;
    "disableTimeEntryFlag"?: boolean;
    "requireTimeNoteFlag"?: boolean;
    "requireExpenseNoteFlag"?: boolean;
    "roundingFactor"?: number;
    "invoiceStart"?: number;
    "internalCompany": CompanyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface TimePeriod {
    "id"?: number;
    "timePeriodSetup": TimePeriodSetupReference;
    "period"?: number;
    "startDate"?: string;
    "endDate"?: string;
    "deadlineDate"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface TimePeriodSetup {
    "id"?: number;
    "periodApplyTo": TimePeriodSetup.PeriodApplyToEnum;
    "year": number;
    "numberFuturePeriods": number;
    "type": TimePeriodSetup.TypeEnum;
    "description"?: string;
    "firstPeriodEndDate": string;
    /**
     * Only needed when type is monthly
     */
    "monthlyPeriodEnds"?: number;
    /**
     * Only needed when type is semi-monthly
     */
    "semiMonthlyFirstPeriod"?: number;
    /**
     * Only needed when type is semi-monthly
     */
    "semiMonthlySecondPeriod"?: number;
    "semiMonthlyLastDayFlag"?: boolean;
    /**
     * Only needed when type is monthly
     */
    "lastDayFlag"?: boolean;
    "daysPastEndDate": number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace TimePeriodSetup {
    type PeriodApplyToEnum = 'Time' | 'Expense' | 'Both';
    type TypeEnum = 'Weekly' | 'BiWeekly' | 'SemiMonthly' | 'Monthly';
}
export interface TimePeriodSetupDefaults {
}
export interface TimePeriodSetupReference {
    "id"?: number;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface TimeSheet {
    "id"?: number;
    "member"?: MemberReference;
    "year"?: number;
    "period"?: number;
    "dateStart"?: Date;
    "dateEnd"?: Date;
    "status"?: TimeSheet.StatusEnum;
    "hours"?: number;
    "deadline"?: Date;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace TimeSheet {
    type StatusEnum = 'Open' | 'Rejected' | 'PendingApproval' | 'ErrorsCorrected' | 'PendingProjectApproval' | 'ApprovedByTierOne' | 'RejectBySecondTier' | 'ApprovedByTierTwo' | 'ReadyToBill' | 'Billed' | 'WrittenOff' | 'BilledAgreement';
}
export interface TimeSheetReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface TimeZone {
    "id"?: number;
    "name"?: string;
    /**
     * The hours offset (+/-)
     */
    "offset"?: number;
    "startDate"?: Date;
    "endDate"?: Date;
    "daylightSavingsFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * The system level time zone to which this setup is associated
 */
export interface TimeZoneReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface TimeZoneSetup {
    "id"?: number;
    "name": string;
    /**
     * The system level time zone to which this setup is associated
     */
    "timeZone": TimeZoneReference;
    /**
     * The hours offset from UTC (+/-)
     */
    "offset"?: number;
    /**
     * Identifies the default system time zone setup
     */
    "defaultFlag"?: boolean;
    "daylightSavingsFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
/**
 * The specified system time zone for the Company
 */
export interface TimeZoneSetupReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface TodayPageCategory {
    "id"?: number;
    "name": string;
    "sortOrder": number;
    "location"?: SystemLocationReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Token {
    "publicKey"?: string;
    "privateKey"?: string;
    "expiration"?: string;
}
export interface Track {
    "id"?: number;
    "trackId"?: number;
    "name": string;
    "startDate"?: string;
    "endDate"?: string;
    "actionTaken"?: number;
    "actionRemaining"?: number;
    "startedBy"?: string;
    "company"?: CompanyReference;
    "contact"?: ContactReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
    "inactiveFlag"?: boolean;
    "notifyActionIds"?: Array<number>;
}
export interface TrackAction {
    "id"?: number;
    "notifyType": TrackAction.NotifyTypeEnum;
    "serviceTemplate"?: ServiceTemplateReference;
    "specificMemberTo"?: MemberReference;
    "emailRecipient"?: string;
    "specificMemberFrom"?: MemberReference;
    "emailFrom"?: string;
    "subject"?: string;
    "notes"?: string;
    "activityType"?: ActivityTypeReference;
    "activityStatus"?: ActivityStatusReference;
    "companyStatus"?: CompanyStatusReference;
    "track"?: TrackReference;
    "group"?: GroupReference;
    "ccContact"?: ContactReference;
    "bccContact"?: ContactReference;
    "daysToExecute"?: number;
    "notifyWho"?: NotificationRecipientReference;
    "notifyFrom"?: NotificationRecipientReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace TrackAction {
    type NotifyTypeEnum = 'AddToGroup' | 'ChangeCompanyStatus' | 'CreateActivity' | 'CreateServiceTicket' | 'SendEmail';
}
/**
 * Required when notifyType is set to: "Attach Track"
 */
export interface TrackReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Type {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface UnitOfMeasure {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "defaultFlag"?: boolean;
    "uomScheduleXref"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface UnitOfMeasureReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface UnpostedExpense {
    "id"?: number;
    "locationId"?: number;
    "departmentId"?: number;
    "company"?: CompanyReference;
    "accountNumber"?: string;
    "creditAccount"?: string;
    "expenseDetailId"?: number;
    "expenseType"?: ExpenseTypeReference;
    "classification"?: UnpostedExpense.ClassificationEnum;
    "glType"?: UnpostedExpense.GlTypeEnum;
    "member"?: MemberReference;
    "dateExpense"?: Date;
    "chargeCode"?: ChargeCodeReference;
    "chargeDescription"?: string;
    "inPolicy"?: boolean;
    "paymentMethod"?: PaymentMethodReference;
    "currency"?: CurrencyReference;
    "total"?: number;
    "billableAmount"?: number;
    "nonBillableAmount"?: number;
    "agreement"?: AgreementReference;
    "agreementAmountCovered"?: number;
    "ticket"?: TicketReference;
    "project"?: ProjectReference;
    "projectPhase"?: ProjectPhaseReference;
    "taxCode"?: TaxCodeReference;
    /**
     * Used to determine if Avalara tax is enabled.
     */
    "avalaraTaxFlag"?: boolean;
    "itemTaxableFlag"?: boolean;
    "salesTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the state level.
     */
    "stateTaxFlag"?: boolean;
    "stateTaxXref"?: string;
    "stateTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the county level.
     */
    "countyTaxFlag"?: boolean;
    "countyTaxXref"?: string;
    "countyTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the city level.
     */
    "cityTaxFlag"?: boolean;
    "cityTaxXref"?: string;
    "cityTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the country level.
     */
    "countryTaxFlag"?: boolean;
    "countryTaxXref"?: string;
    "countryTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the composite level.
     */
    "compositeTaxFlag"?: boolean;
    "compositeTaxXref"?: string;
    "compositeTaxAmount"?: number;
    "dateClosed"?: Date;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace UnpostedExpense {
    type ClassificationEnum = 'NonReimbursable' | 'Reimbursable' | 'Personal';
    type GlTypeEnum = 'AP' | 'AR' | 'EE' | 'EI' | 'EO' | 'IA' | 'IT' | 'P' | 'PF' | 'R' | 'RA' | 'RD' | 'RE' | 'RP' | 'ST' | 'SD' | 'ET' | 'RM' | 'FT' | 'PT';
}
export interface UnpostedInvoice {
    "id"?: number;
    "billingLogId"?: number;
    "locationId"?: number;
    "departmentId"?: number;
    "company"?: CompanyReference;
    "accountNumber"?: string;
    "billToCompany"?: CompanyReference;
    "billToSite"?: SiteReference;
    "shipToCompany"?: CompanyReference;
    "shipToSite"?: SiteReference;
    "invoiceNumber"?: string;
    "invoiceDate"?: Date;
    "invoiceType"?: UnpostedInvoice.InvoiceTypeEnum;
    "description"?: string;
    "billingTerms"?: BillingTermsReference;
    "dueDays"?: string;
    "dueDate"?: Date;
    "currency"?: CurrencyReference;
    "subTotal"?: number;
    "total"?: number;
    "invoiceTaxableFlag"?: boolean;
    "taxCode"?: TaxCodeReference;
    /**
     * Used to determine if Avalara tax is enabled.
     */
    "avalaraTaxFlag"?: boolean;
    "itemTaxableFlag"?: boolean;
    "salesTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the state level.
     */
    "stateTaxFlag"?: boolean;
    "stateTaxXref"?: string;
    "stateTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the county level.
     */
    "countyTaxFlag"?: boolean;
    "countyTaxXref"?: string;
    "countyTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the city level.
     */
    "cityTaxFlag"?: boolean;
    "cityTaxXref"?: string;
    "cityTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the country level.
     */
    "countryTaxFlag"?: boolean;
    "countryTaxXref"?: string;
    "countryTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the composite level.
     */
    "compositeTaxFlag"?: boolean;
    "compositeTaxXref"?: string;
    "compositeTaxAmount"?: number;
    "createdBy"?: string;
    "dateClosed"?: Date;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace UnpostedInvoice {
    type InvoiceTypeEnum = 'Agreement' | 'CreditMemo' | 'DownPayment' | 'Miscellaneous' | 'Progress' | 'Standard';
}
export interface UnpostedProcurement {
    "id"?: number;
    "description"?: string;
    "locationId"?: number;
    "departmentId"?: number;
    "procurementType"?: UnpostedProcurement.ProcurementTypeEnum;
    "purchaseOrder"?: PurchaseOrderReference;
    "purchaseDate"?: Date;
    "trackingNumber"?: string;
    "billingTerms"?: BillingTermsReference;
    "currency"?: CurrencyReference;
    "total"?: number;
    "taxCode"?: TaxCodeReference;
    /**
     * Used to determine if Avalara tax is enabled.
     */
    "avalaraTaxFlag"?: boolean;
    "itemTaxableFlag"?: boolean;
    "purchaseOrderTaxableFlag"?: boolean;
    /**
     * Set to true if transaction is taxable at the state level.
     */
    "stateTaxFlag"?: boolean;
    "stateTaxXref"?: string;
    "stateTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the county level.
     */
    "countyTaxFlag"?: boolean;
    "countyTaxXref"?: string;
    "countyTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the city level.
     */
    "cityTaxFlag"?: boolean;
    "cityTaxXref"?: string;
    "cityTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the country level.
     */
    "countryTaxFlag"?: boolean;
    "countryTaxXref"?: string;
    "countryTaxAmount"?: number;
    /**
     * Set to true if transaction is taxable at the composite level.
     */
    "compositeTaxFlag"?: boolean;
    "compositeTaxXref"?: string;
    "compositeTaxAmount"?: number;
    "taxTotal"?: number;
    "customer"?: CompanyReference;
    "vendor"?: CompanyReference;
    "vendorAccountNumber"?: string;
    "vendorInvoiceNumber"?: string;
    "vendorInvoiceDate"?: Date;
    "taxFreightFlag"?: boolean;
    "freightTaxTotal"?: number;
    "freightCost"?: number;
    "dateClosed"?: Date;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace UnpostedProcurement {
    type ProcurementTypeEnum = 'Purchase' | 'Adjustment' | 'Transfer';
}
export interface UserDefinedField {
    /**
     * ID of the custom user defined field
     */
    "id"?: number;
    /**
     * Id of the Pod where the custom field will be placed
     */
    "podId": number;
    /**
     * Field caption
     */
    "caption": string;
    /**
     * Must be between 1 and 50.  This defines the order in which the custom fields will appear
     */
    "sequenceNumber": number;
    /**
     * Help text to accompany the custom field
     */
    "helpText"?: string;
    "fieldTypeIdentifier": UserDefinedField.FieldTypeIdentifierEnum;
    /**
     * Only valid for Number or percent
     */
    "numberDecimals"?: number;
    "entryTypeIdentifier"?: UserDefinedField.EntryTypeIdentifierEnum;
    "requiredFlag"?: boolean;
    "displayOnScreenFlag"?: boolean;
    "readOnlyFlag"?: boolean;
    /**
     * Denotes that this custom field is included on a list view
     */
    "listViewFlag"?: boolean;
    /**
     * Only available with Button Field Type. Required when entryTypeIdentifier is button
     */
    "buttonUrl"?: string;
    "options"?: Array<UserDefinedFieldOption>;
    "businessUnitIds"?: Array<number>;
    "locationIds"?: Array<number>;
    "addAllBusinessUnits"?: boolean;
    "removeAllBusinessUnits"?: boolean;
    "addAllLocations"?: boolean;
    "removeAllLocations"?: boolean;
    /**
     * Date in UTC the custom field was created
     */
    "dateCreated"?: Date;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace UserDefinedField {
    type FieldTypeIdentifierEnum = 'Button' | 'Checkbox' | 'Date' | 'Hyperlink' | 'Number' | 'Percent' | 'Text' | 'TextArea';
    type EntryTypeIdentifierEnum = 'EntryField' | 'List' | 'Option';
}
export interface UserDefinedFieldOption {
    "id"?: number;
    "optionValue": string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "sortOrder"?: number;
}
/**
 * If your trigger is for custom fields, this will populate with the custom field associated with the option
 */
export interface UserDefinedFieldReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface ValidatePortalRequest {
    "email": string;
    "password": string;
}
export interface ValidatePortalResponse {
    "success"?: boolean;
    "contactId"?: number;
}
export interface ValidationError {
    "code"?: string;
    "message"?: string;
    "resource"?: string;
    "field"?: string;
    "details"?: string;
}
export interface Warehouse {
    "id"?: number;
    "name": string;
    "company"?: CompanyReference;
    "location": SystemLocationReference;
    "department"?: SystemDepartmentReference;
    "manager"?: MemberReference;
    "site"?: SiteReference;
    "locationXref"?: string;
    "locationDefaultFlag"?: boolean;
    "overallDefaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "currency"?: CurrencyReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WarehouseBin {
    "id"?: number;
    "name": string;
    "warehouse": WarehouseReference;
    "location"?: SystemLocationReference;
    "department"?: SystemDepartmentReference;
    "minQuantity"?: number;
    "maxQuantity"?: number;
    "overflowBin"?: WarehouseBinReference;
    "manager"?: MemberReference;
    "length"?: number;
    "width"?: number;
    "height"?: number;
    "weight"?: number;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "transferBin"?: WarehouseBinReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WarehouseBinReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WarehouseReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WorkRole {
    "id"?: number;
    "name": string;
    "hourlyRate"?: number;
    "integrationXref"?: string;
    "inactiveFlag"?: boolean;
    "addAllLocations"?: boolean;
    "removeAllLocations"?: boolean;
    /**
     * Used only on create to add the work role to all agreement and agreement type exclusion lists
     */
    "addAllAgreementExclusions"?: boolean;
    "locationIds"?: Array<number>;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WorkRoleExemption {
    "id"?: number;
    "workRole": WorkRoleReference;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelOneFlag"?: boolean;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelTwoFlag"?: boolean;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelThreeFlag"?: boolean;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelFourFlag"?: boolean;
    /**
     * At least one level flag is required -- levelOneFlag, levelTwoFlag, levelThreeFlag, levelFourFlag, and/or levelFiveFlag
     */
    "levelFiveFlag"?: boolean;
    "taxCode"?: TaxCodeReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WorkRoleLocation {
    "id"?: number;
    "location": SystemLocationReference;
    "hourlyRate"?: number;
    "workRole"?: WorkRoleReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WorkRoleReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WorkType {
    "id"?: number;
    "name": string;
    "billTime": WorkType.BillTimeEnum;
    "rateType": WorkType.RateTypeEnum;
    "rate": number;
    "hoursMin"?: number;
    "hoursMax"?: number;
    "roundBillHoursTo"?: number;
    "externalIntegrationXRef"?: ExternalWorkTypeIntegrationReference;
    "accrualType"?: WorkType.AccrualTypeEnum;
    "inactiveFlag"?: boolean;
    "overallDefaultFlag"?: boolean;
    "activityDefaultFlag"?: boolean;
    "utilizationFlag"?: boolean;
    "costMultiplier"?: number;
    "integrationXRef"?: string;
    /**
     * Used only on create to add the work type to all agreement and agreement type exclusion lists
     */
    "addAllAgreementExclusions"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace WorkType {
    type BillTimeEnum = 'Billable' | 'DoNotBill' | 'NoCharge';
    type RateTypeEnum = 'AdjAmount' | 'Custom' | 'Multiplier';
    type AccrualTypeEnum = 'Holiday' | 'PTO' | 'Sick' | 'Vacation';
}
export interface WorkTypeExternalIntegrationReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WorkTypeReference {
    "id"?: number;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface Workflow {
    "id"?: number;
    "name": string;
    "tableType": WorkflowTableTypeReference;
    /**
     * If a department is set, a location that contains it must be set
     */
    "location"?: SystemLocationReference;
    /**
     * Must belong to the specified location
     */
    "department"?: SystemDepartmentReference;
    /**
     * Batches can not be turned on until after the workflow is created and it has atleast one event associated with it
     */
    "activateFlag"?: boolean;
    "batchInterval"?: number;
    /**
     * If not specified, defaults to Minutes. Months is not supported as month length varies
     */
    "batchFrequencyUnit"?: Workflow.BatchFrequencyUnitEnum;
    "batchLastRan"?: Date;
    /**
     * If activateFlag is true, batchSchedule is required
     */
    "batchSchedule"?: Workflow.BatchScheduleEnum;
    "board"?: BoardReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace Workflow {
    type BatchFrequencyUnitEnum = 'Minutes' | 'Hours' | 'Days';
    type BatchScheduleEnum = 'AnyTime' | 'MyCompanyOfficeHours' | 'SlaHours';
}
export interface WorkflowAction {
    "id"?: number;
    "notifyType": NotifyTypeReference;
    /**
     * Required when notifyType is set to: "Create Activity", "Send Email", "Add Follower", "Assign Resource", "Close Survey"
     */
    "notifyWho"?: NotificationRecipientReference;
    /**
     * Required when notifyWho is set to: "Specific Member", "
     */
    "specificMemberTo"?: MemberReference;
    /**
     * Required when notifyWho is set to: "Email Address"
     */
    "emailRecipient"?: string;
    /**
     * Required when notifyType is set to: "Create Activity", "Send Email", "Assign Resource"
     */
    "notifyFrom"?: NotificationRecipientReference;
    /**
     * Required when notifyFrom is set to: "Specific Member"
     */
    "specificMemberFrom"?: MemberReference;
    /**
     * Required when notifyFrom is set to: "Email Address"
     */
    "emailFrom"?: string;
    "ccContact"?: ContactReference;
    "bccContact"?: ContactReference;
    /**
     * Required when notifyType is set to: "Create Activity", "Send Email", "Assign Resource"
     */
    "subject"?: string;
    "notes"?: string;
    /**
     * Required when notifyType is set to: "Create Activity"
     */
    "activityStatus"?: ActivityStatusReference;
    /**
     * Required when notifyType is set to: "Create Activity"
     */
    "activityType"?: ActivityTypeReference;
    /**
     * Required when notifyType is set to: "Attach Track"
     */
    "attachedTrack"?: TrackReference;
    "daysToExecute"?: number;
    /**
     * Required when notifyType is set to: "Change Board"
     */
    "board"?: BoardReference;
    /**
     * Required when notifyType is set to: "Change Board", "Change Ticket Status"
     */
    "boardStatus"?: ServiceStatusReference;
    "serviceType"?: ServiceTypeReference;
    /**
     * Required when notifyType is set to: "Add to Group"
     */
    "group"?: GroupReference;
    /**
     * Required when notifyType is set to: "Create a Service Ticket"
     */
    "serviceTemplate"?: ServiceTemplateReference;
    "invoiceMinDays"?: number;
    /**
     * Required when notifyType is set to: "Run Connectwise Automate Script"
     */
    "automateScript"?: AutomateScriptReference;
    /**
     * Required when notifyType is set to: "Run Connectwise Automate Script"
     */
    "scriptSuccessStatus"?: ServiceStatusReference;
    /**
     * Required when notifyType is set to: "Run Connectwise Automate Script"
     */
    "scriptFailStatus"?: ServiceStatusReference;
    "detailNotesFlag"?: boolean;
    "internalNotesFlag"?: boolean;
    "auditNotesFlag"?: boolean;
    /**
     * Required when notifyType is set to: "Change Ticket Priority"
     */
    "servicePriority"?: PriorityReference;
    "updateOwnerFlag"?: boolean;
    /**
     * Required when notifyType is set to: "Change Sales Order Status"
     */
    "salesOrderStatus"?: OrderStatusReference;
    /**
     * Required when notifyType is set to: "Change Project Status"
     */
    "projectStatus"?: ProjectStatusReference;
    /**
     * Required when notifyType is set to: "Change Company Status"
     */
    "companyStatus"?: CompanyStatusReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WorkflowActionAutomateParameter {
    "id"?: number;
    "name": string;
    "value"?: string;
}
export interface WorkflowEvent {
    "id"?: number;
    "name"?: string;
    "eventCondition": string;
    /**
     * Required when exectionTimes is set to MultipleTimes or Continuously
     */
    "frequencyUnit"?: WorkflowEvent.FrequencyUnitEnum;
    /**
     * Required when exectionTimes is set to MultipleTimes or Continuously
     */
    "frequencyOfExecution"?: number;
    /**
     * Required when exectionTimes is set to MultipleTimes
     */
    "maxNumberOfExecution"?: number;
    /**
     * Defaults to Once when not specified
     */
    "executionTime"?: WorkflowEvent.ExecutionTimeEnum;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export namespace WorkflowEvent {
    type FrequencyUnitEnum = 'Minutes' | 'Hours' | 'Days' | 'Months';
    type ExecutionTimeEnum = 'Once' | 'MultipleTimes' | 'Continuously';
}
export interface WorkflowNotifyType {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * If the current action is available because it is already set up. Pertains to integrations such as Automate
     */
    "isSetupFlag"?: boolean;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WorkflowTableType {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WorkflowTableTypeReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WorkflowTrigger {
    "id"?: number;
    "name"?: string;
    "description"?: string;
    "hasOptionsFlag"?: boolean;
    "hasOperatorFlag"?: boolean;
    "customField"?: UserDefinedFieldReference;
    "expectedType"?: string;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export interface WorkflowTriggerOption {
    "value"?: string;
    "name"?: string;
    /**
     * If your trigger is for custom fields, this will populate with the custom field associated with the option
     */
    "customField"?: UserDefinedFieldReference;
    /**
     * Metadata of the entity
     */
    "info"?: Metadata;
}
export class AccountingBatchesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Batches Count
     * @param conditions
     */
    financeAccountingBatchesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Batches
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAccountingBatchesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AccountingBatch>>;
    /**
     *
     * Delete Batch By Id
     * @param id
     */
    financeAccountingBatchesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Re-export the payload data from an existing batch (RecreateBatch in SOAP)
     * @param id
     * @param batchExportParameters
     */
    financeAccountingBatchesIdExportPost(params: {
        id: number;
        batchExportParameters: ExportAccountingBatchRequest;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<GLExport>;
    /**
     *
     * Get Batch By Id
     * @param id
     */
    financeAccountingBatchesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AccountingBatch>;
    /**
     *
     * Creates the Accounting Batch and updates GL Records (UpdateBatch in SOAP)
     * @param accountingBatchParameters
     */
    financeAccountingBatchesPost(params: {
        accountingBatchParameters: CreateAccountingBatchRequest;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<GLExport>;
    /**
     *
     * Exports accouting batch payload based on parameters (CreateBatch in SOAP)
     * @param batchExportParameters
     */
    financeAccountingExportPost(params: {
        batchExportParameters: ExportAccountingBatchRequest;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<GLExport>;
}
export class AccountingPackagesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Accounting Packages Count
     * @param conditions
     */
    systemAccountingPackagesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Accounting Packages
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemAccountingPackagesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AccountingPackage>>;
    /**
     *
     * Get Accounting Package By Id
     * @param id
     */
    systemAccountingPackagesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AccountingPackage>;
}
export class AccountingUnpostedExpensesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Unposted Expenses Count
     * @param conditions
     */
    financeAccountingUnpostedexpensesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Unposted Expenses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAccountingUnpostedexpensesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<UnpostedExpense>>;
    /**
     *
     * Get Unposted Expense By Id
     * @param id
     */
    financeAccountingUnpostedexpensesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UnpostedExpense>;
}
export class AccountingUnpostedProcurementsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Unposted Procurements Count
     * @param conditions
     */
    financeAccountingUnpostedprocurementCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Unposted Procurements
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAccountingUnpostedprocurementGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<UnpostedProcurement>>;
    /**
     *
     * Get Unposted Procurement By Id
     * @param id
     */
    financeAccountingUnpostedprocurementIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UnpostedProcurement>;
}
export class AccountingUnpostedinvoicesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Unposted Invoices Count
     * @param conditions
     */
    financeAccountingUnpostedinvoicesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Unposted Invoices
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAccountingUnpostedinvoicesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<UnpostedInvoice>>;
    /**
     *
     * Get Unposted Invoice By Id
     * @param id
     */
    financeAccountingUnpostedinvoicesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UnpostedInvoice>;
}
export class ActivitiesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Activities Count
     * @param conditions
     * @param customFieldConditions
     */
    salesActivitiesCountGet(params: {
        conditions?: string;
        customFieldConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Activities
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesActivitiesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Activity>>;
    /**
     *
     * Delete Activity By Id
     * @param id
     */
    salesActivitiesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Activity By Id
     * @param id
     */
    salesActivitiesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Activity>;
    /**
     *
     * Update Activity
     * @param id
     * @param operations
     */
    salesActivitiesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Activity>;
    /**
     *
     * Replace Activity
     * @param id
     * @param activity
     */
    salesActivitiesIdPut(params: {
        id: number;
        activity: Activity;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Activity>;
    /**
     *
     * Create Activity
     * @param activity
     */
    salesActivitiesPost(params: {
        activity: Activity;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Activity>;
}
export class ActivityStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Activity Statuses Count
     * @param conditions
     */
    salesActivitiesStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Activity Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesActivitiesStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ActivityStatus>>;
    /**
     *
     * Delete Activity Status By Id
     * @param id
     */
    salesActivitiesStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Activity Status By Id
     * @param id
     */
    salesActivitiesStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityStatus>;
    /**
     *
     * Update Activity Status
     * @param id
     * @param operations
     */
    salesActivitiesStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityStatus>;
    /**
     *
     * Replace Activity Status
     * @param id
     * @param activityStatus
     */
    salesActivitiesStatusesIdPut(params: {
        id: number;
        activityStatus: ActivityStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityStatus>;
    /**
     *
     * Create Activity Status
     * @param activityStatus
     */
    salesActivitiesStatusesPost(params: {
        activityStatus: ActivityStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityStatus>;
}
export class ActivityStopwatchesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Activity Stopwatches Count
     * @param conditions
     */
    timeActivitystopwatchesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Activity Stopwatches
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeActivitystopwatchesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ActivityStopwatch>>;
    /**
     *
     * Delete Activity Stopwatch By Id
     * @param id
     */
    timeActivitystopwatchesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Activity Stopwatch By Id
     * @param id
     */
    timeActivitystopwatchesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityStopwatch>;
    /**
     *
     * Update Activity Stopwatch
     * @param id
     * @param operations
     */
    timeActivitystopwatchesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityStopwatch>;
    /**
     *
     * Replace Activity Stopwatch
     * @param id
     * @param activityStopwatch
     */
    timeActivitystopwatchesIdPut(params: {
        id: number;
        activityStopwatch: ActivityStopwatch;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityStopwatch>;
    /**
     *
     * Create Activity Stopwatch
     * @param activityStopwatch
     */
    timeActivitystopwatchesPost(params: {
        activityStopwatch: ActivityStopwatch;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityStopwatch>;
}
export class ActivityTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Activity Types Count
     * @param conditions
     */
    salesActivitiesTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Activity Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesActivitiesTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ActivityType>>;
    /**
     *
     * Delete Activity Type By Id
     * @param id
     */
    salesActivitiesTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Activity Type By Id
     * @param id
     */
    salesActivitiesTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityType>;
    /**
     *
     * Update Activity Type
     * @param id
     * @param operations
     */
    salesActivitiesTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityType>;
    /**
     *
     * Replace Activity Type
     * @param id
     * @param activityType
     */
    salesActivitiesTypesIdPut(params: {
        id: number;
        activityType: ActivityType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityType>;
    /**
     *
     * Create Activity Type
     * @param activityType
     */
    salesActivitiesTypesPost(params: {
        activityType: ActivityType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityType>;
}
export class AddressFormatsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Address Formats Count
     * @param conditions
     */
    companyAddressFormatsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Address Formats
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyAddressFormatsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AddressFormat>>;
    /**
     *
     * Delete Address Format By Id
     * @param id
     */
    companyAddressFormatsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Address Format By Id
     * @param id
     */
    companyAddressFormatsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AddressFormat>;
    /**
     *
     * Update Address Format
     * @param id
     * @param operations
     */
    companyAddressFormatsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AddressFormat>;
    /**
     *
     * Replace Address Format
     * @param id
     * @param addressFormat
     */
    companyAddressFormatsIdPut(params: {
        id: number;
        addressFormat: AddressFormat;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AddressFormat>;
    /**
     *
     * Create Address Format
     * @param addressFormat
     */
    companyAddressFormatsPost(params: {
        addressFormat: AddressFormat;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AddressFormat>;
}
export class AdjustmentDetailsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Adjustment Detail Count
     * @param id
     * @param conditions
     */
    procurementAdjustmentsIdDetailsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Adjustment Detail By Id
     * @param id
     * @param detailId
     */
    procurementAdjustmentsIdDetailsDetailIdDelete(params: {
        id: number;
        detailId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Adjustment Detail By Id
     * @param id
     * @param detailId
     */
    procurementAdjustmentsIdDetailsDetailIdGet(params: {
        id: number;
        detailId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AdjustmentDetail>;
    /**
     *
     * Get Adjustment Detail
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementAdjustmentsIdDetailsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AdjustmentDetail>>;
    /**
     *
     * Create Adjustment Detail
     * @param id
     * @param adjustmentDetail
     */
    procurementAdjustmentsIdDetailsPost(params: {
        id: number;
        adjustmentDetail: AdjustmentDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AdjustmentDetail>;
}
export class AdjustmentTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Adjustment Types Count
     * @param conditions
     */
    procurementAdjustmentsTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Adjustment Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementAdjustmentsTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AdjustmentType>>;
    /**
     *
     * Delete Adjustment Types By Id
     * @param id
     */
    procurementAdjustmentsTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Adjustment Types By Id
     * @param id
     */
    procurementAdjustmentsTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AdjustmentType>;
    /**
     *
     * Update Adjustment Types
     * @param id
     * @param operations
     */
    procurementAdjustmentsTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AdjustmentType>;
    /**
     *
     * Replace Adjustment Types
     * @param id
     * @param adjustmentTypes
     */
    procurementAdjustmentsTypesIdPut(params: {
        id: number;
        adjustmentTypes: AdjustmentType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AdjustmentType>;
    /**
     *
     * Create Adjustment Types
     * @param adjustmentTypes
     */
    procurementAdjustmentsTypesPost(params: {
        adjustmentTypes: AdjustmentType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AdjustmentType>;
}
export class AdjustmentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Adjustment Count
     * @param conditions
     */
    procurementAdjustmentsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Adjustment
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementAdjustmentsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Adjustment>>;
    /**
     *
     * Delete Adjustment By Id
     * @param id
     */
    procurementAdjustmentsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Adjustment By Id
     * @param id
     */
    procurementAdjustmentsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Adjustment>;
    /**
     *
     * Update Adjustment
     * @param id
     * @param operations
     */
    procurementAdjustmentsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Adjustment>;
    /**
     *
     * Replace Adjustment
     * @param id
     * @param adjustment
     */
    procurementAdjustmentsIdPut(params: {
        id: number;
        adjustment: Adjustment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Adjustment>;
    /**
     *
     * Create Adjustment
     * @param adjustment
     */
    procurementAdjustmentsPost(params: {
        adjustment: Adjustment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Adjustment>;
}
export class AgreementAdditionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Addition By Id
     * @param id
     * @param additionId
     */
    financeAgreementsIdAdditionsAdditionIdDelete(params: {
        id: number;
        additionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Addition By Id
     * @param id
     * @param additionId
     */
    financeAgreementsIdAdditionsAdditionIdGet(params: {
        id: number;
        additionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Addition>;
    /**
     *
     * Update Addition
     * @param id
     * @param additionId
     * @param operations
     */
    financeAgreementsIdAdditionsAdditionIdPatch(params: {
        id: number;
        additionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Addition>;
    /**
     *
     * Replace Addition
     * @param id
     * @param additionId
     * @param addition
     */
    financeAgreementsIdAdditionsAdditionIdPut(params: {
        id: number;
        additionId: number;
        addition: Addition;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Addition>;
    /**
     *
     * Get Additions Count
     * @param id
     * @param conditions
     * @param customFieldConditions
     */
    financeAgreementsIdAdditionsCountGet(params: {
        id: number;
        conditions?: string;
        customFieldConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Additions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementsIdAdditionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Addition>>;
    /**
     *
     * Create Addition
     * @param id
     * @param addition
     */
    financeAgreementsIdAdditionsPost(params: {
        id: number;
        addition: Addition;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Addition>;
}
export class AgreementAdjustmentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Adjustment By Id
     * @param id
     * @param adjustmentId
     */
    financeAgreementsIdAdjustmentsAdjustmentIdDelete(params: {
        id: number;
        adjustmentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Adjustment By Id
     * @param id
     * @param adjustmentId
     */
    financeAgreementsIdAdjustmentsAdjustmentIdGet(params: {
        id: number;
        adjustmentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Adjustment>;
    /**
     *
     * Update Adjustment
     * @param id
     * @param adjustmentId
     * @param operations
     */
    financeAgreementsIdAdjustmentsAdjustmentIdPatch(params: {
        id: number;
        adjustmentId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Adjustment>;
    /**
     *
     * Replace Adjustment
     * @param id
     * @param adjustmentId
     * @param adjustment
     */
    financeAgreementsIdAdjustmentsAdjustmentIdPut(params: {
        id: number;
        adjustmentId: number;
        adjustment: Adjustment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Adjustment>;
    /**
     *
     * Get Adjustments Count
     * @param id
     * @param conditions
     * @param customFieldConditions
     */
    financeAgreementsIdAdjustmentsCountGet(params: {
        id: number;
        conditions?: string;
        customFieldConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Adjustments
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementsIdAdjustmentsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Adjustment>>;
    /**
     *
     * Create Adjustment
     * @param id
     * @param adjustment
     */
    financeAgreementsIdAdjustmentsPost(params: {
        id: number;
        adjustment: Adjustment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Adjustment>;
}
export class AgreementBatchSetupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Batch Setup Count
     * @param conditions
     */
    financeBatchSetupsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Batch Setup
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeBatchSetupsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementBatchSetup>>;
    /**
     *
     * Get Batch Setup By Id
     * @param id
     */
    financeBatchSetupsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementBatchSetup>;
    /**
     *
     * Update Batch Setup
     * @param id
     * @param operations
     */
    financeBatchSetupsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementBatchSetup>;
    /**
     *
     * Replace Batch Setup
     * @param id
     * @param batchSetup
     */
    financeBatchSetupsIdPut(params: {
        id: number;
        batchSetup: AgreementBatchSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementBatchSetup>;
}
export class AgreementBoardDefaultsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Board Default By Id
     * @param id
     * @param boardDefaultId
     */
    financeAgreementsIdBoardDefaultsBoardDefaultIdDelete(params: {
        id: number;
        boardDefaultId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Board Default By Id
     * @param id
     * @param boardDefaultId
     */
    financeAgreementsIdBoardDefaultsBoardDefaultIdGet(params: {
        id: number;
        boardDefaultId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardDefault>;
    /**
     *
     * Update Board Default
     * @param id
     * @param boardDefaultId
     * @param operations
     */
    financeAgreementsIdBoardDefaultsBoardDefaultIdPatch(params: {
        id: number;
        boardDefaultId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardDefault>;
    /**
     *
     * Replace Board Default
     * @param id
     * @param boardDefaultId
     * @param boardDefault
     */
    financeAgreementsIdBoardDefaultsBoardDefaultIdPut(params: {
        id: number;
        boardDefaultId: number;
        boardDefault: BoardDefault;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardDefault>;
    /**
     *
     * Get Board Defaults Count
     * @param id
     * @param conditions
     */
    financeAgreementsIdBoardDefaultsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Board Defaults
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementsIdBoardDefaultsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardDefault>>;
    /**
     *
     * Create Board Default
     * @param id
     * @param boardDefault
     */
    financeAgreementsIdBoardDefaultsPost(params: {
        id: number;
        boardDefault: BoardDefault;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardDefault>;
}
export class AgreementSitesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Sites Count
     * @param id
     * @param conditions
     */
    financeAgreementsIdSitesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Sites
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementsIdSitesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementSite>>;
    /**
     *
     * Create Site
     * @param id
     * @param site
     */
    financeAgreementsIdSitesPost(params: {
        id: number;
        site: AgreementSite;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementSite>;
    /**
     *
     * Delete Site By Id
     * @param id
     * @param siteId
     */
    financeAgreementsIdSitesSiteIdDelete(params: {
        id: number;
        siteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Site By Id
     * @param id
     * @param siteId
     */
    financeAgreementsIdSitesSiteIdGet(params: {
        id: number;
        siteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementSite>;
    /**
     *
     * Update Site
     * @param id
     * @param siteId
     * @param operations
     */
    financeAgreementsIdSitesSiteIdPatch(params: {
        id: number;
        siteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementSite>;
    /**
     *
     * Replace Site
     * @param id
     * @param siteId
     * @param site
     */
    financeAgreementsIdSitesSiteIdPut(params: {
        id: number;
        siteId: number;
        site: AgreementSite;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementSite>;
}
export class AgreementTypeBoardDefaultsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Agreement Type Board Default By Id
     * @param id
     * @param boardDefaultId
     */
    financeAgreementTypesIdBoardDefaultsBoardDefaultIdDelete(params: {
        id: number;
        boardDefaultId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Agreement Type Board Default By Id
     * @param id
     * @param boardDefaultId
     */
    financeAgreementTypesIdBoardDefaultsBoardDefaultIdGet(params: {
        id: number;
        boardDefaultId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeBoardDefault>;
    /**
     *
     * Update Agreement Type Board Default
     * @param id
     * @param boardDefaultId
     * @param operations
     */
    financeAgreementTypesIdBoardDefaultsBoardDefaultIdPatch(params: {
        id: number;
        boardDefaultId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeBoardDefault>;
    /**
     *
     * Replace Agreement Type Board Default
     * @param id
     * @param boardDefaultId
     * @param boardDefault
     */
    financeAgreementTypesIdBoardDefaultsBoardDefaultIdPut(params: {
        id: number;
        boardDefaultId: number;
        boardDefault: AgreementTypeBoardDefault;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeBoardDefault>;
    /**
     *
     * Get Agreement Type Board Defaults Count
     * @param id
     * @param conditions
     */
    financeAgreementTypesIdBoardDefaultsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Agreement Type Board Defaults
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementTypesIdBoardDefaultsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementTypeBoardDefault>>;
    /**
     *
     * Create Agreement Type Board Default
     * @param id
     * @param boardDefault
     */
    financeAgreementTypesIdBoardDefaultsPost(params: {
        id: number;
        boardDefault: AgreementTypeBoardDefault;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeBoardDefault>;
}
export class AgreementTypeWorkRoleExclusionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Work Role Exclusions Count
     * @param id
     * @param conditions
     */
    financeAgreementTypesIdWorkRoleExclusionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Work Role Exclusions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementTypesIdWorkRoleExclusionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementTypeWorkRoleExclusion>>;
    /**
     *
     * Create Work Role Exclusion
     * @param id
     * @param workRoleExclusion
     */
    financeAgreementTypesIdWorkRoleExclusionsPost(params: {
        id: number;
        workRoleExclusion: AgreementTypeWorkRoleExclusion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeWorkRoleExclusion>;
    /**
     *
     * Delete Work Role Exclusion By Id
     * @param id
     * @param workRoleExclusionId
     */
    financeAgreementTypesIdWorkRoleExclusionsWorkRoleExclusionIdDelete(params: {
        id: number;
        workRoleExclusionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Work Role Exclusion By Id
     * @param id
     * @param workRoleExclusionId
     */
    financeAgreementTypesIdWorkRoleExclusionsWorkRoleExclusionIdGet(params: {
        id: number;
        workRoleExclusionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeWorkRoleExclusion>;
}
export class AgreementTypeWorkRolesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Work Roles Count
     * @param id
     * @param conditions
     */
    financeAgreementTypesIdWorkrolesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Work Roles
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementTypesIdWorkrolesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementTypeWorkRole>>;
    /**
     *
     * Create Work Role
     * @param id
     * @param workRole
     */
    financeAgreementTypesIdWorkrolesPost(params: {
        id: number;
        workRole: AgreementTypeWorkRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeWorkRole>;
    /**
     *
     * Delete Work Role By Id
     * @param id
     * @param workRoleId
     */
    financeAgreementTypesIdWorkrolesWorkRoleIdDelete(params: {
        id: number;
        workRoleId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Work Role By Id
     * @param id
     * @param workRoleId
     */
    financeAgreementTypesIdWorkrolesWorkRoleIdGet(params: {
        id: number;
        workRoleId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeWorkRole>;
    /**
     *
     * Update Work Role
     * @param id
     * @param workRoleId
     * @param operations
     */
    financeAgreementTypesIdWorkrolesWorkRoleIdPatch(params: {
        id: number;
        workRoleId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeWorkRole>;
    /**
     *
     * Replace Work Role
     * @param id
     * @param workRoleId
     * @param workRole
     */
    financeAgreementTypesIdWorkrolesWorkRoleIdPut(params: {
        id: number;
        workRoleId: number;
        workRole: AgreementTypeWorkRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeWorkRole>;
}
export class AgreementTypeWorkTypeExclusionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Work Type Exclusions Count
     * @param id
     * @param conditions
     */
    financeAgreementTypesIdWorkTypeExclusionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Work Type Exclusions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementTypesIdWorkTypeExclusionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementTypeWorkTypeExclusion>>;
    /**
     *
     * Create Work Type Exclusion
     * @param id
     * @param workTypeExclusion
     */
    financeAgreementTypesIdWorkTypeExclusionsPost(params: {
        id: number;
        workTypeExclusion: AgreementTypeWorkTypeExclusion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeWorkTypeExclusion>;
    /**
     *
     * Delete Work Type Exclusion By Id
     * @param id
     * @param workTypeExclusionId
     */
    financeAgreementTypesIdWorkTypeExclusionsWorkTypeExclusionIdDelete(params: {
        id: number;
        workTypeExclusionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Work Type Exclusion By Id
     * @param id
     * @param workTypeExclusionId
     */
    financeAgreementTypesIdWorkTypeExclusionsWorkTypeExclusionIdGet(params: {
        id: number;
        workTypeExclusionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeWorkTypeExclusion>;
}
export class AgreementTypeWorkTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Work Types Count
     * @param id
     * @param conditions
     */
    financeAgreementTypesIdWorktypesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Work Types
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementTypesIdWorktypesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementTypeWorkType>>;
    /**
     *
     * Create Work Type
     * @param id
     * @param workType
     */
    financeAgreementTypesIdWorktypesPost(params: {
        id: number;
        workType: AgreementTypeWorkType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeWorkType>;
    /**
     *
     * Delete Work Type By Id
     * @param id
     * @param worktypeId
     */
    financeAgreementTypesIdWorktypesWorktypeIdDelete(params: {
        id: number;
        worktypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Work Type By Id
     * @param id
     * @param worktypeId
     */
    financeAgreementTypesIdWorktypesWorktypeIdGet(params: {
        id: number;
        worktypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeWorkType>;
    /**
     *
     * Update Work Type
     * @param id
     * @param worktypeId
     * @param operations
     */
    financeAgreementTypesIdWorktypesWorktypeIdPatch(params: {
        id: number;
        worktypeId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeWorkType>;
    /**
     *
     * Replace Work Type
     * @param id
     * @param worktypeId
     * @param workType
     */
    financeAgreementTypesIdWorktypesWorktypeIdPut(params: {
        id: number;
        worktypeId: number;
        workType: AgreementTypeWorkType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementTypeWorkType>;
}
export class AgreementTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Agreement Types Count
     * @param conditions
     */
    financeAgreementsTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Agreement Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementsTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementType>>;
    /**
     *
     * Delete Agreement Type By Id
     * @param id
     */
    financeAgreementsTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Agreement Type By Id
     * @param id
     */
    financeAgreementsTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementType>;
    /**
     *
     * Update Agreement Type
     * @param id
     * @param operations
     */
    financeAgreementsTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementType>;
    /**
     *
     * Replace Agreement Type
     * @param id
     * @param agreementType
     */
    financeAgreementsTypesIdPut(params: {
        id: number;
        agreementType: AgreementType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementType>;
    /**
     *
     * Create Agreement Type
     * @param agreementType
     */
    financeAgreementsTypesPost(params: {
        agreementType: AgreementType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementType>;
}
export class AgreementWorkRoleExclusionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Work Role Exclusions Count
     * @param id
     * @param conditions
     */
    financeAgreementsIdWorkRoleExclusionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Work Role Exclusions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementsIdWorkRoleExclusionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementWorkRoleExclusion>>;
    /**
     *
     * Create Work Role Exclusion
     * @param id
     * @param workRoleExclusion
     */
    financeAgreementsIdWorkRoleExclusionsPost(params: {
        id: number;
        workRoleExclusion: AgreementWorkRoleExclusion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkRoleExclusion>;
    /**
     *
     * Delete Work Role Exclusion By Id
     * @param id
     * @param workRoleExclusionId
     */
    financeAgreementsIdWorkRoleExclusionsWorkRoleExclusionIdDelete(params: {
        id: number;
        workRoleExclusionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
}
export class AgreementWorkRolesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Work Roles Count
     * @param id
     * @param conditions
     */
    financeAgreementsIdWorkrolesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Work Roles
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementsIdWorkrolesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementWorkRole>>;
    /**
     *
     * Create Work Role
     * @param id
     * @param workRole
     */
    financeAgreementsIdWorkrolesPost(params: {
        id: number;
        workRole: AgreementWorkRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkRole>;
    /**
     *
     * Delete Work Role By Id
     * @param id
     * @param workRoleId
     */
    financeAgreementsIdWorkrolesWorkRoleIdDelete(params: {
        id: number;
        workRoleId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Work Role By Id
     * @param id
     * @param workRoleId
     */
    financeAgreementsIdWorkrolesWorkRoleIdGet(params: {
        id: number;
        workRoleId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkRole>;
    /**
     *
     * Update Work Role
     * @param id
     * @param workRoleId
     * @param operations
     */
    financeAgreementsIdWorkrolesWorkRoleIdPatch(params: {
        id: number;
        workRoleId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkRole>;
    /**
     *
     * Replace Work Role
     * @param id
     * @param workRoleId
     * @param workRole
     */
    financeAgreementsIdWorkrolesWorkRoleIdPut(params: {
        id: number;
        workRoleId: number;
        workRole: AgreementWorkRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkRole>;
}
export class AgreementWorkTypeExclusionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Work Type Exclusions Count
     * @param id
     * @param conditions
     */
    financeAgreementsIdWorkTypeExclusionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Work Type Exclusions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementsIdWorkTypeExclusionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementWorkTypeExclusion>>;
    /**
     *
     * Create Work Type Exclusion
     * @param id
     * @param workTypeExclusion
     */
    financeAgreementsIdWorkTypeExclusionsPost(params: {
        id: number;
        workTypeExclusion: AgreementWorkTypeExclusion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkTypeExclusion>;
    /**
     *
     * Delete Work Type Exclusion By Id
     * @param id
     * @param workTypeExclusionId
     */
    financeAgreementsIdWorkTypeExclusionsWorkTypeExclusionIdDelete(params: {
        id: number;
        workTypeExclusionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
}
export class AgreementWorkTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Work Types Count
     * @param id
     * @param conditions
     */
    financeAgreementsIdWorktypesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Work Types
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementsIdWorktypesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementWorkType>>;
    /**
     *
     * Create Work Type
     * @param id
     * @param workType
     */
    financeAgreementsIdWorktypesPost(params: {
        id: number;
        workType: AgreementWorkType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkType>;
    /**
     *
     * Delete Work Type By Id
     * @param id
     * @param worktypeId
     */
    financeAgreementsIdWorktypesWorktypeIdDelete(params: {
        id: number;
        worktypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Work Type By Id
     * @param id
     * @param worktypeId
     */
    financeAgreementsIdWorktypesWorktypeIdGet(params: {
        id: number;
        worktypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkType>;
    /**
     *
     * Update Work Type
     * @param id
     * @param worktypeId
     * @param operations
     */
    financeAgreementsIdWorktypesWorktypeIdPatch(params: {
        id: number;
        worktypeId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkType>;
    /**
     *
     * Replace Work Type
     * @param id
     * @param worktypeId
     * @param workType
     */
    financeAgreementsIdWorktypesWorktypeIdPut(params: {
        id: number;
        worktypeId: number;
        workType: AgreementWorkType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkType>;
}
export class AgreementsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Agreements Count
     * @param conditions
     * @param customFieldConditions
     */
    financeAgreementsCountGet(params: {
        conditions?: string;
        customFieldConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Agreements
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeAgreementsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Agreement>>;
    /**
     *
     * Delete Configuration Association
     * @param id
     * @param configurationId
     */
    financeAgreementsIdConfigurationsConfigurationIdDelete(params: {
        id: number;
        configurationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Configuration Association
     * @param id
     * @param configurationId
     */
    financeAgreementsIdConfigurationsConfigurationIdGet(params: {
        id: number;
        configurationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationReference>;
    /**
     *
     * Get Agreement Configurations Count
     * @param id
     */
    financeAgreementsIdConfigurationsCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Agreement Configurations
     * @param id
     * @param page
     * @param pageSize
     */
    financeAgreementsIdConfigurationsGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConfigurationReference>>;
    /**
     *
     * Create Configuration Association
     * @param id
     * @param configuration
     */
    financeAgreementsIdConfigurationsPost(params: {
        id: number;
        configuration: ConfigurationReference;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationReference>;
    /**
     *
     * Delete Agreement By Id
     * @param id
     */
    financeAgreementsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Agreement By Id
     * @param id
     */
    financeAgreementsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Agreement>;
    /**
     *
     * Update Agreement
     * @param id
     * @param operations
     */
    financeAgreementsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Agreement>;
    /**
     *
     * Replace Agreement
     * @param id
     * @param agreement
     */
    financeAgreementsIdPut(params: {
        id: number;
        agreement: Agreement;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Agreement>;
    /**
     *
     * Create Agreement
     * @param agreement
     */
    financeAgreementsPost(params: {
        agreement: Agreement;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Agreement>;
}
export class AuditTrailApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Members Count
     * @param type
     * @param id
     * @param deviceIdentifier
     */
    systemAudittrailCountGet(params: {
        type?: string;
        id?: number;
        deviceIdentifier?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Audit Trail
     * @param type
     * @param id
     * @param deviceIdentifier
     * @param page
     * @param pageSize
     */
    systemAudittrailGet(params: {
        type?: string;
        id?: number;
        deviceIdentifier?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AuditTrailEntry>>;
}
export class AuthAnvilsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Auth Anvil Count
     * @param conditions
     */
    systemAuthAnvilsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Auth Anvils
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemAuthAnvilsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AuthAnvil>>;
    /**
     *
     * Get Auth Anvil By Id
     * @param id
     */
    systemAuthAnvilsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AuthAnvil>;
    /**
     *
     * Update Auth Anvil
     * @param id
     * @param operations
     */
    systemAuthAnvilsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AuthAnvil>;
    /**
     *
     * Replace Auth Anvil
     * @param id
     * @param authAnvil
     */
    systemAuthAnvilsIdPut(params: {
        id: number;
        authAnvil: AuthAnvil;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AuthAnvil>;
    /**
     *
     * Validate Auth Anvil Url Connectivity
     */
    systemAuthAnvilsTestConnectionGet(params: {}, extraQueryParams?: any, extraFetchParams?: any): Promise<SuccessResponse>;
}
export class BatchApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Process Batch Requests
     * @param request
     */
    systemBatchPost(params: {
        request: BatchRequest;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BatchResponse>;
}
export class BillingCyclesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Billing Cycles Count
     * @param conditions
     */
    financeBillingCyclesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Billing Cycles
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeBillingCyclesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BillingCycle>>;
    /**
     *
     * Get Billing Cycle By Id
     * @param id
     */
    financeBillingCyclesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BillingCycle>;
}
export class BillingSetupRoutingsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Billing Setup Routings Count
     * @param id
     * @param conditions
     */
    financeBillingSetupsIdRoutingsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Billing Setup Routings
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeBillingSetupsIdRoutingsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BillingSetupRouting>>;
    /**
     *
     * Create Billing Setup Routing
     * @param id
     * @param billingSetupRouting
     */
    financeBillingSetupsIdRoutingsPost(params: {
        id: number;
        billingSetupRouting: BillingSetupRouting;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BillingSetupRouting>;
    /**
     *
     * Delete Billing Setup Routing By Id
     * @param id
     * @param routingId
     */
    financeBillingSetupsIdRoutingsRoutingIdDelete(params: {
        id: number;
        routingId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Billing Setup Routing By Id
     * @param id
     * @param routingId
     */
    financeBillingSetupsIdRoutingsRoutingIdGet(params: {
        id: number;
        routingId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BillingSetupRouting>;
    /**
     *
     * Update Billing Setup Routing
     * @param id
     * @param routingId
     * @param operations
     */
    financeBillingSetupsIdRoutingsRoutingIdPatch(params: {
        id: number;
        routingId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BillingSetupRouting>;
    /**
     *
     * Replace Billing Setup Routing
     * @param id
     * @param routingId
     * @param billingSetupRouting
     */
    financeBillingSetupsIdRoutingsRoutingIdPut(params: {
        id: number;
        routingId: number;
        billingSetupRouting: BillingSetupRouting;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BillingSetupRouting>;
}
export class BillingSetupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Billing Setups Count
     * @param conditions
     */
    financeBillingSetupsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Billing Setups
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeBillingSetupsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BillingSetup>>;
    /**
     *
     * Delete Billing Setup By Id
     * @param id
     */
    financeBillingSetupsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Billing Setup By Id
     * @param id
     */
    financeBillingSetupsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BillingSetup>;
    /**
     *
     * Update Billing Setup
     * @param id
     * @param operations
     */
    financeBillingSetupsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BillingSetup>;
    /**
     *
     * Replace Billing Setup
     * @param id
     * @param billingSetup
     */
    financeBillingSetupsIdPut(params: {
        id: number;
        billingSetup: BillingSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BillingSetup>;
    /**
     *
     * Create Billing Setup
     * @param billingSetup
     */
    financeBillingSetupsPost(params: {
        billingSetup: BillingSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BillingSetup>;
}
export class BillingStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Billing Statuses Count
     * @param conditions
     */
    systemBillingStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Billing Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemBillingStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BillingStatus>>;
    /**
     *
     * Get Billing Status By Id
     * @param id
     */
    systemBillingStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BillingStatus>;
}
export class BillingTermsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Billing Terms Count
     * @param conditions
     */
    financeBillingTermsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Billing Terms
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeBillingTermsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BillingTerm>>;
    /**
     *
     * Get Billing Term By Id
     * @param id
     */
    financeBillingTermsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BillingTerm>;
}
export class BoardAutoAssignResourcesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Board Auto Assign Resource By Id
     * @param id
     * @param autoAssignResourceId
     */
    serviceBoardsIdAutoAssignResourcesAutoAssignResourceIdDelete(params: {
        id: number;
        autoAssignResourceId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Board Auto Assign Resource By Id
     * @param id
     * @param autoAssignResourceId
     */
    serviceBoardsIdAutoAssignResourcesAutoAssignResourceIdGet(params: {
        id: number;
        autoAssignResourceId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardAutoAssignResource>;
    /**
     *
     * Update Board Auto Assign Resource
     * @param id
     * @param autoAssignResourceId
     * @param operations
     */
    serviceBoardsIdAutoAssignResourcesAutoAssignResourceIdPatch(params: {
        id: number;
        autoAssignResourceId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardAutoAssignResource>;
    /**
     *
     * Replace Board Auto Assign Resource
     * @param id
     * @param autoAssignResourceId
     * @param boardAutoAssignResource
     */
    serviceBoardsIdAutoAssignResourcesAutoAssignResourceIdPut(params: {
        id: number;
        autoAssignResourceId: number;
        boardAutoAssignResource: BoardAutoAssignResource;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardAutoAssignResource>;
    /**
     *
     * Get Board Auto Assign Resources Count
     * @param id
     * @param conditions
     */
    serviceBoardsIdAutoAssignResourcesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Board Auto Assign Resources
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsIdAutoAssignResourcesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardAutoAssignResource>>;
    /**
     *
     * Create Board Auto Assign Resource
     * @param id
     * @param boardAutoAssignResource
     */
    serviceBoardsIdAutoAssignResourcesPost(params: {
        id: number;
        boardAutoAssignResource: BoardAutoAssignResource;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardAutoAssignResource>;
}
export class BoardAutoTemplatesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Auto Template By Id
     * @param id
     * @param autoTemplateId
     */
    serviceBoardsIdAutoTemplatesAutoTemplateIdDelete(params: {
        id: number;
        autoTemplateId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Auto Template By Id
     * @param id
     * @param autoTemplateId
     */
    serviceBoardsIdAutoTemplatesAutoTemplateIdGet(params: {
        id: number;
        autoTemplateId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardAutoTemplate>;
    /**
     *
     * Update Auto Template
     * @param id
     * @param autoTemplateId
     * @param operations
     */
    serviceBoardsIdAutoTemplatesAutoTemplateIdPatch(params: {
        id: number;
        autoTemplateId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardAutoTemplate>;
    /**
     *
     * Replace Auto Template
     * @param id
     * @param autoTemplateId
     * @param boardAutoTemplate
     */
    serviceBoardsIdAutoTemplatesAutoTemplateIdPut(params: {
        id: number;
        autoTemplateId: number;
        boardAutoTemplate: BoardAutoTemplate;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardAutoTemplate>;
    /**
     *
     * Get Auto Templates Count
     * @param id
     * @param conditions
     */
    serviceBoardsIdAutoTemplatesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Auto Templates
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsIdAutoTemplatesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardAutoTemplate>>;
    /**
     *
     * Create Auto Templates
     * @param id
     * @param boardAutoTemplate
     */
    serviceBoardsIdAutoTemplatesPost(params: {
        id: number;
        boardAutoTemplate: BoardAutoTemplate;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardAutoTemplate>;
}
export class BoardExcludedMembersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Excluded Members Count
     * @param id
     * @param conditions
     */
    serviceBoardsIdExcludedMembersCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Excluded Member By Id
     * @param id
     * @param excludedMemberId
     */
    serviceBoardsIdExcludedMembersExcludedMemberIdDelete(params: {
        id: number;
        excludedMemberId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Excluded Member By Id
     * @param id
     * @param excludedMemberId
     */
    serviceBoardsIdExcludedMembersExcludedMemberIdGet(params: {
        id: number;
        excludedMemberId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardExcludedMember>;
    /**
     *
     * Get Excluded Members
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsIdExcludedMembersGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardExcludedMember>>;
    /**
     *
     * Create Excluded Member
     * @param id
     * @param boardExcludedMember
     */
    serviceBoardsIdExcludedMembersPost(params: {
        id: number;
        boardExcludedMember: BoardExcludedMember;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardExcludedMember>;
}
export class BoardItemAssociationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Board Item Association By Id
     * @param boardId
     * @param itemId
     * @param associationId
     */
    serviceBoardsBoardIdItemsItemIdAssociationsAssociationIdGet(params: {
        boardId: number;
        itemId: number;
        associationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardItemAssociation>;
    /**
     *
     * Get Board Item Association Count
     * @param boardId
     * @param itemId
     * @param conditions
     */
    serviceBoardsBoardIdItemsItemIdAssociationsCountGet(params: {
        boardId: number;
        itemId: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Board Item Association
     * @param boardId
     * @param itemId
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsBoardIdItemsItemIdAssociationsGet(params: {
        boardId: number;
        itemId: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardItemAssociation>>;
    /**
     *
     * Replace Board Item Association
     * @param boardId
     * @param itemId
     * @param id
     * @param itemAssociation
     */
    serviceBoardsBoardIdItemsItemIdAssociationsIdPut(params: {
        boardId: number;
        itemId: number;
        id: number;
        itemAssociation: BoardItemAssociation;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardItemAssociation>;
    /**
     *
     * Update Board Item Association
     * @param boardId The recid of the Service/Project Board
     * @param itemId
     * @param typeId
     * @param operations
     */
    serviceBoardsBoardIdItemsItemIdAssociationsTypeIdPatch(params: {
        boardId: number;
        itemId: number;
        typeId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardItemAssociation>;
}
export class BoardItemsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Items Count
     * @param id
     * @param conditions
     */
    serviceBoardsIdItemsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Items
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsIdItemsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardItem>>;
    /**
     *
     * Delete Item By Id
     * @param id
     * @param itemId
     */
    serviceBoardsIdItemsItemIdDelete(params: {
        id: number;
        itemId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Item By Id
     * @param id
     * @param itemId
     */
    serviceBoardsIdItemsItemIdGet(params: {
        id: number;
        itemId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardItem>;
    /**
     *
     * Update Item
     * @param id
     * @param itemId
     * @param operations
     */
    serviceBoardsIdItemsItemIdPatch(params: {
        id: number;
        itemId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardItem>;
    /**
     *
     * Replace Item
     * @param id
     * @param itemId
     * @param boardItem
     */
    serviceBoardsIdItemsItemIdPut(params: {
        id: number;
        itemId: number;
        boardItem: BoardItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardItem>;
    /**
     *
     * Create Item
     * @param id
     * @param boardItem
     */
    serviceBoardsIdItemsPost(params: {
        id: number;
        boardItem: BoardItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardItem>;
}
export class BoardNotificationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Board Notifications Count
     * @param id
     * @param conditions
     */
    serviceBoardsIdNotificationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Board Notifications
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsIdNotificationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardNotification>>;
    /**
     *
     * Delete Board Notification By Id
     * @param id
     * @param notificationId
     */
    serviceBoardsIdNotificationsNotificationIdDelete(params: {
        id: number;
        notificationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Board Notification By Id
     * @param id
     * @param notificationId
     */
    serviceBoardsIdNotificationsNotificationIdGet(params: {
        id: number;
        notificationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardNotification>;
    /**
     *
     * Update Board Notification
     * @param id
     * @param notificationId
     * @param operations
     */
    serviceBoardsIdNotificationsNotificationIdPatch(params: {
        id: number;
        notificationId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardNotification>;
    /**
     *
     * Replace Board Notification
     * @param id
     * @param notificationId
     * @param boardNotification
     */
    serviceBoardsIdNotificationsNotificationIdPut(params: {
        id: number;
        notificationId: number;
        boardNotification: BoardNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardNotification>;
    /**
     *
     * Create Board Notification
     * @param id
     * @param boardNotification
     */
    serviceBoardsIdNotificationsPost(params: {
        id: number;
        boardNotification: BoardNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardNotification>;
}
export class BoardStatusNotificationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Board Status Notifications Count
     * @param boardId
     * @param statusId
     * @param conditions
     */
    serviceBoardsBoardIdStatusesStatusIdNotificationsCountGet(params: {
        boardId: number;
        statusId: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Board Status Notifications
     * @param boardId
     * @param statusId
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsBoardIdStatusesStatusIdNotificationsGet(params: {
        boardId: number;
        statusId: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardStatusNotification>>;
    /**
     *
     * Delete Board Status Notification By Id
     * @param boardId
     * @param statusId
     * @param id
     */
    serviceBoardsBoardIdStatusesStatusIdNotificationsIdDelete(params: {
        boardId: number;
        statusId: number;
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Board Status Notification By Id
     * @param boardId
     * @param statusId
     * @param id
     */
    serviceBoardsBoardIdStatusesStatusIdNotificationsIdGet(params: {
        boardId: number;
        statusId: number;
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardStatusNotification>;
    /**
     *
     * Update Board Status Notification
     * @param boardId
     * @param statusId
     * @param id
     * @param operations
     */
    serviceBoardsBoardIdStatusesStatusIdNotificationsIdPatch(params: {
        boardId: number;
        statusId: number;
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardStatusNotification>;
    /**
     *
     * Replace Board Status Notification
     * @param boardId
     * @param statusId
     * @param id
     * @param boardStatusNotification
     */
    serviceBoardsBoardIdStatusesStatusIdNotificationsIdPut(params: {
        boardId: number;
        statusId: number;
        id: number;
        boardStatusNotification: BoardStatusNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardStatusNotification>;
    /**
     *
     * Create Board Status Notification
     * @param boardId
     * @param statusId
     * @param boardStatusNotification
     */
    serviceBoardsBoardIdStatusesStatusIdNotificationsPost(params: {
        boardId: number;
        statusId: number;
        boardStatusNotification: BoardStatusNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardStatusNotification>;
}
export class BoardStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Statuses Count
     * @param id
     * @param conditions
     */
    serviceBoardsIdStatusesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Statuses
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsIdStatusesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardStatus>>;
    /**
     *
     * Create Statuses
     * @param id
     * @param boardStatus
     */
    serviceBoardsIdStatusesPost(params: {
        id: number;
        boardStatus: BoardStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardStatus>;
    /**
     *
     * Delete Status By Id
     * @param id
     * @param statusId
     */
    serviceBoardsIdStatusesStatusIdDelete(params: {
        id: number;
        statusId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Status By Id
     * @param id
     * @param statusId
     */
    serviceBoardsIdStatusesStatusIdGet(params: {
        id: number;
        statusId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardStatus>;
    /**
     *
     * Update Status
     * @param id
     * @param statusId
     * @param operations
     */
    serviceBoardsIdStatusesStatusIdPatch(params: {
        id: number;
        statusId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardStatus>;
    /**
     *
     * Replace Statuses
     * @param id
     * @param statusId
     * @param boardStatus
     */
    serviceBoardsIdStatusesStatusIdPut(params: {
        id: number;
        statusId: number;
        boardStatus: BoardStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardStatus>;
}
export class BoardSubTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Subtypes Count
     * @param id
     * @param conditions
     */
    serviceBoardsIdSubtypesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Subtypes
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsIdSubtypesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardSubType>>;
    /**
     *
     * Create Subtype
     * @param id
     * @param boardSubType
     */
    serviceBoardsIdSubtypesPost(params: {
        id: number;
        boardSubType: BoardSubType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardSubType>;
    /**
     *
     * Delete Subtype By Id
     * @param id
     * @param subtypeId
     */
    serviceBoardsIdSubtypesSubtypeIdDelete(params: {
        id: number;
        subtypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Subtype By Id
     * @param id
     * @param subtypeId
     */
    serviceBoardsIdSubtypesSubtypeIdGet(params: {
        id: number;
        subtypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardSubType>;
    /**
     *
     * Update Subtype
     * @param id
     * @param subtypeId
     * @param operations
     */
    serviceBoardsIdSubtypesSubtypeIdPatch(params: {
        id: number;
        subtypeId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardSubType>;
    /**
     *
     * Replace Subtype
     * @param id
     * @param subtypeId
     * @param boardSubType
     */
    serviceBoardsIdSubtypesSubtypeIdPut(params: {
        id: number;
        subtypeId: number;
        boardSubType: BoardSubType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardSubType>;
}
export class BoardTeamsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Teams Count
     * @param id
     * @param conditions
     */
    serviceBoardsIdTeamsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Teams
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsIdTeamsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardTeam>>;
    /**
     *
     * Create Team
     * @param id
     * @param boardTeam
     */
    serviceBoardsIdTeamsPost(params: {
        id: number;
        boardTeam: BoardTeam;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardTeam>;
    /**
     *
     * Delete Team By Id
     * @param id
     * @param teamId
     */
    serviceBoardsIdTeamsTeamIdDelete(params: {
        id: number;
        teamId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Team By Id
     * @param id
     * @param teamId
     */
    serviceBoardsIdTeamsTeamIdGet(params: {
        id: number;
        teamId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardTeam>;
    /**
     *
     * Update Team
     * @param id
     * @param teamId
     * @param operations
     */
    serviceBoardsIdTeamsTeamIdPatch(params: {
        id: number;
        teamId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardTeam>;
    /**
     *
     * Replace Team
     * @param id
     * @param teamId
     * @param boardTeam
     */
    serviceBoardsIdTeamsTeamIdPut(params: {
        id: number;
        teamId: number;
        boardTeam: BoardTeam;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardTeam>;
}
export class BoardTypeSubTypeItemAssociationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Board Type Sub Type Item Associations Count
     * @param id
     * @param conditions
     */
    serviceBoardsIdTypeSubTypeItemAssociationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Board Type Sub Type Item Associations
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsIdTypeSubTypeItemAssociationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardTypeSubTypeItemAssociation>>;
    /**
     *
     * Get Board Type Sub Type Item Association By Id
     * @param id
     * @param typeSubTypeItemAssociationId
     */
    serviceBoardsIdTypeSubTypeItemAssociationsTypeSubTypeItemAssociationIdGet(params: {
        id: number;
        typeSubTypeItemAssociationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardTypeSubTypeItemAssociation>;
}
export class BoardTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Types Count
     * @param id
     * @param conditions
     */
    serviceBoardsIdTypesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Types
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsIdTypesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardType>>;
    /**
     *
     * Create Type
     * @param id
     * @param boardType
     */
    serviceBoardsIdTypesPost(params: {
        id: number;
        boardType: BoardType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardType>;
    /**
     *
     * Delete Type By Id
     * @param id
     * @param typeId
     */
    serviceBoardsIdTypesTypeIdDelete(params: {
        id: number;
        typeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Type By Id
     * @param id
     * @param typeId
     */
    serviceBoardsIdTypesTypeIdGet(params: {
        id: number;
        typeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardType>;
    /**
     *
     * Update Types
     * @param id
     * @param typeId
     * @param operations
     */
    serviceBoardsIdTypesTypeIdPatch(params: {
        id: number;
        typeId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardType>;
    /**
     *
     * Replace Types
     * @param id
     * @param typeId
     * @param boardType
     */
    serviceBoardsIdTypesTypeIdPut(params: {
        id: number;
        typeId: number;
        boardType: BoardType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardType>;
}
export class BoardsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Copy Board
     * @param copy
     */
    serviceBoardsCopyPost(params: {
        copy: BoardCopy;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Board>;
    /**
     *
     * Get Boards Count
     * @param conditions
     */
    serviceBoardsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Boards
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceBoardsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Board>>;
    /**
     *
     * Delete Board By Id
     * @param id
     */
    serviceBoardsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Board By Id
     * @param id
     */
    serviceBoardsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Board>;
    /**
     *
     * Update Board
     * @param id
     * @param operations
     */
    serviceBoardsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Board>;
    /**
     *
     * Replace Board
     * @param id
     * @param board
     */
    serviceBoardsIdPut(params: {
        id: number;
        board: Board;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Board>;
    /**
     *
     * Create Board
     * @param board
     */
    serviceBoardsPost(params: {
        board: Board;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Board>;
}
export class CalendarsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Calendars Count
     * @param conditions
     */
    systemCalendarsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Calendar>;
    /**
     *
     * Get Calendars
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemCalendarsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Calendar>>;
    /**
     *
     * Get Calendar By Id
     * @param id
     */
    systemCalendarsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Calendar>;
}
export class CallbacksApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Callback Entries Count
     * @param conditions
     */
    systemCallbacksCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Callback Entries
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemCallbacksGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CallbackEntry>>;
    /**
     *
     * Delete Callback Entry By Id
     * @param id
     */
    systemCallbacksIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Callback Entry By Id
     * @param id
     */
    systemCallbacksIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CallbackEntry>;
    /**
     *
     * Update Callback Entry
     * @param id
     * @param operations
     */
    systemCallbacksIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CallbackEntry>;
    /**
     *
     * Replace Callback Entry
     * @param id
     * @param callbackEntry
     */
    systemCallbacksIdPut(params: {
        id: number;
        callbackEntry: CallbackEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CallbackEntry>;
    /**
     *
     * Create Callback Entry
     * @param callbackEntry
     */
    systemCallbacksPost(params: {
        callbackEntry: CallbackEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CallbackEntry>;
}
export class CampaignAuditsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Campaign Audit By Id
     * @param id
     * @param auditId
     */
    marketingCampaignsIdAuditsAuditIdDelete(params: {
        id: number;
        auditId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Campaign Audit By Id
     * @param id
     * @param auditId
     */
    marketingCampaignsIdAuditsAuditIdGet(params: {
        id: number;
        auditId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignAudit>;
    /**
     *
     * Update Campaign Audit
     * @param id
     * @param auditId
     * @param operations
     */
    marketingCampaignsIdAuditsAuditIdPatch(params: {
        id: number;
        auditId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignAudit>;
    /**
     *
     * Replace Campaign Audit
     * @param id
     * @param auditId
     * @param campaignAudit
     */
    marketingCampaignsIdAuditsAuditIdPut(params: {
        id: number;
        auditId: number;
        campaignAudit: CampaignAudit;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignAudit>;
    /**
     *
     * Get Campaign Audits Count
     * @param id
     * @param conditions
     */
    marketingCampaignsIdAuditsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Campaign Audits
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    marketingCampaignsIdAuditsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CampaignAudit>>;
    /**
     *
     * Create Campaign Audit
     * @param id
     * @param campaignAudit
     */
    marketingCampaignsIdAuditsPost(params: {
        id: number;
        campaignAudit: CampaignAudit;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignAudit>;
}
export class CampaignEmailsOpenedApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Emails Opened Count
     * @param id
     * @param conditions
     */
    marketingCampaignsIdEmailsOpenedCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Email Opened By Id
     * @param id
     * @param emailOpenedId
     */
    marketingCampaignsIdEmailsOpenedEmailOpenedIdDelete(params: {
        id: number;
        emailOpenedId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Email Opened By Id
     * @param id
     * @param emailOpenedId
     */
    marketingCampaignsIdEmailsOpenedEmailOpenedIdGet(params: {
        id: number;
        emailOpenedId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailOpened>;
    /**
     *
     * Update Email Opened
     * @param id
     * @param emailOpenedId
     * @param operations
     */
    marketingCampaignsIdEmailsOpenedEmailOpenedIdPatch(params: {
        id: number;
        emailOpenedId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailOpened>;
    /**
     *
     * Replace Email Opened
     * @param id
     * @param emailOpenedId
     * @param emailOpened
     */
    marketingCampaignsIdEmailsOpenedEmailOpenedIdPut(params: {
        id: number;
        emailOpenedId: number;
        emailOpened: EmailOpened;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailOpened>;
    /**
     *
     * Get Emails Opened
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    marketingCampaignsIdEmailsOpenedGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<EmailOpened>>;
    /**
     *
     * Create Email Opened
     * @param id
     * @param emailOpened
     */
    marketingCampaignsIdEmailsOpenedPost(params: {
        id: number;
        emailOpened: EmailOpened;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailOpened>;
}
export class CampaignFormsSubmittedApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Forms Submitted Count
     * @param id
     * @param conditions
     */
    marketingCampaignsIdFormsSubmittedCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Form Submitted By Id
     * @param id
     * @param formSubmittedId
     */
    marketingCampaignsIdFormsSubmittedFormSubmittedIdDelete(params: {
        id: number;
        formSubmittedId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Form Submitted By Id
     * @param id
     * @param formSubmittedId
     */
    marketingCampaignsIdFormsSubmittedFormSubmittedIdGet(params: {
        id: number;
        formSubmittedId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<FormSubmitted>;
    /**
     *
     * Update Form Submitted
     * @param id
     * @param formSubmittedId
     * @param operations
     */
    marketingCampaignsIdFormsSubmittedFormSubmittedIdPatch(params: {
        id: number;
        formSubmittedId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<FormSubmitted>;
    /**
     *
     * Replace Form Submitted
     * @param id
     * @param formSubmittedId
     * @param formSubmitted
     */
    marketingCampaignsIdFormsSubmittedFormSubmittedIdPut(params: {
        id: number;
        formSubmittedId: number;
        formSubmitted: FormSubmitted;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<FormSubmitted>;
    /**
     *
     * Get Forms Submitted
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    marketingCampaignsIdFormsSubmittedGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<FormSubmitted>>;
    /**
     *
     * Create Form Submitted
     * @param id
     * @param formSubmitted
     */
    marketingCampaignsIdFormsSubmittedPost(params: {
        id: number;
        formSubmitted: FormSubmitted;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<FormSubmitted>;
}
export class CampaignLinksClickedApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Links Clicked Count
     * @param id
     * @param conditions
     */
    marketingCampaignsIdLinksClickedCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Links Clicked
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    marketingCampaignsIdLinksClickedGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<LinkClicked>>;
    /**
     *
     * Delete Link Clicked By Id
     * @param id
     * @param linkClickedId
     */
    marketingCampaignsIdLinksClickedLinkClickedIdDelete(params: {
        id: number;
        linkClickedId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Link Clicked By Id
     * @param id
     * @param linkClickedId
     */
    marketingCampaignsIdLinksClickedLinkClickedIdGet(params: {
        id: number;
        linkClickedId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LinkClicked>;
    /**
     *
     * Update Link Clicked
     * @param id
     * @param linkClickedId
     * @param operations
     */
    marketingCampaignsIdLinksClickedLinkClickedIdPatch(params: {
        id: number;
        linkClickedId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LinkClicked>;
    /**
     *
     * Replace Link Clicked
     * @param id
     * @param linkClickedId
     * @param linkClicked
     */
    marketingCampaignsIdLinksClickedLinkClickedIdPut(params: {
        id: number;
        linkClickedId: number;
        linkClicked: LinkClicked;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LinkClicked>;
    /**
     *
     * Create Link Clicked
     * @param id
     * @param linkClicked
     */
    marketingCampaignsIdLinksClickedPost(params: {
        id: number;
        linkClicked: LinkClicked;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LinkClicked>;
}
export class CampaignStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Campaign Statuses Count
     * @param conditions
     */
    marketingCampaignsStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Campaign Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    marketingCampaignsStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CampaignStatus>>;
    /**
     *
     * Delete Campaign Status By Id
     * @param id
     */
    marketingCampaignsStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Campaign Status By Id
     * @param id
     */
    marketingCampaignsStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignStatus>;
    /**
     *
     * Update Campaign Status
     * @param id
     * @param operations
     */
    marketingCampaignsStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignStatus>;
    /**
     *
     * Replace Campaign Status
     * @param id
     * @param campaignStatus
     */
    marketingCampaignsStatusesIdPut(params: {
        id: number;
        campaignStatus: CampaignStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignStatus>;
    /**
     *
     * Create Campaign Status
     * @param campaignStatus
     */
    marketingCampaignsStatusesPost(params: {
        campaignStatus: CampaignStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignStatus>;
}
export class CampaignSubTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Campaign Sub Types Count
     * @param conditions
     */
    marketingCampaignsSubTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Campaign Sub Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    marketingCampaignsSubTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CampaignSubType>>;
    /**
     *
     * Delete Campaign Sub Type By Id
     * @param id
     */
    marketingCampaignsSubTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Campaign Sub Type By Id
     * @param id
     */
    marketingCampaignsSubTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignSubType>;
    /**
     *
     * Update Campaign Sub Type
     * @param id
     * @param operations
     */
    marketingCampaignsSubTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignSubType>;
    /**
     *
     * Replace Campaign Sub Type
     * @param id
     * @param campaignSubType
     */
    marketingCampaignsSubTypesIdPut(params: {
        id: number;
        campaignSubType: CampaignSubType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignSubType>;
    /**
     *
     * Create Campaign Sub Type
     * @param campaignSubType
     */
    marketingCampaignsSubTypesPost(params: {
        campaignSubType: CampaignSubType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignSubType>;
}
export class CampaignTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Campaign Types Count
     * @param conditions
     */
    marketingCampaignsTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Campaign Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    marketingCampaignsTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CampaignType>>;
    /**
     *
     * Delete Campaign Type By Id
     * @param id
     */
    marketingCampaignsTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Campaign Type By Id
     * @param id
     */
    marketingCampaignsTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignType>;
    /**
     *
     * Update Campaign Type
     * @param id
     * @param operations
     */
    marketingCampaignsTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignType>;
    /**
     *
     * Replace Campaign Type
     * @param id
     * @param campaignType
     */
    marketingCampaignsTypesIdPut(params: {
        id: number;
        campaignType: CampaignType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignType>;
    /**
     *
     * Create Campaign Type
     * @param campaignType
     */
    marketingCampaignsTypesPost(params: {
        campaignType: CampaignType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignType>;
}
export class CampaignsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Campaigns Count
     * @param conditions
     */
    marketingCampaignsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Campaigns
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    marketingCampaignsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Campaign>>;
    /**
     *
     * Get Campaign Activities Count
     * @param id
     */
    marketingCampaignsIdActivitiesCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Campaign Activities
     * @param id
     * @param page
     * @param pageSize
     */
    marketingCampaignsIdActivitiesGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ActivityReference>>;
    /**
     *
     * Delete Campaign By Id
     * @param id
     */
    marketingCampaignsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Campaign By Id
     * @param id
     */
    marketingCampaignsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Campaign>;
    /**
     *
     * Get Campaign Opportunities Count
     * @param id
     */
    marketingCampaignsIdOpportunitiesCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Campaign Opportunities
     * @param id
     * @param page
     * @param pageSize
     */
    marketingCampaignsIdOpportunitiesGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityReference>>;
    /**
     *
     * Update Campaign
     * @param id
     * @param operations
     */
    marketingCampaignsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Campaign>;
    /**
     *
     * Replace Campaign
     * @param id
     * @param campaign
     */
    marketingCampaignsIdPut(params: {
        id: number;
        campaign: Campaign;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Campaign>;
    /**
     *
     * Create Campaign
     * @param campaign
     */
    marketingCampaignsPost(params: {
        campaign: Campaign;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Campaign>;
}
export class CatalogComponentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Catalog Component By Id
     * @param id
     * @param componentId
     */
    procurementCatalogIdComponentsComponentIdDelete(params: {
        id: number;
        componentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Catalog Component By Id
     * @param id
     * @param componentId
     */
    procurementCatalogIdComponentsComponentIdGet(params: {
        id: number;
        componentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogComponent>;
    /**
     *
     * Update Catalog Component
     * @param id
     * @param componentId
     * @param operations
     */
    procurementCatalogIdComponentsComponentIdPatch(params: {
        id: number;
        componentId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogComponent>;
    /**
     *
     * Replace Catalog Component
     * @param id
     * @param componentId
     * @param catalogComponent
     */
    procurementCatalogIdComponentsComponentIdPut(params: {
        id: number;
        componentId: number;
        catalogComponent: CatalogComponent;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogComponent>;
    /**
     *
     * Get Catalog Components Count
     * @param id
     * @param conditions
     */
    procurementCatalogIdComponentsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Catalog Components
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementCatalogIdComponentsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CatalogComponent>>;
    /**
     *
     * Create Catalog Component
     * @param id
     * @param catalogComponent
     */
    procurementCatalogIdComponentsPost(params: {
        id: number;
        catalogComponent: CatalogComponent;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogComponent>;
}
export class CatalogsItemApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Inventory Quantity On Hand
     * @param catalogItemIdentifier
     * @param warehouseBinId
     */
    procurementCatalogCatalogItemIdentifierQuantityOnHandGet(params: {
        catalogItemIdentifier: string;
        warehouseBinId?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Catalogs Count
     * @param conditions
     */
    procurementCatalogCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Catalogs
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementCatalogGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CatalogItem>>;
    /**
     *
     * Delete Catalog By Id
     * @param id
     */
    procurementCatalogIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Catalog By Id
     * @param id
     */
    procurementCatalogIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogItem>;
    /**
     *
     * Update Catalog
     * @param id
     * @param operations
     */
    procurementCatalogIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogItem>;
    /**
     *
     * Replace Catalog
     * @param id
     * @param catalogItem
     */
    procurementCatalogIdPut(params: {
        id: number;
        catalogItem: CatalogItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogItem>;
    /**
     *
     * Create Catalog
     * @param catalogItem
     */
    procurementCatalogPost(params: {
        catalogItem: CatalogItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogItem>;
}
export class CategoriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Categories Count
     * @param conditions
     */
    procurementCategoriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Categories
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementCategoriesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Category>>;
    /**
     *
     * Delete Category By Id
     * @param id
     */
    procurementCategoriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Category By Id
     * @param id
     */
    procurementCategoriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Category>;
    /**
     *
     * Update Category
     * @param id
     * @param operations
     */
    procurementCategoriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Category>;
    /**
     *
     * Replace Category
     * @param id
     * @param category
     */
    procurementCategoriesIdPut(params: {
        id: number;
        category: Category;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Category>;
    /**
     *
     * Create Category
     * @param category
     */
    procurementCategoriesPost(params: {
        category: Category;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Category>;
}
export class CertificationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Certification Count
     * @param conditions
     */
    systemCertificationsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Certification
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemCertificationsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Certification>>;
    /**
     *
     * Delete Certification By Id
     * @param id
     */
    systemCertificationsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Certification By Id
     * @param id
     */
    systemCertificationsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Certification>;
    /**
     *
     * Update Certification
     * @param id
     * @param operations
     */
    systemCertificationsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Certification>;
    /**
     *
     * Replace Certification
     * @param id
     * @param certification
     */
    systemCertificationsIdPut(params: {
        id: number;
        certification: Certification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Certification>;
    /**
     *
     * Create Certification
     * @param certification
     */
    systemCertificationsPost(params: {
        certification: Certification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Certification>;
}
export class ChargeCodeExpenseTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Charge Code Expense Entries Count
     * @param id
     * @param conditions
     */
    timeChargeCodesIdExpenseTypesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Charge Code Expense Type By Id
     * @param id
     * @param expenseTypeId
     */
    timeChargeCodesIdExpenseTypesExpenseTypeIdDelete(params: {
        id: number;
        expenseTypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Charge Code Expense Type By Id
     * @param id
     * @param expenseTypeId
     */
    timeChargeCodesIdExpenseTypesExpenseTypeIdGet(params: {
        id: number;
        expenseTypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ChargeCodeExpenseType>;
    /**
     *
     * Update Charge Code Expense Type
     * @param id
     * @param expenseTypeId
     * @param operations
     */
    timeChargeCodesIdExpenseTypesExpenseTypeIdPatch(params: {
        id: number;
        expenseTypeId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ChargeCodeExpenseType>;
    /**
     *
     * Replace Charge Code Expense Type
     * @param id
     * @param expenseTypeId
     * @param chargeCodeExpenseType
     */
    timeChargeCodesIdExpenseTypesExpenseTypeIdPut(params: {
        id: number;
        expenseTypeId: number;
        chargeCodeExpenseType: ChargeCodeExpenseType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ChargeCodeExpenseType>;
    /**
     *
     * Get Charge Code Expense Entries
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeChargeCodesIdExpenseTypesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ChargeCodeExpenseType>>;
    /**
     *
     * Create Charge Code Expense Type
     * @param id
     * @param chargeCodeExpenseType
     */
    timeChargeCodesIdExpenseTypesPost(params: {
        id: number;
        chargeCodeExpenseType: ChargeCodeExpenseType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ChargeCodeExpenseType>;
}
export class ChargeCodesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Charge Code Count
     * @param conditions
     */
    timeChargeCodesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Charge Code
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeChargeCodesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ChargeCode>>;
    /**
     *
     * Delete Charge Code By Id
     * @param id
     */
    timeChargeCodesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Charge Code By Id
     * @param id
     */
    timeChargeCodesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ChargeCode>;
    /**
     *
     * Update Charge Code
     * @param id
     * @param operations
     */
    timeChargeCodesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ChargeCode>;
    /**
     *
     * Replace Charge Code
     * @param id
     * @param chargeCode
     */
    timeChargeCodesIdPut(params: {
        id: number;
        chargeCode: ChargeCode;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ChargeCode>;
    /**
     *
     * Create Charge Code
     * @param chargeCode
     */
    timeChargeCodesPost(params: {
        chargeCode: ChargeCode;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ChargeCode>;
}
export class ClassificationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Classification Count
     * @param conditions
     */
    expenseClassificationsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Expense Classification
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    expenseClassificationsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Classification>>;
    /**
     *
     * Get Classification By Id
     * @param id
     */
    expenseClassificationsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Classification>;
}
export class CodesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Create Codes Count
     * @param conditions
     */
    serviceCodesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Codes
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceCodesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Code>>;
    /**
     *
     * Delete Code By Id
     * @param id
     */
    serviceCodesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Code By Id
     * @param id
     */
    serviceCodesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Code>;
    /**
     *
     * Update Code
     * @param id
     * @param operations
     */
    serviceCodesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Code>;
    /**
     *
     * Replace Code
     * @param id
     * @param code
     */
    serviceCodesIdPut(params: {
        id: number;
        code: Code;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Code>;
    /**
     *
     * Create Codes
     * @param code
     */
    serviceCodesPost(params: {
        code: Code;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Code>;
}
export class CommissionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Commissions Count
     * @param conditions
     */
    salesCommissionsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Commissions
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesCommissionsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Commission>>;
    /**
     *
     * Delete Commission By Id
     * @param id
     */
    salesCommissionsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Commission By Id
     * @param id
     */
    salesCommissionsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Commission>;
    /**
     *
     * Update Commission
     * @param id
     * @param operations
     */
    salesCommissionsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Commission>;
    /**
     *
     * Replace Commission
     * @param id
     * @param commission
     */
    salesCommissionsIdPut(params: {
        id: number;
        commission: Commission;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Commission>;
    /**
     *
     * Create Commission
     * @param commission
     */
    salesCommissionsPost(params: {
        commission: Commission;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Commission>;
}
export class CompaniesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Companies Count
     * @param conditions
     * @param customFieldConditions
     */
    companyCompaniesCountGet(params: {
        conditions?: string;
        customFieldConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Companies
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyCompaniesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Company>>;
    /**
     *
     * Delete Company By Id
     * @param id
     */
    companyCompaniesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Company By Id
     * @param id
     */
    companyCompaniesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Company>;
    /**
     *
     * Merge Company
     * @param id
     * @param merge
     */
    companyCompaniesIdMergePost(params: {
        id: number;
        merge: CompanyMerge;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SuccessResponse>;
    /**
     *
     * Update Company
     * @param id
     * @param operations
     */
    companyCompaniesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Company>;
    /**
     *
     * Replace Company
     * @param id
     * @param company
     */
    companyCompaniesIdPut(params: {
        id: number;
        company: Company;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Company>;
    /**
     *
     * Create Company
     * @param company
     */
    companyCompaniesPost(params: {
        company: Company;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Company>;
}
export class CompanyCustomNotesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Custom Note Count
     * @param id
     * @param conditions
     */
    companyCompaniesIdCustomStatusNotesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Custom Note By Id
     * @param id
     * @param customNoteId
     */
    companyCompaniesIdCustomStatusNotesCustomNoteIdDelete(params: {
        id: number;
        customNoteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Custom Note By Id
     * @param id
     * @param customNoteId
     */
    companyCompaniesIdCustomStatusNotesCustomNoteIdGet(params: {
        id: number;
        customNoteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyCustomNote>;
    /**
     *
     * Update Custom Note
     * @param id
     * @param customNoteId
     * @param operations
     */
    companyCompaniesIdCustomStatusNotesCustomNoteIdPatch(params: {
        id: number;
        customNoteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyCustomNote>;
    /**
     *
     * Replace Custom Note
     * @param id
     * @param customNoteId
     * @param customNote
     */
    companyCompaniesIdCustomStatusNotesCustomNoteIdPut(params: {
        id: number;
        customNoteId: number;
        customNote: CompanyCustomNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyCustomNote>;
    /**
     *
     * Get Custom Note
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyCompaniesIdCustomStatusNotesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyCustomNote>>;
    /**
     *
     * Create Custom Note
     * @param id
     * @param customNote
     */
    companyCompaniesIdCustomStatusNotesPost(params: {
        id: number;
        customNote: CompanyCustomNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyCustomNote>;
}
export class CompanyGroupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Company Groups Count
     * @param id
     * @param conditions
     */
    companyCompaniesIdGroupsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Company Groups
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyCompaniesIdGroupsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyGroup>>;
    /**
     *
     * Delete Company Group By Id
     * @param id
     * @param groupid
     */
    companyCompaniesIdGroupsGroupidDelete(params: {
        id: number;
        groupid: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Company Group By Id
     * @param id
     * @param groupid
     */
    companyCompaniesIdGroupsGroupidGet(params: {
        id: number;
        groupid: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyGroup>;
    /**
     *
     * Update Company Group
     * @param id
     * @param groupid
     * @param operations
     */
    companyCompaniesIdGroupsGroupidPatch(params: {
        id: number;
        groupid: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyGroup>;
    /**
     *
     * Replace Company Group
     * @param id
     * @param groupid
     * @param companyGroup
     */
    companyCompaniesIdGroupsGroupidPut(params: {
        id: number;
        groupid: number;
        companyGroup: CompanyGroup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyGroup>;
    /**
     *
     * Create Company Group
     * @param id
     * @param companyGroup
     */
    companyCompaniesIdGroupsPost(params: {
        id: number;
        companyGroup: CompanyGroup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyGroup>;
}
export class CompanyManagementSummaryReportsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Company Types Count
     * @param id
     * @param conditions
     */
    companyCompaniesIdManagementSummaryReportsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Management Summarys
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyCompaniesIdManagementSummaryReportsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyManagementSummary>>;
    /**
     *
     * Create Management Summary
     * @param id
     * @param managementSummary
     */
    companyCompaniesIdManagementSummaryReportsPost(params: {
        id: number;
        managementSummary: CompanyManagementSummary;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyManagementSummary>;
    /**
     *
     * Delete Management Summary By Id
     * @param id
     * @param reportId
     */
    companyCompaniesIdManagementSummaryReportsReportIdDelete(params: {
        id: number;
        reportId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Management Summary By Id
     * @param id
     * @param reportId
     */
    companyCompaniesIdManagementSummaryReportsReportIdGet(params: {
        id: number;
        reportId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyManagementSummary>;
    /**
     *
     * Update Management Summary
     * @param id
     * @param reportId
     * @param operations
     */
    companyCompaniesIdManagementSummaryReportsReportIdPatch(params: {
        id: number;
        reportId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyManagementSummary>;
    /**
     *
     * Replace Management Summary
     * @param id
     * @param reportId
     * @param managementSummary
     */
    companyCompaniesIdManagementSummaryReportsReportIdPut(params: {
        id: number;
        reportId: number;
        managementSummary: CompanyManagementSummary;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyManagementSummary>;
}
export class CompanyNoteTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Note Type Count
     * @param conditions
     */
    companyNoteTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Note Type
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyNoteTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<NoteType>>;
    /**
     *
     * Delete Note Type By Id
     * @param id
     */
    companyNoteTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Note Type By Id
     * @param id
     */
    companyNoteTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<NoteType>;
    /**
     *
     * Update Note Type
     * @param id
     * @param operations
     */
    companyNoteTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<NoteType>;
    /**
     *
     * Replace Note Type
     * @param id
     * @param noteType
     */
    companyNoteTypesIdPut(params: {
        id: number;
        noteType: NoteType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<NoteType>;
    /**
     *
     * Create Note Type
     * @param noteType
     */
    companyNoteTypesPost(params: {
        noteType: NoteType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<NoteType>;
}
export class CompanyNotesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Company Notes Count
     * @param id
     * @param conditions
     */
    companyCompaniesIdNotesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Company Notes
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyCompaniesIdNotesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyNote>>;
    /**
     *
     * Delete Company Note By Id
     * @param id
     * @param noteId
     */
    companyCompaniesIdNotesNoteIdDelete(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Company Note By Id
     * @param id
     * @param noteId
     */
    companyCompaniesIdNotesNoteIdGet(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyNote>;
    /**
     *
     * Update Company Note
     * @param id
     * @param noteId
     * @param operations
     */
    companyCompaniesIdNotesNoteIdPatch(params: {
        id: number;
        noteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyNote>;
    /**
     *
     * Replace Company Note
     * @param id
     * @param noteId
     * @param companyNote
     */
    companyCompaniesIdNotesNoteIdPut(params: {
        id: number;
        noteId: number;
        companyNote: CompanyNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyNote>;
    /**
     *
     * Create Company Note
     * @param id
     * @param companyNote
     */
    companyCompaniesIdNotesPost(params: {
        id: number;
        companyNote: CompanyNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyNote>;
}
export class CompanyPickerItemsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Clear All Picker Items By Member
     * @param member
     * @param type
     */
    companyCompanyPickerItemsClearPost(params: {
        member?: string;
        type?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ClearPickerRequest>;
    /**
     *
     * Get Company Picker Items Count
     * @param conditions
     */
    companyCompanyPickerItemsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Company Picker Items
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyCompanyPickerItemsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyPickerItem>>;
    /**
     *
     * Delete Company Picker Item
     * @param id
     */
    companyCompanyPickerItemsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Company Picker Item By Id
     * @param id
     */
    companyCompanyPickerItemsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyPickerItem>;
    /**
     *
     * Add Company Picker Item
     * @param companyPickerItem
     */
    companyCompanyPickerItemsPost(params: {
        companyPickerItem: CompanyPickerItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyPickerItem>;
}
export class CompanySitesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Sites Count
     * @param id
     * @param conditions
     */
    companyCompaniesIdSitesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Sites
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyCompaniesIdSitesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanySite>>;
    /**
     *
     * Create Site
     * @param id
     * @param site
     */
    companyCompaniesIdSitesPost(params: {
        id: number;
        site: CompanySite;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanySite>;
    /**
     *
     * Delete Site By Id
     * @param id
     * @param siteId
     */
    companyCompaniesIdSitesSiteIdDelete(params: {
        id: number;
        siteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Site By Id
     * @param id
     * @param siteId
     */
    companyCompaniesIdSitesSiteIdGet(params: {
        id: number;
        siteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanySite>;
    /**
     *
     * Update Site
     * @param id
     * @param siteId
     * @param operations
     */
    companyCompaniesIdSitesSiteIdPatch(params: {
        id: number;
        siteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanySite>;
    /**
     *
     * Replace Site
     * @param id
     * @param siteId
     * @param site
     */
    companyCompaniesIdSitesSiteIdPut(params: {
        id: number;
        siteId: number;
        site: CompanySite;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanySite>;
}
export class CompanyStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Company Statuses Count
     * @param conditions
     */
    companyCompaniesStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Company Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyCompaniesStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyStatus>>;
    /**
     *
     * Delete Company Status By Id
     * @param id
     */
    companyCompaniesStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Company Status By Id
     * @param id
     */
    companyCompaniesStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyStatus>;
    /**
     *
     * Update Company Status
     * @param id
     * @param operations
     */
    companyCompaniesStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyStatus>;
    /**
     *
     * Replace Company Status
     * @param id
     * @param companyStatus
     */
    companyCompaniesStatusesIdPut(params: {
        id: number;
        companyStatus: CompanyStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyStatus>;
    /**
     *
     * Create Company Status
     * @param companyStatus
     */
    companyCompaniesStatusesPost(params: {
        companyStatus: CompanyStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyStatus>;
}
export class CompanyTeamsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Company Teams Count
     * @param id
     * @param conditions
     */
    companyCompaniesIdTeamsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Company Teams
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyCompaniesIdTeamsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyTeam>>;
    /**
     *
     * Create Company Team
     * @param id
     * @param companyTeam
     */
    companyCompaniesIdTeamsPost(params: {
        id: number;
        companyTeam: CompanyTeam;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyTeam>;
    /**
     *
     * Delete Company Team By Id
     * @param id
     * @param teamId
     */
    companyCompaniesIdTeamsTeamIdDelete(params: {
        id: number;
        teamId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Company Team By Id
     * @param id
     * @param teamId
     */
    companyCompaniesIdTeamsTeamIdGet(params: {
        id: number;
        teamId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyTeam>;
    /**
     *
     * Update Company Team
     * @param id
     * @param teamId
     * @param operations
     */
    companyCompaniesIdTeamsTeamIdPatch(params: {
        id: number;
        teamId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyTeam>;
    /**
     *
     * Replace Company Team
     * @param id
     * @param teamId
     * @param companyTeam
     */
    companyCompaniesIdTeamsTeamIdPut(params: {
        id: number;
        teamId: number;
        companyTeam: CompanyTeam;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyTeam>;
}
export class CompanyTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Company Types Count
     * @param conditions
     */
    companyCompaniesTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Company Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyCompaniesTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyType>>;
    /**
     *
     * Delete Company Type By Id
     * @param id
     */
    companyCompaniesTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Company Type By Id
     * @param id
     */
    companyCompaniesTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyType>;
    /**
     *
     * Update Company Type
     * @param id
     * @param operations
     */
    companyCompaniesTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyType>;
    /**
     *
     * Replace Company Type
     * @param id
     * @param companyType
     */
    companyCompaniesTypesIdPut(params: {
        id: number;
        companyType: CompanyType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyType>;
    /**
     *
     * Create Company Type
     * @param companyType
     */
    companyCompaniesTypesPost(params: {
        companyType: CompanyType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyType>;
}
export class ConfigurationStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Configuration Statuses Count
     * @param conditions
     */
    companyConfigurationsStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Configuration Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyConfigurationsStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConfigurationStatus>>;
    /**
     *
     * Delete Configuration Status By Id
     * @param id
     */
    companyConfigurationsStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Configuration Status By Id
     * @param id
     */
    companyConfigurationsStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationStatus>;
    /**
     *
     * Update Configuration Status
     * @param id
     * @param operations
     */
    companyConfigurationsStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationStatus>;
    /**
     *
     * Replace Configuration Status
     * @param id
     * @param configurationStatus
     */
    companyConfigurationsStatusesIdPut(params: {
        id: number;
        configurationStatus: ConfigurationStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationStatus>;
    /**
     *
     * Create Configuration Status
     * @param configurationStatus
     */
    companyConfigurationsStatusesPost(params: {
        configurationStatus: ConfigurationStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationStatus>;
}
export class ConfigurationTypeQuestionValuesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Configuration Type Question Values Count
     * @param questionId
     * @param conditions
     */
    companyConfigurationsTypesConfigurationTypeIdintQuestionsQuestionIdintValuesCountGet(params: {
        questionId: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Configuration Type Question Values
     * @param questionId
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyConfigurationsTypesConfigurationTypeIdintQuestionsQuestionIdintValuesGet(params: {
        questionId: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConfigurationTypeQuestionValue>>;
    /**
     *
     * Delete Configuration Type Question Value By Id
     * @param questionId
     * @param id
     */
    companyConfigurationsTypesConfigurationTypeIdintQuestionsQuestionIdintValuesIdDelete(params: {
        questionId: number;
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Configuration Type Question Value By Id
     * @param questionId
     * @param id
     */
    companyConfigurationsTypesConfigurationTypeIdintQuestionsQuestionIdintValuesIdGet(params: {
        questionId: number;
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationTypeQuestionValue>;
    /**
     *
     * Update Configuration Type Question Value
     * @param configurationTypeId
     * @param questionId
     * @param id
     * @param operations
     */
    companyConfigurationsTypesConfigurationTypeIdintQuestionsQuestionIdintValuesIdPatch(params: {
        configurationTypeId: number;
        questionId: number;
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationTypeQuestionValue>;
    /**
     *
     * Replace Configuration Type Question Value
     * @param configurationTypeId
     * @param questionId
     * @param id
     * @param configurationTypeQuestionValue
     */
    companyConfigurationsTypesConfigurationTypeIdintQuestionsQuestionIdintValuesIdPut(params: {
        configurationTypeId: number;
        questionId: number;
        id: number;
        configurationTypeQuestionValue: ConfigurationTypeQuestionValue;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationTypeQuestionValue>;
    /**
     *
     * Create Configuration Type Question Value
     * @param configurationTypeId
     * @param questionId
     * @param configurationTypeQuestionValue
     */
    companyConfigurationsTypesConfigurationTypeIdintQuestionsQuestionIdintValuesPost(params: {
        configurationTypeId: number;
        questionId: number;
        configurationTypeQuestionValue: ConfigurationTypeQuestionValue;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationTypeQuestionValue>;
}
export class ConfigurationTypeQuestionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Configuration Type Questions Count
     * @param id
     * @param conditions
     */
    companyConfigurationsTypesIdQuestionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Configuration Type Questions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyConfigurationsTypesIdQuestionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConfigurationTypeQuestion>>;
    /**
     *
     * Create Configuration Type Question
     * @param id
     * @param configurationTypeQuestion
     */
    companyConfigurationsTypesIdQuestionsPost(params: {
        id: number;
        configurationTypeQuestion: ConfigurationTypeQuestion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationTypeQuestion>;
    /**
     *
     * Delete Configuration Type Question By Id
     * @param id
     * @param questionId
     */
    companyConfigurationsTypesIdQuestionsQuestionIdDelete(params: {
        id: number;
        questionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Configuration Type Question By Id
     * @param id
     * @param questionId
     */
    companyConfigurationsTypesIdQuestionsQuestionIdGet(params: {
        id: number;
        questionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationTypeQuestion>;
    /**
     *
     * Update Configuration Type Question
     * @param id
     * @param questionId
     * @param operations
     */
    companyConfigurationsTypesIdQuestionsQuestionIdPatch(params: {
        id: number;
        questionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationTypeQuestion>;
    /**
     *
     * Replace Configuration Type Question
     * @param id
     * @param questionId
     * @param configurationTypeQuestion
     */
    companyConfigurationsTypesIdQuestionsQuestionIdPut(params: {
        id: number;
        questionId: number;
        configurationTypeQuestion: ConfigurationTypeQuestion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationTypeQuestion>;
}
export class ConfigurationTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Configuration Types Count
     * @param conditions
     */
    companyConfigurationsTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Configuration Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyConfigurationsTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConfigurationType>>;
    /**
     *
     * Delete Configuration Type By Id
     * @param id
     */
    companyConfigurationsTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Configuration Type By Id
     * @param id
     */
    companyConfigurationsTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationType>;
    /**
     *
     * Update Configuration Type
     * @param id
     * @param operations
     */
    companyConfigurationsTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationType>;
    /**
     *
     * Replace Configuration Type
     * @param id
     * @param configurationType
     */
    companyConfigurationsTypesIdPut(params: {
        id: number;
        configurationType: ConfigurationType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationType>;
    /**
     *
     * Create Configuration Type
     * @param configurationType
     */
    companyConfigurationsTypesPost(params: {
        configurationType: ConfigurationType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationType>;
}
export class ConfigurationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Configurations Count
     * @param conditions
     * @param managedIdentifier
     */
    companyConfigurationsCountGet(params: {
        conditions?: string;
        managedIdentifier?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Configurations
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     * @param managedIdentifier
     */
    companyConfigurationsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
        managedIdentifier?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Configuration>>;
    /**
     *
     * Delete Configuration By Id
     * @param id
     */
    companyConfigurationsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Configuration By Id
     * @param id
     */
    companyConfigurationsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Configuration>;
    /**
     *
     * Update Configuration
     * @param id
     * @param operations
     * @param managementSolutionName
     * @param managedIdentifier
     * @param type
     * @param level
     * @param childConfigurationsMatchingOn
     * @param inactivateConfigurationsMatchingOn
     * @param inactiveConfigurationStatusId
     */
    companyConfigurationsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
        managementSolutionName?: string;
        managedIdentifier?: string;
        type?: string;
        level?: string;
        childConfigurationsMatchingOn?: string;
        inactivateConfigurationsMatchingOn?: string;
        inactiveConfigurationStatusId?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Configuration>;
    /**
     *
     * Replace Configuration
     * @param id
     * @param configuration
     * @param managementSolutionName
     * @param managedIdentifier
     * @param type
     * @param level
     * @param childConfigurationsMatchingOn
     * @param inactivateConfigurationsMatchingOn
     * @param inactiveConfigurationStatusId
     */
    companyConfigurationsIdPut(params: {
        id: number;
        configuration: Configuration;
        managementSolutionName?: string;
        managedIdentifier?: string;
        type?: string;
        level?: string;
        childConfigurationsMatchingOn?: string;
        inactivateConfigurationsMatchingOn?: string;
        inactiveConfigurationStatusId?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Configuration>;
    /**
     *
     * Create Configuration
     * @param configuration
     * @param managementSolutionName
     * @param managedIdentifier
     * @param type
     * @param level
     * @param childConfigurationsMatchingOn
     * @param inactivateConfigurationsMatchingOn
     * @param inactiveConfigurationStatusId
     */
    companyConfigurationsPost(params: {
        configuration: Configuration;
        managementSolutionName?: string;
        managedIdentifier?: string;
        type?: string;
        level?: string;
        childConfigurationsMatchingOn?: string;
        inactivateConfigurationsMatchingOn?: string;
        inactiveConfigurationStatusId?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Configuration>;
}
export class ConnectWiseHostedSetupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Connect Wise Hosted Setups Count
     * @param conditions
     */
    systemConnectwisehostedsetupsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Connect Wise Hosted Setups
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemConnectwisehostedsetupsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConnectWiseHostedSetup>>;
    /**
     *
     * Delete Connect Wise Hosted Setup By Id
     * @param id
     */
    systemConnectwisehostedsetupsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Connect Wise Hosted Setup By Id
     * @param id
     */
    systemConnectwisehostedsetupsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConnectWiseHostedSetup>;
    /**
     *
     * Update Connect Wise Hosted Setup
     * @param id
     * @param operations
     */
    systemConnectwisehostedsetupsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConnectWiseHostedSetup>;
    /**
     *
     * Replace Connect Wise Hosted Setup
     * @param id
     * @param connectWiseHostedSetup
     */
    systemConnectwisehostedsetupsIdPut(params: {
        id: number;
        connectWiseHostedSetup: ConnectWiseHostedSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConnectWiseHostedSetup>;
    /**
     *
     * Create Connect Wise Hosted Setup
     * @param connectWiseHostedSetup
     */
    systemConnectwisehostedsetupsPost(params: {
        connectWiseHostedSetup: ConnectWiseHostedSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConnectWiseHostedSetup>;
}
export class ContactCommunicationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Contact Communication By Id
     * @param id
     * @param communicationId
     */
    companyContactsIdCommunicationsCommunicationIdDelete(params: {
        id: number;
        communicationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Contact Communication By Id
     * @param id
     * @param communicationId
     */
    companyContactsIdCommunicationsCommunicationIdGet(params: {
        id: number;
        communicationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactCommunication>;
    /**
     *
     * Update Contact Communication
     * @param id
     * @param communicationId
     * @param operations
     */
    companyContactsIdCommunicationsCommunicationIdPatch(params: {
        id: number;
        communicationId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactCommunication>;
    /**
     *
     * Replace Contact Communication
     * @param id
     * @param communicationId
     * @param contactCommunication
     */
    companyContactsIdCommunicationsCommunicationIdPut(params: {
        id: number;
        communicationId: number;
        contactCommunication: ContactCommunication;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactCommunication>;
    /**
     *
     * Get Contact Communications Count
     * @param id
     * @param conditions
     */
    companyContactsIdCommunicationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Contact Communications
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyContactsIdCommunicationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ContactCommunication>>;
    /**
     *
     * Create Contact Communication
     * @param id
     * @param contactCommunication
     */
    companyContactsIdCommunicationsPost(params: {
        id: number;
        contactCommunication: ContactCommunication;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactCommunication>;
}
export class ContactDepartmentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Contact Departments Count
     * @param conditions
     */
    companyContactsDepartmentsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Contact Departments
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyContactsDepartmentsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ContactDepartment>>;
    /**
     *
     * Delete Contact Department By Id
     * @param id
     */
    companyContactsDepartmentsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Contact Department By Id
     * @param id
     */
    companyContactsDepartmentsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactDepartment>;
    /**
     *
     * Update Contact Department
     * @param id
     * @param operations
     */
    companyContactsDepartmentsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactDepartment>;
    /**
     *
     * Replace Contact Department
     * @param id
     * @param contactDepartment
     */
    companyContactsDepartmentsIdPut(params: {
        id: number;
        contactDepartment: ContactDepartment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactDepartment>;
    /**
     *
     * Create Contact Department
     * @param contactDepartment
     */
    companyContactsDepartmentsPost(params: {
        contactDepartment: ContactDepartment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactDepartment>;
}
export class ContactGroupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Contact Groups Count
     * @param id
     * @param conditions
     */
    companyContactsIdGroupsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Contact Groups
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyContactsIdGroupsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ContactGroup>>;
    /**
     *
     * Delete Contact Group By Id
     * @param id
     * @param groupid
     */
    companyContactsIdGroupsGroupidDelete(params: {
        id: number;
        groupid: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Contact Group By Id
     * @param id
     * @param groupid
     */
    companyContactsIdGroupsGroupidGet(params: {
        id: number;
        groupid: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactGroup>;
    /**
     *
     * Update Contact Group
     * @param id
     * @param groupid
     * @param operations
     */
    companyContactsIdGroupsGroupidPatch(params: {
        id: number;
        groupid: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactGroup>;
    /**
     *
     * Replace Contact Group
     * @param id
     * @param groupid
     * @param contactGroup
     */
    companyContactsIdGroupsGroupidPut(params: {
        id: number;
        groupid: number;
        contactGroup: ContactGroup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactGroup>;
    /**
     *
     * Create Contact Group
     * @param id
     * @param contactGroup
     */
    companyContactsIdGroupsPost(params: {
        id: number;
        contactGroup: ContactGroup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactGroup>;
}
export class ContactNotesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Contact Notes Count
     * @param id
     * @param conditions
     */
    companyContactsIdNotesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Contact Notes
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyContactsIdNotesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ContactNote>>;
    /**
     *
     * Delete Contact Note By Id
     * @param id
     * @param noteId
     */
    companyContactsIdNotesNoteIdDelete(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Contact Note By Id
     * @param id
     * @param noteId
     */
    companyContactsIdNotesNoteIdGet(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactNote>;
    /**
     *
     * Update Contact Note
     * @param id
     * @param noteId
     * @param operations
     */
    companyContactsIdNotesNoteIdPatch(params: {
        id: number;
        noteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactNote>;
    /**
     *
     * Replace Contact Note
     * @param id
     * @param noteId
     * @param contactNote
     */
    companyContactsIdNotesNoteIdPut(params: {
        id: number;
        noteId: number;
        contactNote: ContactNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactNote>;
    /**
     *
     * Create Contact Note
     * @param id
     * @param contactNote
     */
    companyContactsIdNotesPost(params: {
        id: number;
        contactNote: ContactNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactNote>;
}
export class ContactRelationshipsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Contact Relationships Count
     * @param conditions
     */
    companyContactsRelationshipsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Contact Relationships
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyContactsRelationshipsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ContactRelationship>>;
    /**
     *
     * Delete Contact Relationship By Id
     * @param id
     */
    companyContactsRelationshipsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Contact Relationship By Id
     * @param id
     */
    companyContactsRelationshipsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactRelationship>;
    /**
     *
     * Update Contact Relationship
     * @param id
     * @param operations
     */
    companyContactsRelationshipsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactRelationship>;
    /**
     *
     * Replace Contact Relationship
     * @param id
     * @param contactRelationship
     */
    companyContactsRelationshipsIdPut(params: {
        id: number;
        contactRelationship: ContactRelationship;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactRelationship>;
    /**
     *
     * Create Contact Relationship
     * @param contactRelationship
     */
    companyContactsRelationshipsPost(params: {
        contactRelationship: ContactRelationship;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactRelationship>;
}
export class ContactTracksApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Tracks Count
     * @param id
     * @param conditions
     */
    companyContactsIdTracksCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Tracks
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyContactsIdTracksGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Track>>;
    /**
     *
     * Create Track
     * @param id
     * @param track
     */
    companyContactsIdTracksPost(params: {
        id: number;
        track: Track;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Track>;
    /**
     *
     * Delete Track By Id
     * @param id
     * @param trackId
     */
    companyContactsIdTracksTrackIdDelete(params: {
        id: number;
        trackId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Track By Id
     * @param id
     * @param trackId
     */
    companyContactsIdTracksTrackIdGet(params: {
        id: number;
        trackId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Track>;
}
export class ContactTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Contact Types Count
     * @param conditions
     */
    companyContactsTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Contact Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyContactsTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ContactType>>;
    /**
     *
     * Delete Contact Type By Id
     * @param id
     */
    companyContactsTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Contact Type By Id
     * @param id
     */
    companyContactsTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactType>;
    /**
     *
     * Update Contact Type
     * @param id
     * @param operations
     */
    companyContactsTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactType>;
    /**
     *
     * Replace Contact Type
     * @param id
     * @param contactType
     */
    companyContactsTypesIdPut(params: {
        id: number;
        contactType: ContactType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactType>;
    /**
     *
     * Create Contact Type
     * @param contactType
     */
    companyContactsTypesPost(params: {
        contactType: ContactType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactType>;
}
export class ContactsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Contacts Count
     * @param conditions
     * @param customFieldConditions
     * @param childConditions
     */
    companyContactsCountGet(params: {
        conditions?: string;
        customFieldConditions?: string;
        childConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Contacts
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyContactsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Contact>>;
    /**
     *
     * Delete Contact By Id
     * @param id
     * @param transferContactId
     */
    companyContactsIdDelete(params: {
        id: number;
        transferContactId?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Contact By Id
     * @param id
     */
    companyContactsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Contact>;
    /**
     *
     * Get Contact Image
     * @param id
     * @param useDefaultFlag
     * @param lastModified
     */
    companyContactsIdImageGet(params: {
        id: number;
        useDefaultFlag?: boolean;
        lastModified?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Update Contact
     * @param id
     * @param operations
     */
    companyContactsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Contact>;
    /**
     *
     * Get Portal Security
     * @param id
     */
    companyContactsIdPortalSecurityGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PortalSecurity>>;
    /**
     *
     * Replace Contact
     * @param id
     * @param contact
     */
    companyContactsIdPut(params: {
        id: number;
        contact: Contact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Contact>;
    /**
     *
     * Create Contact
     * @param contact
     */
    companyContactsPost(params: {
        contact: Contact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Contact>;
    /**
     *
     * Request Password
     * @param request
     */
    companyContactsRequestPasswordPost(params: {
        request: RequestPasswordRequest;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Validate Portal Credentials
     * @param request
     */
    companyContactsValidatePortalCredentialsPost(params: {
        request: ValidatePortalRequest;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ValidatePortalResponse>;
}
export class CorporateStructureLevelsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Corporate Structure Levels Count
     * @param conditions
     */
    systemMyCompanyCorporateStructureLevelsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Corporate Structure Levels
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMyCompanyCorporateStructureLevelsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CorporateStructureLevel>>;
    /**
     *
     * Get Corporate Structure Level By Id
     * @param id
     */
    systemMyCompanyCorporateStructureLevelsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CorporateStructureLevel>;
}
export class CorporateStructuresApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Corporate Structures Count
     * @param conditions
     */
    systemMyCompanyCorporateStructureCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Corporate Structures
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMyCompanyCorporateStructureGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CorporateStructure>>;
    /**
     *
     * Get Corporate Structure By Id
     * @param id
     */
    systemMyCompanyCorporateStructureIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CorporateStructure>;
    /**
     *
     * Update Corporate Structure
     * @param id
     * @param operations
     */
    systemMyCompanyCorporateStructureIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CorporateStructure>;
    /**
     *
     * Replace Corporate Structure
     * @param id
     * @param corporateStructure
     */
    systemMyCompanyCorporateStructureIdPut(params: {
        id: number;
        corporateStructure: CorporateStructure;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CorporateStructure>;
}
export class CountriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Countries Count
     * @param conditions
     */
    companyCountriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Countries
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyCountriesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Country>>;
    /**
     *
     * Delete Country By Id
     * @param id
     */
    companyCountriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Country By Id
     * @param id
     */
    companyCountriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Country>;
    /**
     *
     * Update Country
     * @param id
     * @param operations
     */
    companyCountriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Country>;
    /**
     *
     * Replace Country
     * @param id
     * @param country
     */
    companyCountriesIdPut(params: {
        id: number;
        country: Country;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Country>;
    /**
     *
     * Create Country
     * @param country
     */
    companyCountriesPost(params: {
        country: Country;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Country>;
}
export class CrmsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Crms Count
     * @param conditions
     */
    systemMyCompanyCrmCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Crms
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMyCompanyCrmGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Crm>>;
    /**
     *
     * Get Crm By Id
     * @param id
     */
    systemMyCompanyCrmIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Crm>;
    /**
     *
     * Update Crm
     * @param id
     * @param operations
     */
    systemMyCompanyCrmIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Crm>;
    /**
     *
     * Replace Crm
     * @param id
     * @param crm
     */
    systemMyCompanyCrmIdPut(params: {
        id: number;
        crm: Crm;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Crm>;
}
export class CurrenciesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Currencies Count
     * @param conditions
     */
    financeCurrenciesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Currencies
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeCurrenciesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Currency>>;
    /**
     *
     * Delete Currency By Id
     * @param id
     */
    financeCurrenciesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Currency By Id
     * @param id
     */
    financeCurrenciesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Currency>;
    /**
     *
     * Update Currency
     * @param id
     * @param operations
     */
    financeCurrenciesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Currency>;
    /**
     *
     * Replace Currency
     * @param id
     * @param currency
     */
    financeCurrenciesIdPut(params: {
        id: number;
        currency: Currency;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Currency>;
    /**
     *
     * Create Currency
     * @param currency
     */
    financeCurrenciesPost(params: {
        currency: Currency;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Currency>;
}
export class CustomReportParametersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Custom Report Parameters Count
     * @param id
     * @param conditions
     */
    systemCustomReportsIdParametersCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Custom Report Parameters
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemCustomReportsIdParametersGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CustomReportParameter>>;
    /**
     *
     * Delete Custom Report Parameter By Id
     * @param id
     * @param parameterId
     */
    systemCustomReportsIdParametersParameterIdDelete(params: {
        id: number;
        parameterId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Custom Report Parameter By Id
     * @param id
     * @param parameterId
     */
    systemCustomReportsIdParametersParameterIdGet(params: {
        id: number;
        parameterId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CustomReportParameter>;
    /**
     *
     * Update Custom Report Parameter
     * @param id
     * @param parameterId
     * @param operations
     */
    systemCustomReportsIdParametersParameterIdPatch(params: {
        id: number;
        parameterId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CustomReportParameter>;
    /**
     *
     * Replace Custom Report Parameter
     * @param id
     * @param parameterId
     * @param customReportParameter
     */
    systemCustomReportsIdParametersParameterIdPut(params: {
        id: number;
        parameterId: number;
        customReportParameter: CustomReportParameter;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CustomReportParameter>;
    /**
     *
     * Create Custom Report Parameter
     * @param id
     * @param customReportParameter
     */
    systemCustomReportsIdParametersPost(params: {
        id: number;
        customReportParameter: CustomReportParameter;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CustomReportParameter>;
}
export class CustomReportsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Custom Report Count
     * @param conditions
     */
    systemCustomReportsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Custom Report
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemCustomReportsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CustomReport>>;
    /**
     *
     * Delete Custom Report By Id
     * @param id
     */
    systemCustomReportsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Custom Report By Id
     * @param id
     */
    systemCustomReportsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CustomReport>;
    /**
     *
     * Update Custom Report
     * @param id
     * @param operations
     */
    systemCustomReportsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CustomReport>;
    /**
     *
     * Replace Custom Report
     * @param id
     * @param customReport
     */
    systemCustomReportsIdPut(params: {
        id: number;
        customReport: CustomReport;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CustomReport>;
    /**
     *
     * Create Custom Report
     * @param customReport
     */
    systemCustomReportsPost(params: {
        customReport: CustomReport;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CustomReport>;
}
export class DeliveryMethodsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Delivery Method Count
     * @param conditions
     */
    financeDeliveryMethodsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Delivery Method
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeDeliveryMethodsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<DeliveryMethod>>;
    /**
     *
     * Delete Delivery Method By Id
     * @param id
     */
    financeDeliveryMethodsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Delivery Method By Id
     * @param id
     */
    financeDeliveryMethodsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DeliveryMethod>;
    /**
     *
     * Update Delivery Method
     * @param id
     * @param operations
     */
    financeDeliveryMethodsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DeliveryMethod>;
    /**
     *
     * Replace Delivery Method
     * @param id
     * @param deliveryMethod
     */
    financeDeliveryMethodsIdPut(params: {
        id: number;
        deliveryMethod: DeliveryMethod;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DeliveryMethod>;
    /**
     *
     * Create Delivery Method
     * @param deliveryMethod
     */
    financeDeliveryMethodsPost(params: {
        deliveryMethod: DeliveryMethod;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DeliveryMethod>;
}
export class DepartmentLocationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Department Location Count
     * @param id
     * @param conditions
     */
    systemDepartmentsIdLocationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Department Location
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemDepartmentsIdLocationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<DepartmentLocation>>;
    /**
     *
     * Delete Department Location By Id
     * @param id
     * @param locationId
     */
    systemDepartmentsIdLocationsLocationIdDelete(params: {
        id: number;
        locationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Department Location By Id
     * @param id
     * @param locationId
     */
    systemDepartmentsIdLocationsLocationIdGet(params: {
        id: number;
        locationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DepartmentLocation>;
    /**
     *
     * Update Department Location
     * @param id
     * @param locationId
     * @param operations
     */
    systemDepartmentsIdLocationsLocationIdPatch(params: {
        id: number;
        locationId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DepartmentLocation>;
    /**
     *
     * Replace Company Team
     * @param id
     * @param locationId
     * @param departmentLocation
     */
    systemDepartmentsIdLocationsLocationIdPut(params: {
        id: number;
        locationId: number;
        departmentLocation: DepartmentLocation;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DepartmentLocation>;
    /**
     *
     * Create Department Location
     * @param id
     * @param departmentLocation
     */
    systemDepartmentsIdLocationsPost(params: {
        id: number;
        departmentLocation: DepartmentLocation;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DepartmentLocation>;
}
export class DepartmentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Department Count
     * @param conditions
     */
    systemDepartmentsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Department
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemDepartmentsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Department>>;
    /**
     *
     * Delete Department By Id
     * @param id
     */
    systemDepartmentsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Department By Id
     * @param id
     */
    systemDepartmentsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Department>;
    /**
     *
     * Update Department
     * @param id
     * @param operations
     */
    systemDepartmentsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Department>;
    /**
     *
     * Replace Department
     * @param id
     * @param department
     */
    systemDepartmentsIdPut(params: {
        id: number;
        department: Department;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Department>;
    /**
     *
     * Create Department
     * @param department
     */
    systemDepartmentsPost(params: {
        department: Department;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Department>;
}
export class DocumentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Documents Info Count
     * @param recordType
     * @param recordId
     */
    systemDocumentsCountGet(params: {
        recordType?: string;
        recordId?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Documents Info
     * @param recordType
     * @param recordId
     * @param page
     * @param pageSize
     */
    systemDocumentsGet(params: {
        recordType?: string;
        recordId?: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<DocumentInfo>>;
    /**
     *
     * Delete Document Info By Id
     * @param id
     */
    systemDocumentsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Download Document
     * @param id
     * @param lastModified
     */
    systemDocumentsIdDownloadGet(params: {
        id: number;
        lastModified?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Document Info By Id
     * @param id
     */
    systemDocumentsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DocumentInfo>;
    /**
     *
     * Update Document By Id
     * @param id
     * @param recordId Entity id
     * @param recordType Entity type
     * @param title Document title
     * @param url Document url
     * @param file File to upload
     * @param privateFlag Indicates if document is private
     * @param readOnlyFlag Indicates if document is readonly
     * @param isAvatar Indicates if document contains an avatar
     */
    systemDocumentsIdPost(params: {
        id: number;
        recordId: number;
        recordType: string;
        title: string;
        url: string;
        file?: any;
        privateFlag?: boolean;
        readOnlyFlag?: boolean;
        isAvatar?: boolean;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DocumentInfo>;
    /**
     *
     * Insert Document
     * @param recordType Entity type
     * @param title Document title
     * @param url Document url
     * @param file File to upload
     * @param recordId Entity id
     * @param privateFlag Indicates if document is private
     * @param readOnlyFlag Indicates if document is readonly
     * @param isAvatar Indicates if document contains an avatar
     */
    systemDocumentsPost(params: {
        recordType: string;
        title: string;
        url: string;
        file?: any;
        recordId?: number;
        privateFlag?: boolean;
        readOnlyFlag?: boolean;
        isAvatar?: boolean;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DocumentInfo>;
    /**
     *
     * Get Upload Sample Page
     */
    systemDocumentsUploadsampleGet(params: {}, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
}
export class DocumentsSetupApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Documents
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMycompanyDocumentsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<DocumentSetup>>;
    /**
     *
     * Get Document By Id
     * @param id
     */
    systemMycompanyDocumentsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DocumentSetup>;
    /**
     *
     * Update Document
     * @param id
     * @param operations
     */
    systemMycompanyDocumentsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DocumentSetup>;
    /**
     *
     * Replace Document
     * @param id
     * @param document
     */
    systemMycompanyDocumentsIdPut(params: {
        id: number;
        document: DocumentSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DocumentSetup>;
}
export class EmailConnectorParsingRulesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Email Connector Parsing Rule Count
     * @param id
     * @param styleId
     * @param conditions
     */
    systemEmailConnectorsIdParsingStylesStyleIdParsingRulesCountGet(params: {
        id: number;
        styleId: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Email Connector Parsing Rules
     * @param id
     * @param styleId
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemEmailConnectorsIdParsingStylesStyleIdParsingRulesGet(params: {
        id: number;
        styleId: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<EmailConnectorParsingRule>>;
    /**
     *
     * Create Email Connector Parsing Rule
     * @param id
     * @param styleId
     * @param emailConnectorParsingRule
     */
    systemEmailConnectorsIdParsingStylesStyleIdParsingRulesPost(params: {
        id: number;
        styleId: number;
        emailConnectorParsingRule: EmailConnectorParsingRule;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailConnectorParsingRule>;
    /**
     *
     * Delete Email Connector Parsing Rule By Id
     * @param id
     * @param styleId
     * @param ruleId
     */
    systemEmailConnectorsIdParsingStylesStyleIdParsingRulesRuleIdDelete(params: {
        id: number;
        styleId: number;
        ruleId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Email Connector Parsing Rule By Id
     * @param id
     * @param styleId
     * @param ruleId
     */
    systemEmailConnectorsIdParsingStylesStyleIdParsingRulesRuleIdGet(params: {
        id: number;
        styleId: number;
        ruleId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailConnectorParsingRule>;
    /**
     *
     * Update Email Connector Parsing Rule
     * @param id
     * @param styleId
     * @param ruleId
     * @param operations
     */
    systemEmailConnectorsIdParsingStylesStyleIdParsingRulesRuleIdPatch(params: {
        id: number;
        styleId: number;
        ruleId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailConnectorParsingRule>;
    /**
     *
     * Replace Email Connector Parsing Rule
     * @param id
     * @param styleId
     * @param ruleId
     * @param emailConnectorParsingRule
     */
    systemEmailConnectorsIdParsingStylesStyleIdParsingRulesRuleIdPut(params: {
        id: number;
        styleId: number;
        ruleId: number;
        emailConnectorParsingRule: EmailConnectorParsingRule;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailConnectorParsingRule>;
}
export class EmailConnectorParsingStylesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Email Connector Parsing Style Count
     * @param id
     * @param conditions
     */
    systemEmailConnectorsIdParsingStylesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Email Connector Parsing Styles
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemEmailConnectorsIdParsingStylesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<EmailConnectorParsingStyle>>;
    /**
     *
     * Create Email Connector Parsing Style
     * @param id
     * @param emailConnectorParsingStyle
     */
    systemEmailConnectorsIdParsingStylesPost(params: {
        id: number;
        emailConnectorParsingStyle: EmailConnectorParsingStyle;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailConnectorParsingStyle>;
    /**
     *
     * Delete Email Connector Parsing Style By Id
     * @param id
     * @param styleId
     */
    systemEmailConnectorsIdParsingStylesStyleIdDelete(params: {
        id: number;
        styleId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Email Connector Parsing Style By Id
     * @param id
     * @param styleId
     */
    systemEmailConnectorsIdParsingStylesStyleIdGet(params: {
        id: number;
        styleId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailConnectorParsingStyle>;
    /**
     *
     * Update Email Connector Parsing Style
     * @param id
     * @param styleId
     * @param operations
     */
    systemEmailConnectorsIdParsingStylesStyleIdPatch(params: {
        id: number;
        styleId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailConnectorParsingStyle>;
    /**
     *
     * Replace Email Connector Parsing Style
     * @param id
     * @param styleId
     * @param emailConnectorParsingStyle
     */
    systemEmailConnectorsIdParsingStylesStyleIdPut(params: {
        id: number;
        styleId: number;
        emailConnectorParsingStyle: EmailConnectorParsingStyle;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailConnectorParsingStyle>;
}
export class EmailConnectorsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Email Connectors Count
     * @param conditions
     */
    systemEmailConnectorsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Email Connectors
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemEmailConnectorsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<EmailConnector>>;
    /**
     *
     * Delete Email Connector By Id
     * @param id
     */
    systemEmailConnectorsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Email Connector By Id
     * @param id
     */
    systemEmailConnectorsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailConnector>;
    /**
     *
     * Update Email Connector
     * @param id
     * @param operations
     */
    systemEmailConnectorsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailConnector>;
    /**
     *
     * Replace Email Connector
     * @param id
     * @param emailConnector
     */
    systemEmailConnectorsIdPut(params: {
        id: number;
        emailConnector: EmailConnector;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailConnector>;
    /**
     *
     * Create Email Connector
     * @param emailConnector
     */
    systemEmailConnectorsPost(params: {
        emailConnector: EmailConnector;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailConnector>;
}
export class EmailTokensApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Email Tokens Count
     * @param conditions
     */
    systemEmailTokensCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Email Tokens
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemEmailTokensGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<EmailToken>>;
    /**
     *
     * Get Email Token By Id
     * @param id
     */
    systemEmailTokensIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailToken>;
}
export class ExpenseEntriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Expense Entries Count
     * @param conditions
     * @param customFieldConditions
     * @param childConditions
     */
    expenseEntriesCountGet(params: {
        conditions?: string;
        customFieldConditions?: string;
        childConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Expense Entries
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    expenseEntriesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ExpenseEntry>>;
    /**
     *
     * Delete Expense Entry By Id
     * @param id
     */
    expenseEntriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Expense Entry By Id
     * @param id
     */
    expenseEntriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseEntry>;
    /**
     *
     * Update Expense Entry
     * @param id
     * @param operations
     */
    expenseEntriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseEntry>;
    /**
     *
     * Replace Expense Entry
     * @param id
     * @param expenseEntry
     */
    expenseEntriesIdPut(params: {
        id: number;
        expenseEntry: ExpenseEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseEntry>;
    /**
     *
     * Create Expense Entry
     * @param expenseEntry
     */
    expenseEntriesPost(params: {
        expenseEntry: ExpenseEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseEntry>;
}
export class ExpenseReportsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Expense Reports Count
     * @param conditions
     */
    expenseReportsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Expense Reports
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    expenseReportsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ExpenseReport>>;
    /**
     *
     * Get Expense Report By Id
     * @param id
     */
    expenseReportsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseReport>;
    /**
     *
     * Reverse Expense Report
     * @param id
     */
    expenseReportsIdReversePost(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SuccessResponse>;
    /**
     *
     * Submit Expense Report
     * @param id
     */
    expenseReportsIdSubmitPost(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SuccessResponse>;
}
export class ExpenseTypeExternalIntegrationReferencesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get External Integration Reference Count
     * @param conditions
     */
    expenseExpenseTypeExternalIntegrationReferencesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get External Integration Referencet
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    expenseExpenseTypeExternalIntegrationReferencesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ExpenseTypeExternalIntegrationReference>>;
    /**
     *
     * Get External Integration Reference By Id
     * @param id
     */
    expenseExpenseTypeExternalIntegrationReferencesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseTypeExternalIntegrationReference>;
}
export class ExpenseTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Expense Types Count
     * @param conditions
     */
    expenseTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Expense Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    expenseTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ExpenseType>>;
    /**
     *
     * Delete Expense Type By Id
     * @param id
     */
    expenseTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Expense Type By Id
     * @param id
     */
    expenseTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseType>;
    /**
     *
     * Update Expense Type
     * @param id
     * @param operations
     */
    expenseTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseType>;
    /**
     *
     * Replace Expense Type
     * @param id
     * @param expenseType
     */
    expenseTypesIdPut(params: {
        id: number;
        expenseType: ExpenseType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseType>;
    /**
     *
     * Create Expense Type
     * @param expenseType
     */
    expenseTypesPost(params: {
        expenseType: ExpenseType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseType>;
}
export class GroupCompaniesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Marketing Company By Id
     * @param id
     * @param companyId
     */
    marketingGroupsIdCompaniesCompanyIdDelete(params: {
        id: number;
        companyId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Marketing Company By Id
     * @param id
     * @param companyId
     */
    marketingGroupsIdCompaniesCompanyIdGet(params: {
        id: number;
        companyId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingCompany>;
    /**
     *
     * Update Marketing Company
     * @param id
     * @param companyId
     * @param operations
     */
    marketingGroupsIdCompaniesCompanyIdPatch(params: {
        id: number;
        companyId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingCompany>;
    /**
     *
     * Replace Marketing Company
     * @param id
     * @param companyId
     * @param marketingCompany
     */
    marketingGroupsIdCompaniesCompanyIdPut(params: {
        id: number;
        companyId: number;
        marketingCompany: MarketingCompany;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingCompany>;
    /**
     *
     * Get Marketing Companys Count
     * @param id
     * @param conditions
     */
    marketingGroupsIdCompaniesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Marketing Companys
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    marketingGroupsIdCompaniesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<MarketingCompany>>;
    /**
     *
     * Create Marketing Company
     * @param id
     * @param marketingCompany
     */
    marketingGroupsIdCompaniesPost(params: {
        id: number;
        marketingCompany: MarketingCompany;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingCompany>;
}
export class GroupContactsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Marketing Contact By Id
     * @param id
     * @param contactId
     */
    marketingGroupsIdContactsContactIdDelete(params: {
        id: number;
        contactId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Marketing Contact By Id
     * @param id
     * @param contactId
     */
    marketingGroupsIdContactsContactIdGet(params: {
        id: number;
        contactId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingContact>;
    /**
     *
     * Update Marketing Contact
     * @param id
     * @param contactId
     * @param operations
     */
    marketingGroupsIdContactsContactIdPatch(params: {
        id: number;
        contactId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingContact>;
    /**
     *
     * Replace Marketing Contact
     * @param id
     * @param contactId
     * @param marketingContact
     */
    marketingGroupsIdContactsContactIdPut(params: {
        id: number;
        contactId: number;
        marketingContact: MarketingContact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingContact>;
    /**
     *
     * Get Marketing Contacts Count
     * @param id
     * @param conditions
     */
    marketingGroupsIdContactsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Marketing Contacts
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    marketingGroupsIdContactsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<MarketingContact>>;
    /**
     *
     * Create Marketing Contact
     * @param id
     * @param marketingContact
     */
    marketingGroupsIdContactsPost(params: {
        id: number;
        marketingContact: MarketingContact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingContact>;
}
export class GroupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Groups Count
     * @param conditions
     */
    marketingGroupsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Groups
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    marketingGroupsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Group>>;
    /**
     *
     * Delete Group By Id
     * @param id
     */
    marketingGroupsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Group By Id
     * @param id
     */
    marketingGroupsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Group>;
    /**
     *
     * Update Group
     * @param id
     * @param operations
     */
    marketingGroupsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Group>;
    /**
     *
     * Replace Group
     * @param id
     * @param group
     */
    marketingGroupsIdPut(params: {
        id: number;
        group: Group;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Group>;
    /**
     *
     * Create Group
     * @param group
     */
    marketingGroupsPost(params: {
        group: Group;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Group>;
}
export class HolidayListsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Holiday List Count
     * @param conditions
     */
    systemHolidayListsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Holiday List
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemHolidayListsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<HolidayList>>;
    /**
     *
     * Delete Holiday List By Id
     * @param id
     */
    systemHolidayListsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Holiday List By Id
     * @param id
     */
    systemHolidayListsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<HolidayList>;
    /**
     *
     * Update Holiday List
     * @param id
     * @param operations
     */
    systemHolidayListsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<HolidayList>;
    /**
     *
     * Replace Holiday List
     * @param id
     * @param holidayList
     */
    systemHolidayListsIdPut(params: {
        id: number;
        holidayList: HolidayList;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<HolidayList>;
    /**
     *
     * Create Holiday List
     * @param holidayList
     */
    systemHolidayListsPost(params: {
        holidayList: HolidayList;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<HolidayList>;
}
export class HolidaysApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Holidays Count
     * @param id
     * @param conditions
     */
    systemHolidayListsIdHolidaysCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Holidays
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemHolidayListsIdHolidaysGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Holiday>>;
    /**
     *
     * Delete Holiday By Id
     * @param id
     * @param holidayId
     */
    systemHolidayListsIdHolidaysHolidayIdDelete(params: {
        id: number;
        holidayId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Holiday By Id
     * @param id
     * @param holidayId
     */
    systemHolidayListsIdHolidaysHolidayIdGet(params: {
        id: number;
        holidayId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Holiday>;
    /**
     *
     * Update Holiday
     * @param id
     * @param holidayId
     * @param operations
     */
    systemHolidayListsIdHolidaysHolidayIdPatch(params: {
        id: number;
        holidayId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Holiday>;
    /**
     *
     * Replace Holiday
     * @param id
     * @param holidayId
     * @param holiday
     */
    systemHolidayListsIdHolidaysHolidayIdPut(params: {
        id: number;
        holidayId: number;
        holiday: Holiday;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Holiday>;
    /**
     *
     * Create Holiday
     * @param id
     * @param holiday
     */
    systemHolidayListsIdHolidaysPost(params: {
        id: number;
        holiday: Holiday;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Holiday>;
}
export class ImapsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Imap Count
     * @param conditions
     */
    systemImapsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Imaps
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemImapsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Imap>>;
    /**
     *
     * Get Imap By Id
     * @param id
     */
    systemImapsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Imap>;
}
export class ImpactsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Impact Count
     * @param conditions
     */
    serviceImpactsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Impact
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceImpactsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Impact>>;
    /**
     *
     * Get Impact By Id
     * @param id
     */
    serviceImpactsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Impact>;
    /**
     *
     * Update Impact
     * @param id
     * @param operations
     */
    serviceImpactsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Impact>;
    /**
     *
     * Replace Impact
     * @param id
     * @param impact
     */
    serviceImpactsIdPut(params: {
        id: number;
        impact: Impact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Impact>;
}
export class ImportsMassMaintenanceApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Import Mass Maintenance By Id
     * @param id
     */
    systemImportMassMaintenanceIdPost(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ImportMassMaintenance>;
}
export class InOutBoardsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get In Out Board Count
     * @param conditions
     */
    systemInOutBoardsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get In Out Board
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemInOutBoardsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<InOutBoard>>;
    /**
     *
     * Delete In Out Board By Id
     * @param id
     */
    systemInOutBoardsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get In Out Board By Id
     * @param id
     */
    systemInOutBoardsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InOutBoard>;
    /**
     *
     * Update In Out Board
     * @param id
     * @param operations
     */
    systemInOutBoardsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InOutBoard>;
    /**
     *
     * Replace In Out Board
     * @param id
     * @param inOutBoard
     */
    systemInOutBoardsIdPut(params: {
        id: number;
        inOutBoard: InOutBoard;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InOutBoard>;
    /**
     *
     * Create In Out Board
     * @param inOutBoard
     */
    systemInOutBoardsPost(params: {
        inOutBoard: InOutBoard;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InOutBoard>;
}
export class InOutTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get In Out Type Count
     * @param conditions
     */
    systemInOutTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get In Out Type
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemInOutTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<InOutType>>;
    /**
     *
     * Delete In Out Type By Id
     * @param id
     */
    systemInOutTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get In Out Type By Id
     * @param id
     */
    systemInOutTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InOutType>;
    /**
     *
     * Update In Out Type
     * @param id
     * @param operations
     */
    systemInOutTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InOutType>;
    /**
     *
     * Replace In Out Type
     * @param id
     * @param inOutType
     */
    systemInOutTypesIdPut(params: {
        id: number;
        inOutType: InOutType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InOutType>;
    /**
     *
     * Create In Out Type
     * @param inOutType
     */
    systemInOutTypesPost(params: {
        inOutType: InOutType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InOutType>;
}
export class InfoApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Infos
     */
    systemInfoGet(params: {}, extraQueryParams?: any, extraFetchParams?: any): Promise<Info>;
}
export class IntegratorLoginsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Integrator Login Count
     * @param conditions
     */
    systemIntegratorloginsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Integrator Login
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemIntegratorloginsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<IntegratorLogin>>;
    /**
     *
     * Delete Integrator Login By Id
     * @param id
     */
    systemIntegratorloginsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Integrator Login By Id
     * @param id
     */
    systemIntegratorloginsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<IntegratorLogin>;
    /**
     *
     * Update Integrator Login
     * @param id
     * @param operations
     */
    systemIntegratorloginsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<IntegratorLogin>;
    /**
     *
     * Replace Integrator Login
     * @param id
     * @param integratorLogin
     */
    systemIntegratorloginsIdPut(params: {
        id: number;
        integratorLogin: IntegratorLogin;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<IntegratorLogin>;
    /**
     *
     * Create Integrator Login
     * @param integratorLogin
     */
    systemIntegratorloginsPost(params: {
        integratorLogin: IntegratorLogin;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<IntegratorLogin>;
}
export class InvoiceEmailTemplatesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Invoice Email Templates Count
     * @param conditions
     */
    financeInvoiceEmailTemplatesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Invoice Email Templates
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeInvoiceEmailTemplatesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<InvoiceEmailTemplate>>;
    /**
     *
     * Delete Invoice Email Template By Id
     * @param id
     */
    financeInvoiceEmailTemplatesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Invoice Email Template By Id
     * @param id
     */
    financeInvoiceEmailTemplatesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InvoiceEmailTemplate>;
    /**
     *
     * Update Invoice Email Template
     * @param id
     * @param operations
     */
    financeInvoiceEmailTemplatesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InvoiceEmailTemplate>;
    /**
     *
     * Replace Invoice Email Template
     * @param id
     * @param invoiceEmailTemplate
     */
    financeInvoiceEmailTemplatesIdPut(params: {
        id: number;
        invoiceEmailTemplate: InvoiceEmailTemplate;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InvoiceEmailTemplate>;
    /**
     *
     * Create Invoice Email Template
     * @param invoiceEmailTemplate
     */
    financeInvoiceEmailTemplatesPost(params: {
        invoiceEmailTemplate: InvoiceEmailTemplate;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InvoiceEmailTemplate>;
}
export class InvoicePaymentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Payments
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeInvoicesIdPaymentsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Payment>>;
    /**
     *
     * Delete Payment By Id
     * @param id
     * @param paymentId
     */
    financeInvoicesIdPaymentsPaymentIdDelete(params: {
        id: number;
        paymentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Payment By Id
     * @param id
     * @param paymentId
     */
    financeInvoicesIdPaymentsPaymentIdGet(params: {
        id: number;
        paymentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Payment>;
    /**
     *
     * Update Payment
     * @param id
     * @param paymentId
     * @param operations
     */
    financeInvoicesIdPaymentsPaymentIdPatch(params: {
        id: number;
        paymentId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Payment>;
    /**
     *
     * Replace Payment
     * @param id
     * @param paymentId
     * @param payment
     */
    financeInvoicesIdPaymentsPaymentIdPut(params: {
        id: number;
        paymentId: number;
        payment: Payment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Payment>;
    /**
     *
     * Create Payment
     * @param id
     * @param payment
     */
    financeInvoicesIdPaymentsPost(params: {
        id: number;
        payment: Payment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Payment>;
}
export class InvoiceTemplateSetupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Invoice Template Setups Count
     * @param conditions
     */
    financeInvoiceTemplateSetupsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Retrieves a list of standard and custom invoice templates
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeInvoiceTemplateSetupsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<InvoiceTemplateSetup>>;
    /**
     *
     * Get Invoice Template Setup By Id
     * @param id
     */
    financeInvoiceTemplateSetupsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InvoiceTemplateSetup>;
}
export class InvoiceTemplatesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Invoice Templates Count
     * @param conditions
     */
    financeInvoiceTemplatesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Invoice Templates
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeInvoiceTemplatesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<InvoiceTemplate>>;
    /**
     *
     * Get Invoice Template By Id
     * @param id
     */
    financeInvoiceTemplatesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<InvoiceTemplate>;
}
export class InvoicesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Invoices Count
     * @param conditions
     * @param customFieldConditions
     */
    financeInvoicesCountGet(params: {
        conditions?: string;
        customFieldConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Invoices
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeInvoicesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Invoice>>;
    /**
     *
     * Delete Invoice By Id
     * @param id
     */
    financeInvoicesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Invoice By Id
     * @param id
     */
    financeInvoicesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Invoice>;
    /**
     *
     * Update Invoice
     * @param id
     * @param operations
     */
    financeInvoicesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Invoice>;
    /**
     *
     * Get Invoice Pdf
     * @param id
     */
    financeInvoicesIdPdfGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Replace Invoice
     * @param id
     * @param invoice
     */
    financeInvoicesIdPut(params: {
        id: number;
        invoice: Invoice;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Invoice>;
    /**
     *
     * Create Invoice
     * @param invoice
     */
    financeInvoicesPost(params: {
        invoice: Invoice;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Invoice>;
}
export class KPICategoriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get K P I Categories Count
     * @param conditions
     */
    systemKpiCategoriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get K P I Categories
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemKpiCategoriesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<KPICategory>>;
    /**
     *
     * Get K P I Category By Id
     * @param id
     */
    systemKpiCategoriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<KPICategory>;
}
export class KPIsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get K P I Count
     * @param conditions
     */
    systemKpisCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get K P I
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemKpisGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<KPI>>;
    /**
     *
     * Get K P I By Id
     * @param id
     */
    systemKpisIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<KPI>;
}
export class KnowledgeBaseArticlesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Knowledge Base Articles Count
     * @param conditions
     * @param customFieldConditions
     */
    serviceKnowledgeBaseArticlesCountGet(params: {
        conditions?: string;
        customFieldConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Knowledge Base Articles
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceKnowledgeBaseArticlesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<KnowledgeBaseArticle>>;
    /**
     *
     * Delete Knowledge Base Article By Id
     * @param id
     */
    serviceKnowledgeBaseArticlesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Knowledge Base Article By Id
     * @param id
     */
    serviceKnowledgeBaseArticlesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<KnowledgeBaseArticle>;
    /**
     *
     * Update Knowledge Base Article
     * @param id
     * @param operations
     */
    serviceKnowledgeBaseArticlesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<KnowledgeBaseArticle>;
    /**
     *
     * Replace Knowledge Base Article
     * @param id
     * @param knowledgeBaseArticle
     */
    serviceKnowledgeBaseArticlesIdPut(params: {
        id: number;
        knowledgeBaseArticle: KnowledgeBaseArticle;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<KnowledgeBaseArticle>;
    /**
     *
     * Create Knowledge Base Article
     * @param knowledgeBaseArticle
     */
    serviceKnowledgeBaseArticlesPost(params: {
        knowledgeBaseArticle: KnowledgeBaseArticle;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<KnowledgeBaseArticle>;
}
export class LdapConfigurationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Ldap Configurations Count
     * @param conditions
     */
    systemLdapConfigurationsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Ldap Configurations
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemLdapConfigurationsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<LdapConfiguration>>;
    /**
     *
     * Delete Ldap Configuration By Id
     * @param id
     */
    systemLdapConfigurationsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Ldap Configuration By Id
     * @param id
     */
    systemLdapConfigurationsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LdapConfiguration>;
    /**
     *
     * Update Ldap Configuration
     * @param id
     * @param operations
     */
    systemLdapConfigurationsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LdapConfiguration>;
    /**
     *
     * Replace Ldap Configuration
     * @param id
     * @param ldapConfiguration
     */
    systemLdapConfigurationsIdPut(params: {
        id: number;
        ldapConfiguration: LdapConfiguration;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LdapConfiguration>;
    /**
     *
     * Create Ldap Configuration
     * @param ldapConfiguration
     */
    systemLdapConfigurationsPost(params: {
        ldapConfiguration: LdapConfiguration;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LdapConfiguration>;
}
export class LegacyCampaignSubTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Campaign Sub Types Count
     * @param id
     * @param conditions
     */
    marketingCampaignsTypesIdSubTypesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Campaign Sub Types
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    marketingCampaignsTypesIdSubTypesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CampaignSubType>>;
    /**
     *
     * Get Campaign Sub Type By Id
     * @param id
     * @param subTypeId
     */
    marketingCampaignsTypesIdSubTypesSubTypeIdGet(params: {
        id: number;
        subTypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignSubType>;
}
export class LegacySubCategoriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Legacy Sub Categories Count
     * @param id
     * @param conditions
     */
    procurementCategoriesIdSubcategoriesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Legacy Sub Categories
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementCategoriesIdSubcategoriesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<LegacySubCategory>>;
    /**
     *
     * Create Legacy Sub Category
     * @param id
     * @param subCategory
     */
    procurementCategoriesIdSubcategoriesPost(params: {
        id: number;
        subCategory: LegacySubCategory;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LegacySubCategory>;
    /**
     *
     * Delete Legacy Sub Category By Id
     * @param id
     * @param subcategoryID
     */
    procurementCategoriesIdSubcategoriesSubcategoryIDDelete(params: {
        id: number;
        subcategoryID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Legacy Sub Category By Id
     * @param id
     * @param subcategoryID
     */
    procurementCategoriesIdSubcategoriesSubcategoryIDGet(params: {
        id: number;
        subcategoryID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LegacySubCategory>;
    /**
     *
     * Update Legacy Sub Category
     * @param id
     * @param subcategoryID
     * @param operations
     */
    procurementCategoriesIdSubcategoriesSubcategoryIDPatch(params: {
        id: number;
        subcategoryID: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LegacySubCategory>;
    /**
     *
     * Replace Legacy Sub Category
     * @param id
     * @param subcategoryID
     * @param subCategory
     */
    procurementCategoriesIdSubcategoriesSubcategoryIDPut(params: {
        id: number;
        subcategoryID: number;
        subCategory: LegacySubCategory;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LegacySubCategory>;
}
export class LinksApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Links Count
     * @param conditions
     */
    systemLinksCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Links
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemLinksGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Link>>;
    /**
     *
     * Delete Link By Id
     * @param id
     */
    systemLinksIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Link By Id
     * @param id
     */
    systemLinksIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Link>;
    /**
     *
     * Update Link
     * @param id
     * @param operations
     */
    systemLinksIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Link>;
    /**
     *
     * Replace Link
     * @param id
     * @param link
     */
    systemLinksIdPut(params: {
        id: number;
        link: Link;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Link>;
    /**
     *
     * Create Link
     * @param link
     */
    systemLinksPost(params: {
        link: Link;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Link>;
}
export class LocationDepartmentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Location Department Count
     * @param id
     * @param conditions
     */
    systemLocationsIdDepartmentsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Location Department
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemLocationsIdDepartmentsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<LocationDepartment>>;
    /**
     *
     * Get Location Department By Id
     * @param parentId
     * @param id
     */
    systemLocationsParentIdDepartmentsIdGet(params: {
        parentId: number;
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LocationDepartment>;
}
export class LocationWorkRolesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Location Work Role Count
     * @param id
     * @param conditions
     */
    systemLocationsIdWorkRolesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Location Work Role
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemLocationsIdWorkRolesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<LocationWorkRole>>;
    /**
     *
     * Get Location Work Role By Id
     * @param parentId
     * @param id
     */
    systemLocationsParentIdWorkRolesIdGet(params: {
        parentId: number;
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LocationWorkRole>;
}
export class LocationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Location Count
     * @param conditions
     */
    systemLocationsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Location
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemLocationsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Location>>;
    /**
     *
     * Delete Location By Id
     * @param id
     */
    systemLocationsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Location By Id
     * @param id
     */
    systemLocationsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Location>;
    /**
     *
     * Update Location
     * @param id
     * @param operations
     */
    systemLocationsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Location>;
    /**
     *
     * Replace Location
     * @param id
     * @param location
     */
    systemLocationsIdPut(params: {
        id: number;
        location: Location;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Location>;
    /**
     *
     * Create Location
     * @param location
     */
    systemLocationsPost(params: {
        location: Location;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Location>;
}
export class ManagedDevicesIntegrationCrossReferencesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Cross Reference Count
     * @param id
     * @param conditions
     */
    companyManagedDevicesIntegrationsIdCrossReferencesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Cross Reference
     * @param id
     * @param crossReferenceID
     */
    companyManagedDevicesIntegrationsIdCrossReferencesCrossReferenceIDDelete(params: {
        id: number;
        crossReferenceID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationCrossReference>;
    /**
     *
     * Get Cross Reference By Id
     * @param id
     * @param crossReferenceID
     */
    companyManagedDevicesIntegrationsIdCrossReferencesCrossReferenceIDGet(params: {
        id: number;
        crossReferenceID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationCrossReference>;
    /**
     *
     * Update Cross Reference
     * @param id
     * @param crossReferenceID
     * @param operations
     */
    companyManagedDevicesIntegrationsIdCrossReferencesCrossReferenceIDPatch(params: {
        id: number;
        crossReferenceID: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationCrossReference>;
    /**
     *
     * Replace Cross Reference
     * @param id
     * @param crossReferenceID
     * @param crossReference
     */
    companyManagedDevicesIntegrationsIdCrossReferencesCrossReferenceIDPut(params: {
        id: number;
        crossReferenceID: number;
        crossReference: ManagedDevicesIntegrationCrossReference;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationCrossReference>;
    /**
     *
     * Get Cross Reference
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyManagedDevicesIntegrationsIdCrossReferencesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ManagedDevicesIntegrationCrossReference>>;
    /**
     *
     * Create Cross Reference
     * @param id
     * @param crossReference
     */
    companyManagedDevicesIntegrationsIdCrossReferencesPost(params: {
        id: number;
        crossReference: ManagedDevicesIntegrationCrossReference;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationCrossReference>;
}
export class ManagedDevicesIntegrationLoginsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Login Count
     * @param id
     * @param conditions
     */
    companyManagedDevicesIntegrationsIdLoginsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Login
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyManagedDevicesIntegrationsIdLoginsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ManagedDevicesIntegrationLogin>>;
    /**
     *
     * Delete Login
     * @param id
     * @param loginID
     */
    companyManagedDevicesIntegrationsIdLoginsLoginIDDelete(params: {
        id: number;
        loginID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationLogin>;
    /**
     *
     * Get Login By Id
     * @param id
     * @param loginID
     */
    companyManagedDevicesIntegrationsIdLoginsLoginIDGet(params: {
        id: number;
        loginID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationLogin>;
    /**
     *
     * Update Login
     * @param id
     * @param loginID
     * @param operations
     */
    companyManagedDevicesIntegrationsIdLoginsLoginIDPatch(params: {
        id: number;
        loginID: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationLogin>;
    /**
     *
     * Replace Login
     * @param id
     * @param loginID
     * @param login
     */
    companyManagedDevicesIntegrationsIdLoginsLoginIDPut(params: {
        id: number;
        loginID: number;
        login: ManagedDevicesIntegrationLogin;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationLogin>;
    /**
     *
     * Create Login
     * @param id
     * @param login
     */
    companyManagedDevicesIntegrationsIdLoginsPost(params: {
        id: number;
        login: ManagedDevicesIntegrationLogin;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationLogin>;
}
export class ManagedDevicesIntegrationNotificationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Notification Count
     * @param id
     * @param conditions
     */
    companyManagedDevicesIntegrationsIdNotificationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Notification
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyManagedDevicesIntegrationsIdNotificationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ManagedDevicesIntegrationNotification>>;
    /**
     *
     * Delete Notification
     * @param id
     * @param notificationID
     */
    companyManagedDevicesIntegrationsIdNotificationsNotificationIDDelete(params: {
        id: number;
        notificationID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationNotification>;
    /**
     *
     * Get Notification By Id
     * @param id
     * @param notificationID
     */
    companyManagedDevicesIntegrationsIdNotificationsNotificationIDGet(params: {
        id: number;
        notificationID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationNotification>;
    /**
     *
     * Update Notification
     * @param id
     * @param notificationID
     * @param operations
     */
    companyManagedDevicesIntegrationsIdNotificationsNotificationIDPatch(params: {
        id: number;
        notificationID: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationNotification>;
    /**
     *
     * Replace Notification
     * @param id
     * @param notificationID
     * @param notification
     */
    companyManagedDevicesIntegrationsIdNotificationsNotificationIDPut(params: {
        id: number;
        notificationID: number;
        notification: ManagedDevicesIntegrationNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationNotification>;
    /**
     *
     * Create Notification
     * @param id
     * @param notification
     */
    companyManagedDevicesIntegrationsIdNotificationsPost(params: {
        id: number;
        notification: ManagedDevicesIntegrationNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegrationNotification>;
}
export class ManagedDevicesIntegrationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Managed Devices Integrations Count
     * @param conditions
     */
    companyManagedDevicesIntegrationsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Managed Devices Integrations
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyManagedDevicesIntegrationsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ManagedDevicesIntegration>>;
    /**
     *
     * Delete Managed Devices Integration By Id
     * @param id
     */
    companyManagedDevicesIntegrationsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Managed Devices Integration By Id
     * @param id
     */
    companyManagedDevicesIntegrationsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegration>;
    /**
     *
     * Update Managed Devices Integration
     * @param id
     * @param operations
     */
    companyManagedDevicesIntegrationsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegration>;
    /**
     *
     * Replace Managed Devices Integration
     * @param id
     * @param managedDevicesIntegration
     */
    companyManagedDevicesIntegrationsIdPut(params: {
        id: number;
        managedDevicesIntegration: ManagedDevicesIntegration;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegration>;
    /**
     *
     * Create Managed Devices Integration
     * @param managedDevicesIntegration
     */
    companyManagedDevicesIntegrationsPost(params: {
        managedDevicesIntegration: ManagedDevicesIntegration;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagedDevicesIntegration>;
}
export class ManagementBackupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Management Backup Count
     * @param conditions
     */
    companyManagementBackupsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Management Backup
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyManagementBackupsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ManagementBackup>>;
    /**
     *
     * Delete Management Backup By Id
     * @param id
     */
    companyManagementBackupsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Management Backup By Id
     * @param id
     */
    companyManagementBackupsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementBackup>;
    /**
     *
     * Update Management Backup
     * @param id
     * @param operations
     */
    companyManagementBackupsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementBackup>;
    /**
     *
     * Replace Management Backup
     * @param id
     * @param managementBackup
     */
    companyManagementBackupsIdPut(params: {
        id: number;
        managementBackup: ManagementBackup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementBackup>;
    /**
     *
     * Create Management Backup
     * @param managementBackup
     */
    companyManagementBackupsPost(params: {
        managementBackup: ManagementBackup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementBackup>;
}
export class ManagementEmailsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Management Email Count
     * @param conditions
     */
    companyManagementEmailsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Management Email
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyManagementEmailsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ManagementEmail>>;
    /**
     *
     * Delete Management Email By Id
     * @param id
     */
    companyManagementEmailsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Management Email By Id
     * @param id
     */
    companyManagementEmailsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementEmail>;
    /**
     *
     * Update Management Email
     * @param id
     * @param operations
     */
    companyManagementEmailsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementEmail>;
    /**
     *
     * Replace Management Email
     * @param id
     * @param managementEmail
     */
    companyManagementEmailsIdPut(params: {
        id: number;
        managementEmail: ManagementEmail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementEmail>;
    /**
     *
     * Create Management Email
     * @param managementEmail
     */
    companyManagementEmailsPost(params: {
        managementEmail: ManagementEmail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementEmail>;
}
export class ManagementExecuteManagedItSyncsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Execute Managed It Sync
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyManagementIdExecuteManagedItSyncPost(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SuccessResponse>;
}
export class ManagementItSolutionAgreementInterfaceParametersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Management Product Count
     * @param id
     * @param conditions
     */
    companyManagementItSolutionsIdManagementProductsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Management Product
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyManagementItSolutionsIdManagementProductsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ManagementItSolutionAgreementInterfaceParameter>>;
    /**
     *
     * Delete Management Product
     * @param id
     * @param managementProductID
     */
    companyManagementItSolutionsIdManagementProductsManagementProductIDDelete(params: {
        id: number;
        managementProductID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementItSolutionAgreementInterfaceParameter>;
    /**
     *
     * Get Management Product By Id
     * @param id
     * @param managementProductID
     */
    companyManagementItSolutionsIdManagementProductsManagementProductIDGet(params: {
        id: number;
        managementProductID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementItSolutionAgreementInterfaceParameter>;
    /**
     *
     * Management Product
     * @param id
     * @param managementProductID
     * @param operations
     */
    companyManagementItSolutionsIdManagementProductsManagementProductIDPatch(params: {
        id: number;
        managementProductID: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementItSolutionAgreementInterfaceParameter>;
    /**
     *
     * Replace Management Product
     * @param id
     * @param managementProductID
     * @param managementProduct
     */
    companyManagementItSolutionsIdManagementProductsManagementProductIDPut(params: {
        id: number;
        managementProductID: number;
        managementProduct: ManagementItSolutionAgreementInterfaceParameter;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementItSolutionAgreementInterfaceParameter>;
    /**
     *
     * Create Management Product
     * @param id
     * @param managementProduct
     */
    companyManagementItSolutionsIdManagementProductsPost(params: {
        id: number;
        managementProduct: ManagementItSolutionAgreementInterfaceParameter;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementItSolutionAgreementInterfaceParameter>;
}
export class ManagementItSolutionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Management It Solutions Count
     * @param conditions
     */
    companyManagementItSolutionsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Management It Solutions
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyManagementItSolutionsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ManagementItSolution>>;
    /**
     *
     * Delete Management It Solution By Id
     * @param id
     */
    companyManagementItSolutionsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Management It Solution By Id
     * @param id
     */
    companyManagementItSolutionsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementItSolution>;
    /**
     *
     * Update Management It Solution
     * @param id
     * @param operations
     */
    companyManagementItSolutionsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementItSolution>;
    /**
     *
     * Replace Management It Solution
     * @param id
     * @param managementItSolution
     */
    companyManagementItSolutionsIdPut(params: {
        id: number;
        managementItSolution: ManagementItSolution;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementItSolution>;
    /**
     *
     * Create Management It Solution
     * @param managementItSolution
     */
    companyManagementItSolutionsPost(params: {
        managementItSolution: ManagementItSolution;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementItSolution>;
}
export class ManagementLogsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Download Document
     * @param filePath
     */
    companyManagementIdLogDownloadGet(params: {
        filePath?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Management Execute Managed It Syncs
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyManagementIdLogsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ManagementLogDocumentInfo>>;
}
export class ManagementNetworksSecurityApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Management Network Security Count
     * @param conditions
     */
    systemManagementNetworkSecuritiesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Management Networks Security
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemManagementNetworkSecuritiesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ManagementNetworkSecurity>>;
    /**
     *
     * Delete Management Network Security By Id
     * @param id
     */
    systemManagementNetworkSecuritiesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Management Network Security By Id
     * @param id
     */
    systemManagementNetworkSecuritiesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementNetworkSecurity>;
    /**
     *
     * Update Management Network Security
     * @param id
     * @param operations
     */
    systemManagementNetworkSecuritiesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementNetworkSecurity>;
    /**
     *
     * Replace Management Network Security
     * @param id
     * @param managementNetworkSecurity
     */
    systemManagementNetworkSecuritiesIdPut(params: {
        id: number;
        managementNetworkSecurity: ManagementNetworkSecurity;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementNetworkSecurity>;
    /**
     *
     * Create Management Network Security
     * @param managementNetworkSecurity
     */
    systemManagementNetworkSecuritiesPost(params: {
        managementNetworkSecurity: ManagementNetworkSecurity;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementNetworkSecurity>;
    /**
     *
     * Test Credentials
     * @param id
     */
    systemManagementNetworkSecuritiesTestCredentialsGet(params: {
        id?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SuccessResponse>;
}
export class ManagementReportNotificationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Management Report Notifications Count
     * @param id
     * @param conditions
     */
    companyManagementIdManagementReportNotificationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Management Report Notifications
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyManagementIdManagementReportNotificationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ManagementReportNotification>>;
    /**
     *
     * Delete Management Report Notification By Id
     * @param id
     * @param managementReportNotificationId
     */
    companyManagementIdManagementReportNotificationsManagementReportNotificationIdDelete(params: {
        id: number;
        managementReportNotificationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Management Report Notification By Id
     * @param id
     * @param managementReportNotificationId
     */
    companyManagementIdManagementReportNotificationsManagementReportNotificationIdGet(params: {
        id: number;
        managementReportNotificationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementReportNotification>;
    /**
     *
     * Update Management Report Notification
     * @param id
     * @param managementReportNotificationId
     * @param operations
     */
    companyManagementIdManagementReportNotificationsManagementReportNotificationIdPatch(params: {
        id: number;
        managementReportNotificationId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementReportNotification>;
    /**
     *
     * Replace Management Report Notification
     * @param id
     * @param managementReportNotificationId
     * @param managementReportNotification
     */
    companyManagementIdManagementReportNotificationsManagementReportNotificationIdPut(params: {
        id: number;
        managementReportNotificationId: number;
        managementReportNotification: ManagementReportNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementReportNotification>;
    /**
     *
     * Create Management Report Notification
     * @param id
     * @param managementReportNotification
     */
    companyManagementIdManagementReportNotificationsPost(params: {
        id: number;
        managementReportNotification: ManagementReportNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ManagementReportNotification>;
}
export class ManagementsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Managements Count
     * @param conditions
     */
    companyManagementCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Managements
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyManagementGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Management>>;
    /**
     *
     * Get Management By Id
     * @param id
     */
    companyManagementIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Management>;
    /**
     *
     * Update Management
     * @param id
     * @param operations
     */
    companyManagementIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Management>;
    /**
     *
     * Replace Management
     * @param id
     * @param management
     */
    companyManagementIdPut(params: {
        id: number;
        management: Management;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Management>;
}
export class ManufacturersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Manufacturers Count
     * @param conditions
     */
    procurementManufacturersCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Manufacturers
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementManufacturersGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Manufacturer>>;
    /**
     *
     * Delete Manufacturer By Id
     * @param id
     */
    procurementManufacturersIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Manufacturer By Id
     * @param id
     */
    procurementManufacturersIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Manufacturer>;
    /**
     *
     * Update Manufacturer
     * @param id
     * @param operations
     */
    procurementManufacturersIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Manufacturer>;
    /**
     *
     * Replace Manufacturer
     * @param id
     * @param manufacturer
     */
    procurementManufacturersIdPut(params: {
        id: number;
        manufacturer: Manufacturer;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Manufacturer>;
    /**
     *
     * Create Manufacturer
     * @param manufacturer
     */
    procurementManufacturersPost(params: {
        manufacturer: Manufacturer;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Manufacturer>;
}
export class MarketDescriptionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Market Description Count
     * @param conditions
     */
    companyMarketDescriptionsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Market Description
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyMarketDescriptionsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<MarketDescription>>;
    /**
     *
     * Delete Market Description By Id
     * @param id
     */
    companyMarketDescriptionsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Market Description By Id
     * @param id
     */
    companyMarketDescriptionsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketDescription>;
    /**
     *
     * Update Market Description
     * @param id
     * @param operations
     */
    companyMarketDescriptionsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketDescription>;
    /**
     *
     * Replace Market Description
     * @param id
     * @param marketDescription
     */
    companyMarketDescriptionsIdPut(params: {
        id: number;
        marketDescription: MarketDescription;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketDescription>;
    /**
     *
     * Create Market Description
     * @param marketDescription
     */
    companyMarketDescriptionsPost(params: {
        marketDescription: MarketDescription;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketDescription>;
}
export class MemberAccrualsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Member Accrual By Id
     * @param id
     * @param accrualId
     */
    systemMembersIdAccrualsAccrualIdDelete(params: {
        id: number;
        accrualId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Member Accrual By Id
     * @param id
     * @param accrualId
     */
    systemMembersIdAccrualsAccrualIdGet(params: {
        id: number;
        accrualId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberAccrual>;
    /**
     *
     * Update Member Accrual
     * @param id
     * @param accrualId
     * @param operations
     */
    systemMembersIdAccrualsAccrualIdPatch(params: {
        id: number;
        accrualId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberAccrual>;
    /**
     *
     * Replace Member Accrual
     * @param id
     * @param accrualId
     * @param memberAccrual
     */
    systemMembersIdAccrualsAccrualIdPut(params: {
        id: number;
        accrualId: number;
        memberAccrual: MemberAccrual;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberAccrual>;
    /**
     *
     * Get Member Accruals Count
     * @param id
     * @param conditions
     */
    systemMembersIdAccrualsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Member Accruals
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMembersIdAccrualsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<MemberAccrual>>;
    /**
     *
     * Create Member Accrual
     * @param id
     * @param memberAccrual
     */
    systemMembersIdAccrualsPost(params: {
        id: number;
        memberAccrual: MemberAccrual;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberAccrual>;
}
export class MemberCertificationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Member Certification By Id
     * @param id
     * @param certId
     */
    systemMembersIdCertificationsCertIdDelete(params: {
        id: number;
        certId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Member Certification By Id
     * @param id
     * @param certId
     */
    systemMembersIdCertificationsCertIdGet(params: {
        id: number;
        certId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberCertification>;
    /**
     *
     * Update Member Certification
     * @param id
     * @param certId
     * @param operations
     */
    systemMembersIdCertificationsCertIdPatch(params: {
        id: number;
        certId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberCertification>;
    /**
     *
     * Replace Member Certification
     * @param id
     * @param certId
     * @param memberCertification
     */
    systemMembersIdCertificationsCertIdPut(params: {
        id: number;
        certId: number;
        memberCertification: MemberCertification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberCertification>;
    /**
     *
     * Get Member Certifications Count
     * @param id
     * @param conditions
     */
    systemMembersIdCertificationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Member Certifications
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMembersIdCertificationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<MemberCertification>>;
    /**
     *
     * Create Member Certification
     * @param id
     * @param memberCertification
     */
    systemMembersIdCertificationsPost(params: {
        id: number;
        memberCertification: MemberCertification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberCertification>;
}
export class MemberDelegationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Member Delegations Count
     * @param id
     * @param conditions
     */
    systemMembersIdDelegationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Member Delegation By Id
     * @param id
     * @param delegationId
     */
    systemMembersIdDelegationsDelegationIdDelete(params: {
        id: number;
        delegationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Member Delegation By Id
     * @param id
     * @param delegationId
     */
    systemMembersIdDelegationsDelegationIdGet(params: {
        id: number;
        delegationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberDelegation>;
    /**
     *
     * Update Member Delegation
     * @param id
     * @param delegationId
     * @param operations
     */
    systemMembersIdDelegationsDelegationIdPatch(params: {
        id: number;
        delegationId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberDelegation>;
    /**
     *
     * Replace Member Delegation
     * @param id
     * @param delegationId
     * @param memberDelegation
     */
    systemMembersIdDelegationsDelegationIdPut(params: {
        id: number;
        delegationId: number;
        memberDelegation: MemberDelegation;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberDelegation>;
    /**
     *
     * Get Member Delegations
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMembersIdDelegationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<MemberDelegation>>;
    /**
     *
     * Create Member Delegation
     * @param id
     * @param memberDelegation
     */
    systemMembersIdDelegationsPost(params: {
        id: number;
        memberDelegation: MemberDelegation;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberDelegation>;
}
export class MemberSkillsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Member Skill Count
     * @param id
     * @param conditions
     */
    systemMembersIdSkillsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Member Skill
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMembersIdSkillsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<MemberSkill>>;
    /**
     *
     * Create Member Skill
     * @param id
     * @param memberSkill
     */
    systemMembersIdSkillsPost(params: {
        id: number;
        memberSkill: MemberSkill;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberSkill>;
    /**
     *
     * Delete Member Skill By Id
     * @param id
     * @param skillId
     */
    systemMembersIdSkillsSkillIdDelete(params: {
        id: number;
        skillId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Member Skill By Id
     * @param id
     * @param skillId
     */
    systemMembersIdSkillsSkillIdGet(params: {
        id: number;
        skillId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberSkill>;
    /**
     *
     * Update Member Skill
     * @param id
     * @param skillId
     * @param operations
     */
    systemMembersIdSkillsSkillIdPatch(params: {
        id: number;
        skillId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberSkill>;
    /**
     *
     * Replace Member Skill
     * @param id
     * @param skillId
     * @param memberSkill
     */
    systemMembersIdSkillsSkillIdPut(params: {
        id: number;
        skillId: number;
        memberSkill: MemberSkill;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberSkill>;
}
export class MemberTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Type Count
     * @param conditions
     */
    systemMembersTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Type
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMembersTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Type>>;
    /**
     *
     * Delete Type By Id
     * @param id
     */
    systemMembersTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Type By Id
     * @param id
     */
    systemMembersTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Type>;
    /**
     *
     * Update Type
     * @param id
     * @param operations
     */
    systemMembersTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Type>;
    /**
     *
     * Replace Type
     * @param id
     * @param type
     */
    systemMembersTypesIdPut(params: {
        id: number;
        type: Type;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Type>;
    /**
     *
     * Create Type
     * @param type
     */
    systemMembersTypesPost(params: {
        type: Type;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Type>;
}
export class MembersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Members Count
     * @param conditions
     */
    systemMembersCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Members
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMembersGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Member>>;
    /**
     *
     * Deactivatemember
     * @param id
     * @param item
     */
    systemMembersIdDeactivatePost(params: {
        id: number;
        item: MemberDeactivation;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MemberDeactivation>;
    /**
     *
     * Get Member By Id
     * @param id
     */
    systemMembersIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Member>;
    /**
     *
     * Update Member
     * @param id
     * @param operations
     */
    systemMembersIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Member>;
    /**
     *
     * Replace Member
     * @param id
     * @param member
     */
    systemMembersIdPut(params: {
        id: number;
        member: Member;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Member>;
    /**
     *
     * Delete Member Unused Time Sheets
     * @param id
     */
    systemMembersIdUnusedTimeSheetsDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Create Token By Member Identifier
     * @param memberIdentifier
     */
    systemMembersMemberIdentifierTokensPost(params: {
        memberIdentifier: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Token>;
    /**
     *
     * Create Member
     * @param member
     */
    systemMembersPost(params: {
        member: Member;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Member>;
}
export class MenuEntriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Menu Entries Count
     * @param conditions
     */
    systemMenuentriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Menu Entries
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMenuentriesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<MenuEntry>>;
    /**
     *
     * Delete Menu Entry By Id
     * @param id
     */
    systemMenuentriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Menu Entry By Id
     * @param id
     */
    systemMenuentriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MenuEntry>;
    /**
     *
     * Get Menu Entry Image
     * @param id
     * @param lastmodified
     * @param largeFlag
     */
    systemMenuentriesIdImageGet(params: {
        id: number;
        lastmodified?: string;
        largeFlag?: boolean;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Upload Menu Entry Image
     * @param id
     * @param file File to upload
     */
    systemMenuentriesIdImagePost(params: {
        id: number;
        file?: any;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Update Menu Entry
     * @param id
     * @param operations
     */
    systemMenuentriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MenuEntry>;
    /**
     *
     * Replace Menu Entry
     * @param id
     * @param menuEntry
     */
    systemMenuentriesIdPut(params: {
        id: number;
        menuEntry: MenuEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MenuEntry>;
    /**
     *
     * Create Menu Entry
     * @param menuEntry
     */
    systemMenuentriesPost(params: {
        menuEntry: MenuEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MenuEntry>;
}
export class MenuEntryLocationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Menu Entry Location Count
     * @param id
     * @param conditions
     */
    systemMenuEntriesIdLocationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Menu Entry Location
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMenuEntriesIdLocationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<MenuEntryLocation>>;
    /**
     *
     * Delete Menu Entry Location By Id
     * @param id
     * @param locationId
     */
    systemMenuEntriesIdLocationsLocationIdDelete(params: {
        id: number;
        locationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Menu Entry Location By Id
     * @param id
     * @param locationId
     */
    systemMenuEntriesIdLocationsLocationIdGet(params: {
        id: number;
        locationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MenuEntryLocation>;
    /**
     *
     * Create Menu Entry Location
     * @param id
     * @param menuEntryLocation
     */
    systemMenuEntriesIdLocationsPost(params: {
        id: number;
        menuEntryLocation: MenuEntryLocation;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MenuEntryLocation>;
}
export class MyCompanyPurchasingsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get My Company Purchasings Count
     * @param conditions
     */
    systemMycompanyPurchasingCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get My Company Purchasings
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMycompanyPurchasingGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Purchasing>>;
    /**
     *
     * Get My Company Purchasing By Id
     * @param id
     */
    systemMycompanyPurchasingIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Purchasing>;
    /**
     *
     * Update My Company Purchasing
     * @param id
     * @param operations
     */
    systemMycompanyPurchasingIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Purchasing>;
    /**
     *
     * Replace My Company Purchasing
     * @param id
     * @param purchasing
     */
    systemMycompanyPurchasingIdPut(params: {
        id: number;
        purchasing: Purchasing;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Purchasing>;
}
export class NotificationRecipientsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Notification Recipients Count
     * @param conditions
     */
    systemNotificationRecipientsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Notification Recipients
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemNotificationRecipientsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<NotificationRecipient>>;
    /**
     *
     * Get Notification Recipient By Id
     * @param id
     */
    systemNotificationRecipientsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<NotificationRecipient>;
}
export class OpportunitiesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Opportunities Count
     * @param conditions
     * @param customFieldConditions
     */
    salesOpportunitiesCountGet(params: {
        conditions?: string;
        customFieldConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Opportunities
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesOpportunitiesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Opportunity>>;
    /**
     *
     * Convert Opportunity To Agreement
     * @param id
     * @param conversion
     */
    salesOpportunitiesIdConvertToAgreementPost(params: {
        id: number;
        conversion: OpportunityToAgreementConversion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Agreement>;
    /**
     *
     * Convert Opportunity To Project
     * @param id
     * @param conversion
     */
    salesOpportunitiesIdConvertToProjectPost(params: {
        id: number;
        conversion: OpportunityToProjectConversion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Project>;
    /**
     *
     * Convert Opportunity To Sales Order
     * @param id
     * @param conversion
     */
    salesOpportunitiesIdConvertToSalesOrderPost(params: {
        id: number;
        conversion: OpportunityToSalesOrderConversion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Order>;
    /**
     *
     * Convert Opportunity To Service Ticket
     * @param id
     * @param conversion
     */
    salesOpportunitiesIdConvertToServiceTicketPost(params: {
        id: number;
        conversion: OpportunityToServiceTicketConversion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Ticket>;
    /**
     *
     * Delete Opportunity By Id
     * @param id
     */
    salesOpportunitiesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Opportunity By Id
     * @param id
     */
    salesOpportunitiesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Opportunity>;
    /**
     *
     * Update Opportunity
     * @param id
     * @param operations
     */
    salesOpportunitiesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Opportunity>;
    /**
     *
     * Replace Opportunity
     * @param id
     * @param opportunity
     */
    salesOpportunitiesIdPut(params: {
        id: number;
        opportunity: Opportunity;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Opportunity>;
    /**
     *
     * Create Opportunity
     * @param opportunity
     */
    salesOpportunitiesPost(params: {
        opportunity: Opportunity;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Opportunity>;
}
export class OpportunityContactsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Opportunity Contact By Id
     * @param id
     * @param contactId
     */
    salesOpportunitiesIdContactsContactIdDelete(params: {
        id: number;
        contactId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Opportunity Contact By Id
     * @param id
     * @param contactId
     */
    salesOpportunitiesIdContactsContactIdGet(params: {
        id: number;
        contactId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityContact>;
    /**
     *
     * Update Opportunity Contact
     * @param id
     * @param contactId
     * @param operations
     */
    salesOpportunitiesIdContactsContactIdPatch(params: {
        id: number;
        contactId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityContact>;
    /**
     *
     * Replace Opportunity Contact
     * @param id
     * @param contactId
     * @param opportunityContact
     */
    salesOpportunitiesIdContactsContactIdPut(params: {
        id: number;
        contactId: number;
        opportunityContact: OpportunityContact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityContact>;
    /**
     *
     * Get Opportunity Contacts Count
     * @param id
     * @param conditions
     */
    salesOpportunitiesIdContactsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Opportunity Contacts
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesOpportunitiesIdContactsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityContact>>;
    /**
     *
     * Create Opportunity Contact
     * @param id
     * @param opportunityContact
     */
    salesOpportunitiesIdContactsPost(params: {
        id: number;
        opportunityContact: OpportunityContact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityContact>;
}
export class OpportunityForecastsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Forecasts Count
     * @param id
     * @param conditions
     */
    salesOpportunitiesIdForecastCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Forecast By Id
     * @param id
     * @param forecastId
     */
    salesOpportunitiesIdForecastForecastIdDelete(params: {
        id: number;
        forecastId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Forecast By Id
     * @param id
     * @param forecastId
     */
    salesOpportunitiesIdForecastForecastIdGet(params: {
        id: number;
        forecastId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Forecast>;
    /**
     *
     * Update Forecast
     * @param id
     * @param forecastId
     * @param operations
     */
    salesOpportunitiesIdForecastForecastIdPatch(params: {
        id: number;
        forecastId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Forecast>;
    /**
     *
     * Replace Forecast
     * @param id
     * @param forecastId
     * @param forecast
     */
    salesOpportunitiesIdForecastForecastIdPut(params: {
        id: number;
        forecastId: number;
        forecast: Forecast;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Forecast>;
    /**
     *
     * Get Forecasts
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesOpportunitiesIdForecastGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Forecast>>;
    /**
     *
     * Create Forecast
     * @param id
     * @param forecast
     */
    salesOpportunitiesIdForecastPost(params: {
        id: number;
        forecast: Forecast;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Forecast>;
}
export class OpportunityNotesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Opportunity Notes Count
     * @param id
     * @param conditions
     */
    salesOpportunitiesIdNotesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityNote>>;
    /**
     *
     * Get Opportunity Notes
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesOpportunitiesIdNotesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityNote>>;
    /**
     *
     * Delete Opportunity Note By Id
     * @param id
     * @param noteId
     */
    salesOpportunitiesIdNotesNoteIdDelete(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Opportunity Note By Id
     * @param id
     * @param noteId
     */
    salesOpportunitiesIdNotesNoteIdGet(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityNote>;
    /**
     *
     * Update Opportunity Note
     * @param id
     * @param noteId
     * @param operations
     */
    salesOpportunitiesIdNotesNoteIdPatch(params: {
        id: number;
        noteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityNote>;
    /**
     *
     * Replace Opportunity Note
     * @param id
     * @param noteId
     * @param note
     */
    salesOpportunitiesIdNotesNoteIdPut(params: {
        id: number;
        noteId: number;
        note: OpportunityNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityNote>;
    /**
     *
     * Create Opportunity Note
     * @param id
     * @param note
     */
    salesOpportunitiesIdNotesPost(params: {
        id: number;
        note: OpportunityNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityNote>;
}
export class OpportunityRatingsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Opportunity Ratings Count
     * @param conditions
     */
    salesOpportunitiesRatingsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Opportunity Ratings
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesOpportunitiesRatingsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityRating>>;
    /**
     *
     * Delete Opportunity Rating By Id
     * @param id
     */
    salesOpportunitiesRatingsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Opportunity Rating By Id
     * @param id
     */
    salesOpportunitiesRatingsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityRating>;
    /**
     *
     * Update Opportunity Rating
     * @param id
     * @param operations
     */
    salesOpportunitiesRatingsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityRating>;
    /**
     *
     * Replace Opportunity Rating
     * @param id
     * @param opportunityRating
     */
    salesOpportunitiesRatingsIdPut(params: {
        id: number;
        opportunityRating: OpportunityRating;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityRating>;
    /**
     *
     * Create Opportunity Rating
     * @param opportunityRating
     */
    salesOpportunitiesRatingsPost(params: {
        opportunityRating: OpportunityRating;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityRating>;
}
export class OpportunityStagesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Stage Count
     * @param conditions
     */
    salesStagesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Stage
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesStagesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityStage>>;
    /**
     *
     * Delete Stage By Id
     * @param id
     */
    salesStagesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Stage By Id
     * @param id
     */
    salesStagesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityStage>;
    /**
     *
     * Update Stage
     * @param id
     * @param operations
     */
    salesStagesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityStage>;
    /**
     *
     * Replace Stage
     * @param id
     * @param stage
     */
    salesStagesIdPut(params: {
        id: number;
        stage: OpportunityStage;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityStage>;
    /**
     *
     * Create Stage
     * @param stage
     */
    salesStagesPost(params: {
        stage: OpportunityStage;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityStage>;
}
export class OpportunityStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Statuses Count
     * @param conditions
     */
    salesOpportunitiesStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesOpportunitiesStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityStatus>>;
    /**
     *
     * Delete Status By Id
     * @param id
     */
    salesOpportunitiesStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Status By Id
     * @param id
     */
    salesOpportunitiesStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityStatus>;
    /**
     *
     * Update Status
     * @param id
     * @param operations
     */
    salesOpportunitiesStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityStatus>;
    /**
     *
     * Replace Status
     * @param id
     * @param status
     */
    salesOpportunitiesStatusesIdPut(params: {
        id: number;
        status: OpportunityStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityStatus>;
    /**
     *
     * Create Status
     * @param status
     */
    salesOpportunitiesStatusesPost(params: {
        status: OpportunityStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityStatus>;
}
export class OpportunityTeamsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Teams Count
     * @param id
     * @param conditions
     */
    salesOpportunitiesIdTeamCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Teams
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesOpportunitiesIdTeamGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Team>>;
    /**
     *
     * Create Team
     * @param id
     * @param team
     */
    salesOpportunitiesIdTeamPost(params: {
        id: number;
        team: Team;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Team>;
    /**
     *
     * Delete Team By Id
     * @param id
     * @param teamId
     */
    salesOpportunitiesIdTeamTeamIdDelete(params: {
        id: number;
        teamId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Team By Id
     * @param id
     * @param teamId
     */
    salesOpportunitiesIdTeamTeamIdGet(params: {
        id: number;
        teamId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Team>;
    /**
     *
     * Update Team
     * @param id
     * @param teamId
     * @param operations
     */
    salesOpportunitiesIdTeamTeamIdPatch(params: {
        id: number;
        teamId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Team>;
    /**
     *
     * Replace Team
     * @param id
     * @param teamId
     * @param team
     */
    salesOpportunitiesIdTeamTeamIdPut(params: {
        id: number;
        teamId: number;
        team: Team;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Team>;
}
export class OpportunityTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Opportunity Types Count
     * @param conditions
     */
    salesOpportunitiesTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Opportunity Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesOpportunitiesTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityType>>;
    /**
     *
     * Delete Opportunity Type By Id
     * @param id
     */
    salesOpportunitiesTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Opportunity Type By Id
     * @param id
     */
    salesOpportunitiesTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityType>;
    /**
     *
     * Update Opportunity Type
     * @param id
     * @param operations
     */
    salesOpportunitiesTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityType>;
    /**
     *
     * Replace Opportunity Type
     * @param id
     * @param opportunityType
     */
    salesOpportunitiesTypesIdPut(params: {
        id: number;
        opportunityType: OpportunityType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityType>;
    /**
     *
     * Create Opportunity Type
     * @param opportunityType
     */
    salesOpportunitiesTypesPost(params: {
        opportunityType: OpportunityType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityType>;
}
export class OrderStatusNotificationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Order Status Notifications Count
     * @param id
     * @param conditions
     */
    salesOrdersStatusesIdNotificationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Order Status Notifications
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesOrdersStatusesIdNotificationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OrderStatusNotification>>;
    /**
     *
     * Delete Order Status Notification By Id
     * @param id
     * @param notificationId
     */
    salesOrdersStatusesIdNotificationsNotificationIdDelete(params: {
        id: number;
        notificationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Order Status Notification By Id
     * @param id
     * @param notificationId
     */
    salesOrdersStatusesIdNotificationsNotificationIdGet(params: {
        id: number;
        notificationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatusNotification>;
    /**
     *
     * Update Order Status Notification
     * @param id
     * @param notificationId
     * @param operations
     */
    salesOrdersStatusesIdNotificationsNotificationIdPatch(params: {
        id: number;
        notificationId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatusNotification>;
    /**
     *
     * Replace Order Status Notification
     * @param id
     * @param notificationId
     * @param orderStatusNotification
     */
    salesOrdersStatusesIdNotificationsNotificationIdPut(params: {
        id: number;
        notificationId: number;
        orderStatusNotification: OrderStatusNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatusNotification>;
    /**
     *
     * Create Order Status Notification
     * @param id
     * @param orderStatusNotification
     */
    salesOrdersStatusesIdNotificationsPost(params: {
        id: number;
        orderStatusNotification: OrderStatusNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatusNotification>;
}
export class OrderStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Order Statuses Count
     * @param conditions
     */
    salesOrdersStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Order Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesOrdersStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OrderStatus>>;
    /**
     *
     * Delete Order Status By Id
     * @param id
     */
    salesOrdersStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Order Status By Id
     * @param id
     */
    salesOrdersStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatus>;
    /**
     *
     * Update Order Status
     * @param id
     * @param operations
     */
    salesOrdersStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatus>;
    /**
     *
     * Replace Order Status
     * @param id
     * @param status
     */
    salesOrdersStatusesIdPut(params: {
        id: number;
        status: OrderStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatus>;
    /**
     *
     * Create Order Status
     * @param status
     */
    salesOrdersStatusesPost(params: {
        status: OrderStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OrderStatus>>;
}
export class OrderStatusesEmailTemplateApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Order Status Email Template Count
     * @param orderStatus
     * @param conditions
     */
    salesOrdersStatusesIdEmailtemplatesCountGet(params: {
        orderStatus: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Order Status Email Template By Id
     * @param id
     * @param emailTemplateId
     */
    salesOrdersStatusesIdEmailtemplatesEmailTemplateIdDelete(params: {
        id: number;
        emailTemplateId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Order Status Email Template By Id
     * @param id
     * @param emailTemplateId
     */
    salesOrdersStatusesIdEmailtemplatesEmailTemplateIdGet(params: {
        id: number;
        emailTemplateId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatusEmailTemplate>;
    /**
     *
     * Update Order Status Email Template
     * @param id
     * @param emailTemplateId
     * @param operations
     */
    salesOrdersStatusesIdEmailtemplatesEmailTemplateIdPatch(params: {
        id: number;
        emailTemplateId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatusEmailTemplate>;
    /**
     *
     * Replace Order Status Email Template
     * @param id
     * @param emailTemplateId
     * @param orderStatusEmailTemplate
     */
    salesOrdersStatusesIdEmailtemplatesEmailTemplateIdPut(params: {
        id: number;
        emailTemplateId: number;
        orderStatusEmailTemplate: OrderStatusEmailTemplate;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatusEmailTemplate>;
    /**
     *
     * Get Order Status Email Template
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesOrdersStatusesIdEmailtemplatesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OrderStatusEmailTemplate>>;
    /**
     *
     * Create Order Status Email Template
     * @param id
     * @param orderStatusEmailTemplate
     */
    salesOrdersStatusesIdEmailtemplatesPost(params: {
        id: number;
        orderStatusEmailTemplate: OrderStatusEmailTemplate;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatusEmailTemplate>;
}
export class OrdersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Sales Orders Count
     * @param conditions
     * @param customFieldConditions
     */
    salesOrdersCountGet(params: {
        conditions?: string;
        customFieldConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Sales Orders
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesOrdersGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Order>>;
    /**
     *
     * Delete Sales Order By Id
     * @param id
     */
    salesOrdersIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Sales Order By Id
     * @param id
     */
    salesOrdersIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Order>;
    /**
     *
     * Update Sales Order
     * @param id
     * @param operations
     */
    salesOrdersIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Order>;
    /**
     *
     * Replace Sales Order
     * @param id
     * @param order
     */
    salesOrdersIdPut(params: {
        id: number;
        order: Order;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Order>;
    /**
     *
     * Create Sales Order
     * @param order
     */
    salesOrdersPost(params: {
        order: Order;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Order>>;
}
export class OthersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Others Count
     * @param conditions
     */
    systemMyCompanyOtherCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Others
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMyCompanyOtherGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Other>>;
    /**
     *
     * Get Other By Id
     * @param id
     */
    systemMyCompanyOtherIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Other>;
    /**
     *
     * Update Other
     * @param id
     * @param operations
     */
    systemMyCompanyOtherIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Other>;
    /**
     *
     * Replace Other
     * @param id
     * @param other
     */
    systemMyCompanyOtherIdPut(params: {
        id: number;
        other: Other;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Other>;
}
export class OwnershipTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Ownership Type Count
     * @param conditions
     */
    companyOwnershipTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Ownership Type
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyOwnershipTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OwnershipType>>;
    /**
     *
     * Delete Ownership Type By Id
     * @param id
     */
    companyOwnershipTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Ownership Type By Id
     * @param id
     */
    companyOwnershipTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OwnershipType>;
    /**
     *
     * Update Ownership Type
     * @param id
     * @param operations
     */
    companyOwnershipTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OwnershipType>;
    /**
     *
     * Replace Ownership Type
     * @param id
     * @param ownershipType
     */
    companyOwnershipTypesIdPut(params: {
        id: number;
        ownershipType: OwnershipType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OwnershipType>;
    /**
     *
     * Create Ownership Type
     * @param ownershipType
     */
    companyOwnershipTypesPost(params: {
        ownershipType: OwnershipType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OwnershipType>;
}
export class ParsingTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Parsing Type Count
     * @param conditions
     */
    systemParsingTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Parsing Parsing Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemParsingTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ParsingType>>;
    /**
     *
     * Get Parsing Type By Id
     * @param id
     */
    systemParsingTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ParsingType>;
}
export class ParsingVariablesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Parsing Variable Count
     * @param conditions
     */
    systemParsingVariablesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Parsing Variables
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemParsingVariablesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ParsingVariable>>;
    /**
     *
     * Get Parsing Variable By Id
     * @param id
     */
    systemParsingVariablesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ParsingVariable>;
}
export class PaymentTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Payment Type Count
     * @param conditions
     */
    expensePaymentTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Payment Type
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    expensePaymentTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PaymentType>>;
    /**
     *
     * Delete Payment Type By Id
     * @param id
     */
    expensePaymentTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Payment Type By Id
     * @param id
     */
    expensePaymentTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PaymentType>;
    /**
     *
     * Update Payment Type
     * @param id
     * @param operations
     */
    expensePaymentTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PaymentType>;
    /**
     *
     * Replace Payment Type
     * @param id
     * @param paymentType
     */
    expensePaymentTypesIdPut(params: {
        id: number;
        paymentType: PaymentType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PaymentType>;
    /**
     *
     * Create Payment Type
     * @param paymentType
     */
    expensePaymentTypesPost(params: {
        paymentType: PaymentType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PaymentType>;
}
export class PortalCalendarsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Portal Calendars Count
     * @param conditions
     */
    systemMycompanyPortalcalendarsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Portal Calendars
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMycompanyPortalcalendarsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PortalCalendar>>;
    /**
     *
     * Get Portal Calendar By Id
     * @param id
     */
    systemMycompanyPortalcalendarsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalCalendar>;
    /**
     *
     * Update Portal Calendar
     * @param id
     * @param operations
     */
    systemMycompanyPortalcalendarsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalCalendar>;
    /**
     *
     * Replace Portal Calendar
     * @param id
     * @param portalCalendar
     */
    systemMycompanyPortalcalendarsIdPut(params: {
        id: number;
        portalCalendar: PortalCalendar;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalCalendar>;
}
export class PortalConfigurationInvoiceSetupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Portal Configuration Invoice Setup Count
     * @param id
     * @param conditions
     */
    systemPortalConfigurationsIdInvoiceSetupsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Portal Configuration Invoice Setup
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemPortalConfigurationsIdInvoiceSetupsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PortalConfigurationInvoiceSetup>>;
    /**
     *
     * Get Portal Configuration Invoice Setup By Id
     * @param id
     * @param invoiceSetupId
     */
    systemPortalConfigurationsIdInvoiceSetupsInvoiceSetupIdGet(params: {
        id: number;
        invoiceSetupId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationInvoiceSetup>;
    /**
     *
     * Update Portal Configuration Invoice Setup
     * @param id
     * @param invoiceSetupId
     * @param operations
     */
    systemPortalConfigurationsIdInvoiceSetupsInvoiceSetupIdPatch(params: {
        id: number;
        invoiceSetupId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationInvoiceSetup>;
    /**
     *
     * Replace Portal Configuration Invoice Setup
     * @param id
     * @param invoiceSetupId
     * @param portalConfigurationInvoiceSetup
     */
    systemPortalConfigurationsIdInvoiceSetupsInvoiceSetupIdPut(params: {
        id: number;
        invoiceSetupId: number;
        portalConfigurationInvoiceSetup: PortalConfigurationInvoiceSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationInvoiceSetup>;
    /**
     *
     * Test Transaction
     * @param id
     * @param invoiceSetupId
     * @param portalConfigurationInvoiceSetup
     */
    systemPortalConfigurationsIdInvoiceSetupsInvoiceSetupIdTestTransactionPost(params: {
        id: number;
        invoiceSetupId: number;
        portalConfigurationInvoiceSetup: PortalConfigurationInvoiceSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SuccessResponse>;
}
export class PortalConfigurationOpportunitySetupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Portal Configuration Opportunity Setup
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemPortalConfigurationsIdOpportunitySetupsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PortalConfigurationOpportunitySetup>>;
    /**
     *
     * Update Portal Configuration Opportunity Setup
     * @param id
     * @param operations
     */
    systemPortalConfigurationsIdOpportunitySetupsPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationOpportunitySetup>;
    /**
     *
     * Get Portal Configuration Opportunity Setup By Id
     * @param id
     * @param portalConfigurationId
     */
    systemPortalConfigurationsIdOpportunitySetupsPortalConfigurationIdGet(params: {
        id: number;
        portalConfigurationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationOpportunitySetup>;
    /**
     *
     * Update Portal Configuration Opportunity Setup By Id
     * @param id
     * @param portalConfigurationId
     * @param operations
     */
    systemPortalConfigurationsIdOpportunitySetupsPortalConfigurationIdPatch(params: {
        id: number;
        portalConfigurationId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationOpportunitySetup>;
    /**
     *
     * Replace Portal Configuration Opportunity Setup
     * @param id
     * @param opportunitySetup
     */
    systemPortalConfigurationsIdOpportunitySetupsPut(params: {
        id: number;
        opportunitySetup: PortalConfigurationOpportunitySetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationOpportunitySetup>;
}
export class PortalConfigurationPasswordEmailSetupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Portal Configuration Password Email Setup
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemPortalConfigurationsIdPasswordEmailSetupsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PortalConfigurationPasswordEmailSetup>>;
    /**
     *
     * Get Portal Configuration Password Email Setup
     * @param id
     * @param passwordEmailSetupId
     */
    systemPortalConfigurationsIdPasswordEmailSetupsPasswordEmailSetupIdGet(params: {
        id: number;
        passwordEmailSetupId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationPasswordEmailSetup>;
    /**
     *
     * Update Portal Configuration Password Email Setup
     * @param id
     * @param passwordEmailSetupId
     * @param operations
     */
    systemPortalConfigurationsIdPasswordEmailSetupsPasswordEmailSetupIdPatch(params: {
        id: number;
        passwordEmailSetupId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationPasswordEmailSetup>;
    /**
     *
     * Replace Portal Configuration Password Email Setup
     * @param id
     * @param passwordEmailSetupId
     * @param passwordEmailSetup
     */
    systemPortalConfigurationsIdPasswordEmailSetupsPasswordEmailSetupIdPut(params: {
        id: number;
        passwordEmailSetupId: number;
        passwordEmailSetup: PortalConfigurationPasswordEmailSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationPasswordEmailSetup>;
}
export class PortalConfigurationProjectSetupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Portal Configuration Project Setups Count
     * @param id
     * @param conditions
     */
    systemPortalConfigurationsIdProjectSetupsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Portal Configuration Project Setups
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemPortalConfigurationsIdProjectSetupsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PortalConfigurationProjectSetup>>;
    /**
     *
     * Get Portal Configuration Project Setup By Id
     * @param id
     * @param portalConfigurationId
     */
    systemPortalConfigurationsIdProjectSetupsPortalConfigurationIdGet(params: {
        id: number;
        portalConfigurationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationProjectSetup>;
    /**
     *
     * Update Portal Configuration Project Setup
     * @param id
     * @param portalConfigurationId
     * @param operations
     */
    systemPortalConfigurationsIdProjectSetupsPortalConfigurationIdPatch(params: {
        id: number;
        portalConfigurationId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationProjectSetup>;
    /**
     *
     * Replace Portal Configuration Project Setup
     * @param id
     * @param portalConfigurationId
     * @param portalConfigurationProjectSetup
     */
    systemPortalConfigurationsIdProjectSetupsPortalConfigurationIdPut(params: {
        id: number;
        portalConfigurationId: number;
        portalConfigurationProjectSetup: PortalConfigurationProjectSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationProjectSetup>;
}
export class PortalConfigurationServiceSetupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Service Setups Count
     * @param id
     * @param conditions
     */
    systemPortalConfigurationsIdServiceSetupsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Service Setups
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemPortalConfigurationsIdServiceSetupsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PortalConfigurationServiceSetup>>;
    /**
     *
     * Get Service Setup By Id
     * @param id
     * @param serviceSetupId
     */
    systemPortalConfigurationsIdServiceSetupsServiceSetupIdGet(params: {
        id: number;
        serviceSetupId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationServiceSetup>;
    /**
     *
     * Update Service Setup
     * @param id
     * @param serviceSetupId
     * @param operations
     */
    systemPortalConfigurationsIdServiceSetupsServiceSetupIdPatch(params: {
        id: number;
        serviceSetupId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationServiceSetup>;
    /**
     *
     * Replace Service Setup
     * @param id
     * @param serviceSetupId
     * @param portalConfigurationServiceSetup
     */
    systemPortalConfigurationsIdServiceSetupsServiceSetupIdPut(params: {
        id: number;
        serviceSetupId: number;
        portalConfigurationServiceSetup: PortalConfigurationServiceSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfigurationServiceSetup>;
}
export class PortalConfigurationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Portal Configurations Count
     * @param conditions
     */
    systemPortalConfigurationsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Portal Configurations
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemPortalConfigurationsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PortalConfiguration>>;
    /**
     *
     * Delete Portal Configuration By Id
     * @param id
     */
    systemPortalConfigurationsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Portal Configuration By Id
     * @param id
     */
    systemPortalConfigurationsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfiguration>;
    /**
     *
     * Update Portal Configuration
     * @param id
     * @param operations
     */
    systemPortalConfigurationsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfiguration>;
    /**
     *
     * Get Portal Image
     * @param id
     * @param lastUpdated
     */
    systemPortalConfigurationsIdPortalImageGet(params: {
        id: number;
        lastUpdated?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Replace Portal Configuration
     * @param id
     * @param portalConfiguration
     */
    systemPortalConfigurationsIdPut(params: {
        id: number;
        portalConfiguration: PortalConfiguration;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfiguration>;
    /**
     *
     * Get Report Image
     * @param id
     * @param lastUpdated
     */
    systemPortalConfigurationsIdReportImageGet(params: {
        id: number;
        lastUpdated?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Create Portal Configuration
     * @param portalConfiguration
     */
    systemPortalConfigurationsPost(params: {
        portalConfiguration: PortalConfiguration;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalConfiguration>;
}
export class PortalReportsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Portal Reports Count
     * @param conditions
     */
    systemPortalReportsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Portal Reports
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemPortalReportsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PortalReport>>;
    /**
     *
     * Delete Portal Report By Id
     * @param id
     */
    systemPortalReportsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Portal Report By Id
     * @param id
     */
    systemPortalReportsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalReport>;
    /**
     *
     * Update Portal Report
     * @param id
     * @param operations
     */
    systemPortalReportsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalReport>;
    /**
     *
     * Replace Portal Report
     * @param id
     * @param portalReport
     */
    systemPortalReportsIdPut(params: {
        id: number;
        portalReport: PortalReport;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalReport>;
    /**
     *
     * Create Portal Report
     * @param portalReport
     */
    systemPortalReportsPost(params: {
        portalReport: PortalReport;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalReport>;
}
export class PortalSecuritiesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Portal Securities Count
     * @param conditions
     */
    systemPortalSecuritiesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Portal Securities
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemPortalSecuritiesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PortalSecurity>>;
    /**
     *
     * Get Portal Security By Id
     * @param id
     */
    systemPortalSecuritiesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalSecurity>;
    /**
     *
     * Update Portal Security
     * @param id
     * @param operations
     */
    systemPortalSecuritiesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalSecurity>;
    /**
     *
     * Replace Portal Security
     * @param id
     * @param portalSecurity
     */
    systemPortalSecuritiesIdPut(params: {
        id: number;
        portalSecurity: PortalSecurity;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalSecurity>;
}
export class PortalSecurityLevelsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Portal Security Level Captions Count
     * @param conditions
     */
    systemPortalSecurityLevelsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Portal Security Level Captions
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemPortalSecurityLevelsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PortalSecurityLevel>>;
    /**
     *
     * Get Portal Security Level Caption By Id
     * @param id
     */
    systemPortalSecurityLevelsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalSecurityLevel>;
    /**
     *
     * Update Portal Security Level Caption
     * @param id
     * @param operations
     */
    systemPortalSecurityLevelsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalSecurityLevel>;
    /**
     *
     * Replace Portal Security Level Caption
     * @param id
     * @param portalSecurityLevel
     */
    systemPortalSecurityLevelsIdPut(params: {
        id: number;
        portalSecurityLevel: PortalSecurityLevel;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PortalSecurityLevel>;
}
export class PricingBreaksApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Pricing Break By Id
     * @param schedId
     * @param detailId
     * @param breakId
     */
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdDelete(params: {
        schedId: number;
        detailId: number;
        breakId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Pricing Break By Id
     * @param schedId
     * @param detailId
     * @param breakId
     */
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdGet(params: {
        schedId: number;
        detailId: number;
        breakId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingBreak>;
    /**
     *
     * Update Pricing Break
     * @param schedId
     * @param detailId
     * @param breakId
     * @param operations
     */
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPatch(params: {
        schedId: number;
        detailId: number;
        breakId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingBreak>;
    /**
     *
     * Replace Pricing Break
     * @param schedId
     * @param detailId
     * @param breakId
     * @param pricingBreak
     */
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPut(params: {
        schedId: number;
        detailId: number;
        breakId: number;
        pricingBreak: PricingBreak;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingBreak>;
    /**
     *
     * Get Pricing Break Count
     * @param schedId
     * @param detailId
     * @param conditions
     */
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksCountGet(params: {
        schedId: number;
        detailId: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Pricing Break
     * @param schedId
     * @param detailId
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksGet(params: {
        schedId: number;
        detailId: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PricingBreak>>;
    /**
     *
     * Create Pricing Break
     * @param schedId
     * @param detailId
     * @param pricingBreak
     */
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksPost(params: {
        schedId: number;
        detailId: number;
        pricingBreak: PricingBreak;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingBreak>;
}
export class PricingDetailsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Pricing Detail Count
     * @param id
     * @param conditions
     */
    procurementPricingschedulesIdDetailsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Pricing Detail By Id
     * @param id
     * @param detailID
     */
    procurementPricingschedulesIdDetailsDetailIDDelete(params: {
        id: number;
        detailID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Pricing Detail By Id
     * @param id
     * @param detailID
     */
    procurementPricingschedulesIdDetailsDetailIDGet(params: {
        id: number;
        detailID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingDetail>;
    /**
     *
     * Update Pricing Detail
     * @param id
     * @param detailID
     * @param operations
     */
    procurementPricingschedulesIdDetailsDetailIDPatch(params: {
        id: number;
        detailID: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingDetail>;
    /**
     *
     * Replace Pricing Detail
     * @param id
     * @param detailID
     * @param pricingDetail
     */
    procurementPricingschedulesIdDetailsDetailIDPut(params: {
        id: number;
        detailID: number;
        pricingDetail: PricingDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingDetail>;
    /**
     *
     * Get Pricing Detail
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementPricingschedulesIdDetailsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PricingDetail>>;
    /**
     *
     * Create Pricing Detail
     * @param id
     * @param pricingDetail
     */
    procurementPricingschedulesIdDetailsPost(params: {
        id: number;
        pricingDetail: PricingDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingDetail>;
}
export class PricingSchedulesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Pricing Schedules Count
     * @param conditions
     */
    procurementPricingschedulesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Pricing Schedules
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementPricingschedulesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PricingSchedule>>;
    /**
     *
     * Delete Pricing Schedule By Id
     * @param id
     */
    procurementPricingschedulesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Pricing Schedule By Id
     * @param id
     */
    procurementPricingschedulesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingSchedule>;
    /**
     *
     * Update Pricing Schedule
     * @param id
     * @param operations
     */
    procurementPricingschedulesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingSchedule>;
    /**
     *
     * Replace Pricing Schedule
     * @param id
     * @param pricingSchedule
     */
    procurementPricingschedulesIdPut(params: {
        id: number;
        pricingSchedule: PricingSchedule;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingSchedule>;
    /**
     *
     * Create Pricing Schedule
     * @param pricingSchedule
     */
    procurementPricingschedulesPost(params: {
        pricingSchedule: PricingSchedule;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingSchedule>;
}
export class PrioritiesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Create Priorities Count
     * @param conditions
     */
    servicePrioritiesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Priorities
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    servicePrioritiesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Priority>>;
    /**
     *
     * Delete Priority By Id
     * @param id
     */
    servicePrioritiesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Priority By Id
     * @param id
     */
    servicePrioritiesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Priority>;
    /**
     *
     * Get Priority Image
     * @param id
     * @param useDefaultFlag
     * @param lastModified
     */
    servicePrioritiesIdImageGet(params: {
        id: number;
        useDefaultFlag?: boolean;
        lastModified?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Update Priority
     * @param id
     * @param operations
     */
    servicePrioritiesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Priority>;
    /**
     *
     * Replace Priority
     * @param id
     * @param priority
     */
    servicePrioritiesIdPut(params: {
        id: number;
        priority: Priority;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Priority>;
    /**
     *
     * Create Priority
     * @param priority
     */
    servicePrioritiesPost(params: {
        priority: Priority;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Priority>;
}
export class ProductComponentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Product Component By Id
     * @param id
     * @param componentId
     */
    procurementProductsIdComponentsComponentIdDelete(params: {
        id: number;
        componentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Product Component By Id
     * @param id
     * @param componentId
     */
    procurementProductsIdComponentsComponentIdGet(params: {
        id: number;
        componentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductComponent>>;
    /**
     *
     * Update Product Component
     * @param id
     * @param componentId
     * @param operations
     */
    procurementProductsIdComponentsComponentIdPatch(params: {
        id: number;
        componentId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductComponent>>;
    /**
     *
     * Replace Product Component
     * @param id
     * @param componentId
     * @param productComponent
     */
    procurementProductsIdComponentsComponentIdPut(params: {
        id: number;
        componentId: number;
        productComponent: ProductComponent;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductComponent>>;
    /**
     *
     * Get Product Components Count
     * @param id
     * @param conditions
     */
    procurementProductsIdComponentsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Product Components
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementProductsIdComponentsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductComponent>>;
    /**
     *
     * Create Product Component
     * @param id
     * @param productComponent
     */
    procurementProductsIdComponentsPost(params: {
        id: number;
        productComponent: ProductComponent;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductComponent>>;
}
export class ProductPickingShippingDetailsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Product Picking Shipping Details Count
     * @param id
     * @param conditions
     */
    procurementProductsIdPickingShippingDetailsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Product Picking Shipping Details
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementProductsIdPickingShippingDetailsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductPickingShippingDetail>>;
    /**
     *
     * Delete Products By Id
     * @param id
     * @param pickingShippingDetailId
     */
    procurementProductsIdPickingShippingDetailsPickingShippingDetailIdDelete(params: {
        id: number;
        pickingShippingDetailId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Products By Id
     * @param id
     * @param pickingShippingDetailId
     */
    procurementProductsIdPickingShippingDetailsPickingShippingDetailIdGet(params: {
        id: number;
        pickingShippingDetailId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductPickingShippingDetail>>;
    /**
     *
     * Update Products
     * @param id
     * @param pickingShippingDetailId
     * @param operations
     */
    procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPatch(params: {
        id: number;
        pickingShippingDetailId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductPickingShippingDetail>>;
    /**
     *
     * Replace Products
     * @param id
     * @param pickingShippingDetailId
     * @param productPickingShippingDetails
     */
    procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPut(params: {
        id: number;
        pickingShippingDetailId: number;
        productPickingShippingDetails: ProductPickingShippingDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductPickingShippingDetail>>;
    /**
     *
     * Create Product Picking Shipping Detail
     * @param id
     * @param productPickingShippingDetails
     */
    procurementProductsIdPickingShippingDetailsPost(params: {
        id: number;
        productPickingShippingDetails: ProductPickingShippingDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductPickingShippingDetail>>;
}
export class ProductTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Product Typess Count
     * @param conditions
     */
    procurementTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Product Typess
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductType>>;
    /**
     *
     * Delete Product Types By Id
     * @param id
     */
    procurementTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Product Types By Id
     * @param id
     */
    procurementTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductType>;
    /**
     *
     * Update Product Types
     * @param id
     * @param operations
     */
    procurementTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductType>;
    /**
     *
     * Replace Product Types
     * @param id
     * @param productTypes
     */
    procurementTypesIdPut(params: {
        id: number;
        productTypes: ProductType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductType>;
    /**
     *
     * Create Product Types
     * @param productTypes
     */
    procurementTypesPost(params: {
        productTypes: ProductType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductType>;
}
export class ProductsItemApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Products Count
     * @param conditions
     */
    procurementProductsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Products
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementProductsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductItem>>;
    /**
     *
     * Delete Product By Id
     * @param id
     */
    procurementProductsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Product By Id
     * @param id
     */
    procurementProductsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductItem>;
    /**
     *
     * Update Product
     * @param id
     * @param operations
     */
    procurementProductsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductItem>;
    /**
     *
     * Replace Product
     * @param id
     * @param productItem
     */
    procurementProductsIdPut(params: {
        id: number;
        productItem: ProductItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductItem>;
    /**
     *
     * Create Product
     * @param productItem
     */
    procurementProductsPost(params: {
        productItem: ProductItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductItem>;
}
export class ProjectContactsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Project Contact By Id
     * @param id
     * @param contactId
     */
    projectProjectsIdContactsContactIdDelete(params: {
        id: number;
        contactId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Project Contact By Id
     * @param id
     * @param contactId
     */
    projectProjectsIdContactsContactIdGet(params: {
        id: number;
        contactId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectContact>;
    /**
     *
     * Get Project Contacts
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    projectProjectsIdContactsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProjectContact>>;
    /**
     *
     * Create Project Contact
     * @param id
     * @param contact
     */
    projectProjectsIdContactsPost(params: {
        id: number;
        contact: ProjectContact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectContact>;
}
export class ProjectNotesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Project Notes Count
     * @param id
     * @param conditions
     */
    projectProjectsIdNotesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Project Notes
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    projectProjectsIdNotesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProjectNote>>;
    /**
     *
     * Delete Project Note By Id
     * @param id
     * @param noteId
     */
    projectProjectsIdNotesNoteIdDelete(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Project Note By Id
     * @param id
     * @param noteId
     */
    projectProjectsIdNotesNoteIdGet(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectNote>;
    /**
     *
     * Update Project Note
     * @param id
     * @param noteId
     * @param operations
     */
    projectProjectsIdNotesNoteIdPatch(params: {
        id: number;
        noteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectNote>;
    /**
     *
     * Replace Project Note
     * @param id
     * @param noteId
     * @param note
     */
    projectProjectsIdNotesNoteIdPut(params: {
        id: number;
        noteId: number;
        note: ProjectNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectNote>;
    /**
     *
     * Create Project Note
     * @param id
     * @param note
     */
    projectProjectsIdNotesPost(params: {
        id: number;
        note: ProjectNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectNote>;
}
export class ProjectPhasesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Project Phases Count
     * @param id
     * @param conditions
     */
    projectProjectsIdPhasesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Project Phases
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    projectProjectsIdPhasesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProjectPhase>>;
    /**
     *
     * Delete Project Phase By Id
     * @param id
     * @param phaseId
     */
    projectProjectsIdPhasesPhaseIdDelete(params: {
        id: number;
        phaseId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Project Phase By Id
     * @param id
     * @param phaseId
     */
    projectProjectsIdPhasesPhaseIdGet(params: {
        id: number;
        phaseId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectPhase>;
    /**
     *
     * Update Project Phase
     * @param id
     * @param phaseId
     * @param operations
     */
    projectProjectsIdPhasesPhaseIdPatch(params: {
        id: number;
        phaseId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectPhase>;
    /**
     *
     * Replace Project Phase
     * @param id
     * @param phaseId
     * @param projectPhase
     */
    projectProjectsIdPhasesPhaseIdPut(params: {
        id: number;
        phaseId: number;
        projectPhase: ProjectPhase;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectPhase>;
    /**
     *
     * Create Project Phase
     * @param id
     * @param projectPhase
     */
    projectProjectsIdPhasesPost(params: {
        id: number;
        projectPhase: ProjectPhase;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectPhase>;
}
export class ProjectSecurityRoleSettingsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Project Security Role Setting Count
     * @param id
     * @param conditions
     */
    systemProjectSecurityRolesIdSettingsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Project Security Role Settings
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemProjectSecurityRolesIdSettingsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProjectSecurityRoleSetting>>;
    /**
     *
     * Get Project Security Role Setting By Id
     * @param id
     * @param settingId
     */
    systemProjectSecurityRolesIdSettingsSettingIdGet(params: {
        id: number;
        settingId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectSecurityRoleSetting>;
    /**
     *
     * Update Project Security Role Setting
     * @param id
     * @param settingId
     * @param operations
     */
    systemProjectSecurityRolesIdSettingsSettingIdPatch(params: {
        id: number;
        settingId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectSecurityRoleSetting>;
    /**
     *
     * Replace Project Security Role Setting
     * @param id
     * @param settingId
     * @param projectSecurityRoleSetting
     */
    systemProjectSecurityRolesIdSettingsSettingIdPut(params: {
        id: number;
        settingId: number;
        projectSecurityRoleSetting: ProjectSecurityRoleSetting;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectSecurityRoleSetting>;
}
export class ProjectSecurityRolesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Project Security Role Count
     * @param conditions
     */
    systemProjectSecurityRolesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Project Security Roles
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemProjectSecurityRolesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProjectSecurityRole>>;
    /**
     *
     * Delete Project Security Roley By Id
     * @param id
     */
    systemProjectSecurityRolesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Project Security Role By Id
     * @param id
     */
    systemProjectSecurityRolesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectSecurityRole>;
    /**
     *
     * Update Project Security Role
     * @param id
     * @param operations
     */
    systemProjectSecurityRolesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectSecurityRole>;
    /**
     *
     * Replace Project Security Role
     * @param id
     * @param projectSecurityRole
     */
    systemProjectSecurityRolesIdPut(params: {
        id: number;
        projectSecurityRole: ProjectSecurityRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectSecurityRole>;
    /**
     *
     * Create Project Security Role
     * @param projectSecurityRole
     */
    systemProjectSecurityRolesPost(params: {
        projectSecurityRole: ProjectSecurityRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectSecurityRole>;
}
export class ProjectStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Project Statuses Count
     * @param conditions
     */
    projectStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Project Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    projectStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProjectStatus>>;
    /**
     *
     * Delete Project Status By Id
     * @param id
     */
    projectStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Project Status By Id
     * @param id
     */
    projectStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectStatus>;
    /**
     *
     * Update Project Status
     * @param id
     * @param operations
     */
    projectStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectStatus>;
    /**
     *
     * Replace Project Status
     * @param id
     * @param projectStatus
     */
    projectStatusesIdPut(params: {
        id: number;
        projectStatus: ProjectStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectStatus>;
    /**
     *
     * Create Project Status
     * @param projectStatus
     */
    projectStatusesPost(params: {
        projectStatus: ProjectStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectStatus>;
}
export class ProjectTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Project Type Count
     * @param conditions
     */
    systemProjectTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Project Type
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemProjectTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProjectType>>;
    /**
     *
     * Get Project Type By Id
     * @param id
     */
    systemProjectTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectType>;
}
export class ProjectsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Projects Count
     * @param conditions
     * @param customFieldConditions
     */
    projectProjectsCountGet(params: {
        conditions?: string;
        customFieldConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Projects
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    projectProjectsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Project>>;
    /**
     *
     * Delete Project By Id
     * @param id
     */
    projectProjectsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Project By Id
     * @param id
     */
    projectProjectsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Project>;
    /**
     *
     * Update Project
     * @param id
     * @param operations
     */
    projectProjectsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Project>;
    /**
     *
     * Replace Project
     * @param id
     * @param project
     */
    projectProjectsIdPut(params: {
        id: number;
        project: Project;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Project>;
    /**
     *
     * Create Project
     * @param project
     */
    projectProjectsPost(params: {
        project: Project;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Project>;
}
export class ProjectsTeammembersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Team Members Count
     * @param id
     * @param conditions
     */
    projectProjectsIdTeamMembersCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Team Members
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    projectProjectsIdTeamMembersGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProjectTeammember>>;
    /**
     *
     * Create Team Member
     * @param id
     * @param teamMember
     */
    projectProjectsIdTeamMembersPost(params: {
        id: number;
        teamMember: ProjectTeammember;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectTeammember>;
    /**
     *
     * Delete Team Member By Id
     * @param id
     * @param teamMemberId
     */
    projectProjectsIdTeamMembersTeamMemberIdDelete(params: {
        id: number;
        teamMemberId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Team Member By Id
     * @param id
     * @param teamMemberId
     */
    projectProjectsIdTeamMembersTeamMemberIdGet(params: {
        id: number;
        teamMemberId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectTeammember>;
    /**
     *
     * Update Team Member
     * @param id
     * @param teamMemberId
     * @param operations
     */
    projectProjectsIdTeamMembersTeamMemberIdPatch(params: {
        id: number;
        teamMemberId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectTeammember>;
    /**
     *
     * Replace Team Member
     * @param id
     * @param teamMemberId
     * @param teamMember
     */
    projectProjectsIdTeamMembersTeamMemberIdPut(params: {
        id: number;
        teamMemberId: number;
        teamMember: ProjectTeammember;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectTeammember>;
}
export class PurchaseOrderLineItemsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Purchase Order Line Items Count
     * @param id
     * @param conditions
     */
    procurementPurchaseordersIdLineitemsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Purchase Order Line Items
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementPurchaseordersIdLineitemsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PurchaseOrderLineItem>>;
    /**
     *
     * Delete Purchase Order Line Item By Id
     * @param id
     * @param lineItemId
     */
    procurementPurchaseordersIdLineitemsLineItemIdDelete(params: {
        id: number;
        lineItemId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Purchase Order Line Item By Id
     * @param id
     * @param lineItemId
     */
    procurementPurchaseordersIdLineitemsLineItemIdGet(params: {
        id: number;
        lineItemId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderLineItem>;
    /**
     *
     * Update Purchase Order Line Item
     * @param id
     * @param lineItemId
     * @param operations
     */
    procurementPurchaseordersIdLineitemsLineItemIdPatch(params: {
        id: number;
        lineItemId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderLineItem>;
    /**
     *
     * Replace Purchase Order Line Item
     * @param id
     * @param lineItemId
     * @param purchaseOrderLineItem
     */
    procurementPurchaseordersIdLineitemsLineItemIdPut(params: {
        id: number;
        lineItemId: number;
        purchaseOrderLineItem: PurchaseOrderLineItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderLineItem>;
    /**
     *
     * Create Purchase Order Line Item
     * @param id
     * @param purchaseOrderLineItem
     */
    procurementPurchaseordersIdLineitemsPost(params: {
        id: number;
        purchaseOrderLineItem: PurchaseOrderLineItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderLineItem>;
}
export class PurchaseOrderStatusEmailTemplatesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Purchase Order Status Email Templates Count
     * @param id
     * @param conditions
     */
    procurementPurchaseorderstatusesIdEmailtemplatesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Purchase Order Status Email Template By Id
     * @param id
     * @param emailTemplateId
     */
    procurementPurchaseorderstatusesIdEmailtemplatesEmailTemplateIdDelete(params: {
        id: number;
        emailTemplateId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Purchase Order Status Email Template By Id
     * @param id
     * @param emailTemplateId
     */
    procurementPurchaseorderstatusesIdEmailtemplatesEmailTemplateIdGet(params: {
        id: number;
        emailTemplateId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderStatusEmailTemplate>;
    /**
     *
     * Update Purchase Order Status Email Template
     * @param id
     * @param emailTemplateId
     * @param operations
     */
    procurementPurchaseorderstatusesIdEmailtemplatesEmailTemplateIdPatch(params: {
        id: number;
        emailTemplateId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderStatusEmailTemplate>;
    /**
     *
     * Replace Purchase Order Status Email Template
     * @param id
     * @param emailTemplateId
     * @param purchaseOrderStatusEmailTemplate
     */
    procurementPurchaseorderstatusesIdEmailtemplatesEmailTemplateIdPut(params: {
        id: number;
        emailTemplateId: number;
        purchaseOrderStatusEmailTemplate: PurchaseOrderStatusEmailTemplate;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderStatusEmailTemplate>;
    /**
     *
     * Get Purchase Order Status Email Templates
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementPurchaseorderstatusesIdEmailtemplatesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PurchaseOrderStatusEmailTemplate>>;
    /**
     *
     * Create Purchase Order Status Email Template
     * @param id
     * @param purchaseOrderStatusEmailTemplate
     */
    procurementPurchaseorderstatusesIdEmailtemplatesPost(params: {
        id: number;
        purchaseOrderStatusEmailTemplate: PurchaseOrderStatusEmailTemplate;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderStatusEmailTemplate>;
}
export class PurchaseOrderStatusNotificationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Purchase Order Status Notifications Count
     * @param id
     * @param conditions
     */
    procurementPurchaseorderstatusesIdNotificationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Purchase Order Status Notifications
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementPurchaseorderstatusesIdNotificationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PurchaseOrderStatusNotification>>;
    /**
     *
     * Delete Purchase Order Status Notification By Id
     * @param id
     * @param notificationId
     */
    procurementPurchaseorderstatusesIdNotificationsNotificationIdDelete(params: {
        id: number;
        notificationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Purchase Order Status Notification By Id
     * @param id
     * @param notificationId
     */
    procurementPurchaseorderstatusesIdNotificationsNotificationIdGet(params: {
        id: number;
        notificationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderStatusNotification>;
    /**
     *
     * Update Purchase Order Status Notification
     * @param id
     * @param notificationId
     * @param operations
     */
    procurementPurchaseorderstatusesIdNotificationsNotificationIdPatch(params: {
        id: number;
        notificationId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderStatusNotification>;
    /**
     *
     * Replace Purchase Order Status Notification
     * @param id
     * @param notificationId
     * @param purchaseOrderStatusNotification
     */
    procurementPurchaseorderstatusesIdNotificationsNotificationIdPut(params: {
        id: number;
        notificationId: number;
        purchaseOrderStatusNotification: PurchaseOrderStatusNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderStatusNotification>;
    /**
     *
     * Create Purchase Order Status Notification
     * @param id
     * @param purchaseOrderStatusNotification
     */
    procurementPurchaseorderstatusesIdNotificationsPost(params: {
        id: number;
        purchaseOrderStatusNotification: PurchaseOrderStatusNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderStatusNotification>;
}
export class PurchaseOrderStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Purchase Orders Statuses Count
     * @param conditions
     */
    procurementPurchaseorderstatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Purchase Order Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementPurchaseorderstatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PurchaseOrderStatus>>;
    /**
     *
     * Delete Purchase Order Status
     * @param id
     */
    procurementPurchaseorderstatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Purchase Order Status By Id
     * @param id
     */
    procurementPurchaseorderstatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderStatus>;
    /**
     *
     * Update Purchase Order Status
     * @param id
     * @param operations
     */
    procurementPurchaseorderstatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderStatus>;
    /**
     *
     * Replace Purchase Order Status
     * @param id
     * @param purchaseOrderStatus
     */
    procurementPurchaseorderstatusesIdPut(params: {
        id: number;
        purchaseOrderStatus: PurchaseOrderStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderStatus>;
    /**
     *
     * Create Purchase Order Status
     * @param poStatus
     */
    procurementPurchaseorderstatusesPost(params: {
        poStatus: PurchaseOrderStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderStatus>;
}
export class PurchaseOrdersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Purchase Orders Count
     * @param conditions
     */
    procurementPurchaseordersCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Purchase Orders
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementPurchaseordersGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PurchaseOrder>>;
    /**
     *
     * Delete Purchase Order By Id
     * @param id
     */
    procurementPurchaseordersIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Purchase Order By Id
     * @param id
     */
    procurementPurchaseordersIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrder>;
    /**
     *
     * Update Purchase Order
     * @param id
     * @param operations
     */
    procurementPurchaseordersIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrder>;
    /**
     *
     * Replace Purchase Order
     * @param id
     * @param purchaseOrder
     */
    procurementPurchaseordersIdPut(params: {
        id: number;
        purchaseOrder: PurchaseOrder;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrder>;
    /**
     *
     * Create Purchase Order
     * @param purchaseOrder
     */
    procurementPurchaseordersPost(params: {
        purchaseOrder: PurchaseOrder;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrder>;
}
export class RMAActionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get R M A Action Count
     * @param conditions
     */
    procurementRmaActionsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get R M A Action
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementRmaActionsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<RMAAction>>;
    /**
     *
     * Delete R M A Action By Id
     * @param id
     */
    procurementRmaActionsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get R M A Action By Id
     * @param id
     */
    procurementRmaActionsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RMAAction>;
    /**
     *
     * Update R M A Action
     * @param id
     * @param operations
     */
    procurementRmaActionsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RMAAction>;
    /**
     *
     * Replace R M A Action
     * @param id
     * @param rmaAction
     */
    procurementRmaActionsIdPut(params: {
        id: number;
        rmaAction: RMAAction;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RMAAction>;
    /**
     *
     * Create R M A Action
     * @param rmaAction
     */
    procurementRmaActionsPost(params: {
        rmaAction: RMAAction;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RMAAction>;
}
export class RMADispositionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get R M A Disposition Count
     * @param conditions
     */
    procurementRMADispositionsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get R M A Disposition
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementRMADispositionsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<RMADisposition>>;
    /**
     *
     * Delete R M A Disposition By Id
     * @param id
     */
    procurementRMADispositionsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get R M A Disposition By Id
     * @param id
     */
    procurementRMADispositionsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RMADisposition>;
    /**
     *
     * Update R M A Disposition
     * @param id
     * @param operations
     */
    procurementRMADispositionsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RMADisposition>;
    /**
     *
     * Replace R M A Disposition
     * @param id
     * @param rmaDisposition
     */
    procurementRMADispositionsIdPut(params: {
        id: number;
        rmaDisposition: RMADisposition;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RMADisposition>;
    /**
     *
     * Create R M A Disposition
     * @param rmaDisposition
     */
    procurementRMADispositionsPost(params: {
        rmaDisposition: RMADisposition;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RMADisposition>;
}
export class ReportCardDetailsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Report Card Detail Count
     * @param id
     * @param conditions
     */
    systemReportCardsIdDetailsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Report Card Detail By Id
     * @param id
     * @param detailId
     */
    systemReportCardsIdDetailsDetailIdDelete(params: {
        id: number;
        detailId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Report Card Detail By Id
     * @param id
     * @param detailId
     */
    systemReportCardsIdDetailsDetailIdGet(params: {
        id: number;
        detailId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportCardDetail>;
    /**
     *
     * Update Report Card Detail
     * @param id
     * @param detailId
     * @param operations
     */
    systemReportCardsIdDetailsDetailIdPatch(params: {
        id: number;
        detailId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportCardDetail>;
    /**
     *
     * Replace Report Card Detail
     * @param id
     * @param detailId
     * @param reportCardDetail
     */
    systemReportCardsIdDetailsDetailIdPut(params: {
        id: number;
        detailId: number;
        reportCardDetail: ReportCardDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportCardDetail>;
    /**
     *
     * Get Report Card Detail
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemReportCardsIdDetailsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ReportCardDetail>>;
    /**
     *
     * Create Report Card Detail
     * @param id
     * @param reportCardDetail
     */
    systemReportCardsIdDetailsPost(params: {
        id: number;
        reportCardDetail: ReportCardDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportCardDetail>;
}
export class ReportCardsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Report Card Count
     * @param conditions
     */
    systemReportCardsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Report Card
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemReportCardsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ReportCard>>;
    /**
     *
     * Delete Report Card By Id
     * @param id
     */
    systemReportCardsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Report Card By Id
     * @param id
     */
    systemReportCardsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportCard>;
    /**
     *
     * Update Report Card
     * @param id
     * @param operations
     */
    systemReportCardsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportCard>;
    /**
     *
     * Replace Report Card
     * @param id
     * @param reportCard
     */
    systemReportCardsIdPut(params: {
        id: number;
        reportCard: ReportCard;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportCard>;
    /**
     *
     * Create Report Card
     * @param reportCard
     */
    systemReportCardsPost(params: {
        reportCard: ReportCard;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportCard>;
}
export class ReportingServicesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Reporting Services
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMycompanyReportingServicesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ReportingService>>;
    /**
     *
     * Get Reporting Service By Id
     * @param id
     */
    systemMycompanyReportingServicesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportingService>;
    /**
     *
     * Update Reporting Service
     * @param id
     * @param operations
     */
    systemMycompanyReportingServicesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportingService>;
    /**
     *
     * Replace Reporting Service
     * @param id
     * @param service
     */
    systemMycompanyReportingServicesIdPut(params: {
        id: number;
        service: ReportingService;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportingService>;
    /**
     *
     * Test Reporting Service Connection
     * @param id
     */
    systemMycompanyReportingServicesIdTestConnectionPost(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SuccessResponse>;
}
export class ReportsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Reports
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     */
    systemReportsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Report>>;
    /**
     *
     * Get Column Definitions
     * @param reportName
     */
    systemReportsReportNameColumnsGet(params: {
        reportName: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<JObject>>;
    /**
     *
     * Get Report Results Count
     * @param reportName
     * @param conditions
     */
    systemReportsReportNameCountGet(params: {
        reportName: string;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Report Results
     * @param reportName
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     * @param columns
     */
    systemReportsReportNameGet(params: {
        reportName: string;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
        columns?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportDataResponse>;
}
export class RmaStatusEmailTemplatesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Rma Status Email Templates
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementRmaStatusesIdEmailTemplatesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<RmaStatusEmailTemplate>>;
    /**
     *
     * Get Rma Status Email Templates Count
     * @param id
     * @param conditions
     */
    procurementRmaStatusesIdEmailtemplatesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Rma Status Email Template By Id
     * @param id
     * @param emailTemplateId
     */
    procurementRmaStatusesIdEmailtemplatesEmailTemplateIdDelete(params: {
        id: number;
        emailTemplateId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Rma Status Email Template By Id
     * @param id
     * @param emailTemplateId
     */
    procurementRmaStatusesIdEmailtemplatesEmailTemplateIdGet(params: {
        id: number;
        emailTemplateId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RmaStatusEmailTemplate>;
    /**
     *
     * Update Rma Status Email Template
     * @param id
     * @param emailTemplateId
     * @param operations
     */
    procurementRmaStatusesIdEmailtemplatesEmailTemplateIdPatch(params: {
        id: number;
        emailTemplateId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RmaStatusEmailTemplate>;
    /**
     *
     * Replace Rma Status Email Template
     * @param id
     * @param emailTemplateId
     * @param rmaStatusEmailTemplate
     */
    procurementRmaStatusesIdEmailtemplatesEmailTemplateIdPut(params: {
        id: number;
        emailTemplateId: number;
        rmaStatusEmailTemplate: RmaStatusEmailTemplate;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RmaStatusEmailTemplate>;
    /**
     *
     * Create Rma Status Email Template
     * @param id
     * @param rmaStatusEmailTemplate
     */
    procurementRmaStatusesIdEmailtemplatesPost(params: {
        id: number;
        rmaStatusEmailTemplate: RmaStatusEmailTemplate;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RmaStatusEmailTemplate>;
}
export class RmaStatusNotificationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Rma Status Notifications Count
     * @param id
     * @param conditions
     */
    procurementRmaStatusesIdNotificationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Rma Status Notifications
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementRmaStatusesIdNotificationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<RmaStatusNotification>>;
    /**
     *
     * Delete Rma Status Notification By Id
     * @param id
     * @param notificationId
     */
    procurementRmaStatusesIdNotificationsNotificationIdDelete(params: {
        id: number;
        notificationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Rma Status Notification By Id
     * @param id
     * @param notificationId
     */
    procurementRmaStatusesIdNotificationsNotificationIdGet(params: {
        id: number;
        notificationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RmaStatusNotification>;
    /**
     *
     * Update Rma Status Notification
     * @param id
     * @param notificationId
     * @param operations
     */
    procurementRmaStatusesIdNotificationsNotificationIdPatch(params: {
        id: number;
        notificationId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RmaStatusNotification>;
    /**
     *
     * Replace Rma Status Notification
     * @param id
     * @param notificationId
     * @param rmaStatusNotification
     */
    procurementRmaStatusesIdNotificationsNotificationIdPut(params: {
        id: number;
        notificationId: number;
        rmaStatusNotification: RmaStatusNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RmaStatusNotification>;
    /**
     *
     * Create Rma Status Notification
     * @param id
     * @param rmaStatusNotification
     */
    procurementRmaStatusesIdNotificationsPost(params: {
        id: number;
        rmaStatusNotification: RmaStatusNotification;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RmaStatusNotification>;
}
export class RmaStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Rma Statuses Count
     * @param conditions
     */
    procurementRmaStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Rma Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementRmaStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<RmaStatus>>;
    /**
     *
     * Delete Rma Status By Id
     * @param id
     */
    procurementRmaStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Rma Status By Id
     * @param id
     */
    procurementRmaStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RmaStatus>;
    /**
     *
     * Update Rma Status
     * @param id
     * @param operations
     */
    procurementRmaStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RmaStatus>;
    /**
     *
     * Replace Rma Status
     * @param id
     * @param rmaStatus
     */
    procurementRmaStatusesIdPut(params: {
        id: number;
        rmaStatus: RmaStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RmaStatus>;
    /**
     *
     * Create Rma Status
     * @param rmaStatus
     */
    procurementRmaStatusesPost(params: {
        rmaStatus: RmaStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<RmaStatus>;
}
export class RolesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Role Count
     * @param conditions
     */
    salesRolesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Role
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesRolesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Role>>;
    /**
     *
     * Delete Role By Id
     * @param id
     */
    salesRolesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Role By Id
     * @param id
     */
    salesRolesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Role>;
    /**
     *
     * Update Role
     * @param id
     * @param operations
     */
    salesRolesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Role>;
    /**
     *
     * Replace Role
     * @param id
     * @param role
     */
    salesRolesIdPut(params: {
        id: number;
        role: Role;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Role>;
    /**
     *
     * Create Role
     * @param role
     */
    salesRolesPost(params: {
        role: Role;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Role>;
}
export class SLAPrioritiesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get S L A Priority Count
     * @param id
     * @param conditions
     */
    serviceSLAsIdPrioritiesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get S L A Priority
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceSLAsIdPrioritiesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SLAPriority>>;
    /**
     *
     * Create S L A Priority
     * @param id
     * @param slaPriority
     */
    serviceSLAsIdPrioritiesPost(params: {
        id: number;
        slaPriority: SLAPriority;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SLAPriority>;
    /**
     *
     * Delete S L A Priority By Id
     * @param id
     * @param priorityId
     */
    serviceSLAsIdPrioritiesPriorityIdDelete(params: {
        id: number;
        priorityId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get S L A Priority By Id
     * @param id
     * @param priorityId
     */
    serviceSLAsIdPrioritiesPriorityIdGet(params: {
        id: number;
        priorityId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SLAPriority>;
    /**
     *
     * Update S L A Priority
     * @param id
     * @param priorityId
     * @param operations
     */
    serviceSLAsIdPrioritiesPriorityIdPatch(params: {
        id: number;
        priorityId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SLAPriority>;
    /**
     *
     * Replace S L A Priority
     * @param id
     * @param priorityId
     * @param slaPriority
     */
    serviceSLAsIdPrioritiesPriorityIdPut(params: {
        id: number;
        priorityId: number;
        slaPriority: SLAPriority;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SLAPriority>;
}
export class SLAsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get S L A Count
     * @param conditions
     */
    serviceSLAsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get S L A
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceSLAsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SLA>>;
    /**
     *
     * Delete S L A By Id
     * @param id
     */
    serviceSLAsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get S L A By Id
     * @param id
     */
    serviceSLAsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SLA>;
    /**
     *
     * Update S L A
     * @param id
     * @param operations
     */
    serviceSLAsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SLA>;
    /**
     *
     * Replace S L A
     * @param id
     * @param sLA
     */
    serviceSLAsIdPut(params: {
        id: number;
        sLA: SLA;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SLA>;
    /**
     *
     * Create S L A
     * @param sLA
     */
    serviceSLAsPost(params: {
        sLA: SLA;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SLA>;
}
export class SalesProbabilitiesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Probabilities Count
     * @param conditions
     */
    salesProbabilitiesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Probabilities
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesProbabilitiesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SalesProbability>>;
    /**
     *
     * Delete Probability By Id
     * @param id
     */
    salesProbabilitiesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Probability By Id
     * @param id
     */
    salesProbabilitiesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesProbability>;
    /**
     *
     * Update Probability
     * @param id
     * @param operations
     */
    salesProbabilitiesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesProbability>;
    /**
     *
     * Replace Probability
     * @param id
     * @param probability
     */
    salesProbabilitiesIdPut(params: {
        id: number;
        probability: SalesProbability;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesProbability>;
    /**
     *
     * Create Probability
     * @param probability
     */
    salesProbabilitiesPost(params: {
        probability: SalesProbability;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesProbability>;
}
export class SalesQuotasApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Sales Quota Count
     * @param conditions
     */
    salesQuotasCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Sales Quota
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    salesQuotasGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SalesQuota>>;
    /**
     *
     * Delete Sales Quota By Id
     * @param id
     */
    salesQuotasIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Sales Quota By Id
     * @param id
     */
    salesQuotasIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesQuota>;
    /**
     *
     * Update Sales Quota
     * @param id
     * @param operations
     */
    salesQuotasIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesQuota>;
    /**
     *
     * Replace Sales Quota
     * @param id
     * @param salesQuota
     */
    salesQuotasIdPut(params: {
        id: number;
        salesQuota: SalesQuota;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesQuota>;
    /**
     *
     * Create Sales Quota
     * @param salesQuota
     */
    salesQuotasPost(params: {
        salesQuota: SalesQuota;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesQuota>;
}
export class SalesTeamMembersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Sales Team Members Count
     * @param id
     * @param conditions
     */
    systemSalesTeamsIdMembersCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Sales Team Members
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemSalesTeamsIdMembersGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SalesTeamMember>>;
    /**
     *
     * Create Sales Team Member
     * @param id
     * @param salesTeamMember
     */
    systemSalesTeamsIdMembersPost(params: {
        id: number;
        salesTeamMember: SalesTeamMember;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesTeamMember>;
    /**
     *
     * Delete Sales Team Member By Id
     * @param id
     * @param salesTeamMemberId
     */
    systemSalesTeamsIdMembersSalesTeamMemberIdDelete(params: {
        id: number;
        salesTeamMemberId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Sales Team Member By Id
     * @param id
     * @param salesTeamMemberId
     */
    systemSalesTeamsIdMembersSalesTeamMemberIdGet(params: {
        id: number;
        salesTeamMemberId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesTeamMember>;
    /**
     *
     * Update Sales Team Member
     * @param id
     * @param salesTeamMemberId
     * @param operations
     */
    systemSalesTeamsIdMembersSalesTeamMemberIdPatch(params: {
        id: number;
        salesTeamMemberId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesTeamMember>;
    /**
     *
     * Replace Sales Team Member
     * @param id
     * @param salesTeamMemberId
     * @param salesTeamMember
     */
    systemSalesTeamsIdMembersSalesTeamMemberIdPut(params: {
        id: number;
        salesTeamMemberId: number;
        salesTeamMember: SalesTeamMember;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesTeamMember>;
}
export class SalesTeamsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Sales Teams Count
     * @param conditions
     */
    systemSalesTeamsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Sales Teams
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemSalesTeamsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SalesTeam>>;
    /**
     *
     * Delete Sales Team By Id
     * @param id
     */
    systemSalesTeamsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Sales Team By Id
     * @param id
     */
    systemSalesTeamsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesTeam>;
    /**
     *
     * Update Sales Team
     * @param id
     * @param operations
     */
    systemSalesTeamsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesTeam>;
    /**
     *
     * Replace Sales Team
     * @param id
     * @param salesTeam
     */
    systemSalesTeamsIdPut(params: {
        id: number;
        salesTeam: SalesTeam;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesTeam>;
    /**
     *
     * Create Sales Team
     * @param salesTeam
     */
    systemSalesTeamsPost(params: {
        salesTeam: SalesTeam;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SalesTeam>;
}
export class ScheduleColorsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Schedule Colors Count
     * @param conditions
     */
    scheduleColorsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Schedule Colors
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    scheduleColorsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleColor>>;
    /**
     *
     * Clear Schedule Color
     * @param id
     */
    scheduleColorsIdClearPost(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleColor>;
    /**
     *
     * Get Schedule Color By Id
     * @param id
     */
    scheduleColorsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleColor>;
    /**
     *
     * Update Schedule Color
     * @param id
     * @param operations
     */
    scheduleColorsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleColor>;
    /**
     *
     * Replace Schedule Color
     * @param id
     * @param scheduleColor
     */
    scheduleColorsIdPut(params: {
        id: number;
        scheduleColor: ScheduleColor;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleColor>;
    /**
     *
     * Reset Schedule Colors
     */
    scheduleColorsResetPost(params: {}, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleColor>>;
}
export class ScheduleDetailsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Schedule Detail Count
     * @param id
     * @param conditions
     */
    scheduleEntriesIdDetailsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Schedule Detail By Id
     * @param id
     * @param detailId
     */
    scheduleEntriesIdDetailsDetailIdGet(params: {
        id: number;
        detailId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleDetail>;
    /**
     *
     * Get Schedule Detail
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    scheduleEntriesIdDetailsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleDetail>>;
}
export class ScheduleEntriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Schedules Count
     * @param conditions
     */
    scheduleEntriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Schedules
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    scheduleEntriesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleEntry>>;
    /**
     *
     * Delete Schedule By Id
     * @param id
     */
    scheduleEntriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Schedule By Id
     * @param id
     */
    scheduleEntriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleEntry>;
    /**
     *
     * Update Schedule
     * @param id
     * @param operations
     */
    scheduleEntriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleEntry>;
    /**
     *
     * Replace Schedule
     * @param id
     * @param scheduleEntry
     */
    scheduleEntriesIdPut(params: {
        id: number;
        scheduleEntry: ScheduleEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleEntry>;
    /**
     *
     * Create Schedule
     * @param scheduleEntry
     */
    scheduleEntriesPost(params: {
        scheduleEntry: ScheduleEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleEntry>;
}
export class ScheduleReminderTimesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Reminder Time Count
     * @param conditions
     */
    scheduleReminderTimesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Reminder Time
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    scheduleReminderTimesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleReminderTime>>;
    /**
     *
     * Get Reminder Time By Id
     * @param id
     */
    scheduleReminderTimesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleReminderTime>;
    /**
     *
     * Update Reminder Time
     * @param id
     * @param operations
     */
    scheduleReminderTimesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleReminderTime>;
    /**
     *
     * Replace Reminder Time
     * @param id
     * @param reminderTime
     */
    scheduleReminderTimesIdPut(params: {
        id: number;
        reminderTime: ScheduleReminderTime;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleReminderTime>;
}
export class ScheduleStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Schedule Statuses Count
     * @param conditions
     */
    scheduleStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Schedule Statuses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    scheduleStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleStatus>>;
    /**
     *
     * Delete Schedule Status By Id
     * @param id
     */
    scheduleStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Schedule Status By Id
     * @param id
     */
    scheduleStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleStatus>;
    /**
     *
     * Update Schedule Status
     * @param id
     * @param operations
     */
    scheduleStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleStatus>;
    /**
     *
     * Replace Schedule Status
     * @param id
     * @param scheduleStatus
     */
    scheduleStatusesIdPut(params: {
        id: number;
        scheduleStatus: ScheduleStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleStatus>;
    /**
     *
     * Create Schedule Status
     * @param scheduleStatus
     */
    scheduleStatusesPost(params: {
        scheduleStatus: ScheduleStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleStatus>;
}
export class ScheduleStopwatchesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Schedule Stopwatches Count
     * @param conditions
     */
    timeSchedulestopwatchesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Schedule Stopwatches
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeSchedulestopwatchesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleStopwatch>>;
    /**
     *
     * Delete Schedule Stopwatch By Id
     * @param id
     */
    timeSchedulestopwatchesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Schedule Stopwatch By Id
     * @param id
     */
    timeSchedulestopwatchesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleStopwatch>;
    /**
     *
     * Update Schedule Stopwatch
     * @param id
     * @param operations
     */
    timeSchedulestopwatchesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleStopwatch>;
    /**
     *
     * Replace Schedule Stopwatch
     * @param id
     * @param scheduleStopwatch
     */
    timeSchedulestopwatchesIdPut(params: {
        id: number;
        scheduleStopwatch: ScheduleStopwatch;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleStopwatch>;
    /**
     *
     * Create Schedule Stopwatch
     * @param scheduleStopwatch
     */
    timeSchedulestopwatchesPost(params: {
        scheduleStopwatch: ScheduleStopwatch;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleStopwatch>;
}
export class ScheduleTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Schedule Types Count
     * @param conditions
     */
    scheduleTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Schedule Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    scheduleTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleType>>;
    /**
     *
     * Delete Schedule Type By Id
     * @param id
     */
    scheduleTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Schedule Type By Id
     * @param id
     */
    scheduleTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleType>;
    /**
     *
     * Update Schedule Type
     * @param id
     * @param operations
     */
    scheduleTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleType>;
    /**
     *
     * Replace Schedule Type
     * @param id
     * @param scheduleType
     */
    scheduleTypesIdPut(params: {
        id: number;
        scheduleType: ScheduleType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleType>;
    /**
     *
     * Create Schedule Type
     * @param scheduleType
     */
    scheduleTypesPost(params: {
        scheduleType: ScheduleType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleType>;
}
export class SecurityRoleSettingsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Security Role Settings Count
     * @param id
     * @param conditions
     */
    systemSecurityRolesIdSettingsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Security Role Settings
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemSecurityRolesIdSettingsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SecurityRoleSetting>>;
    /**
     *
     * Get Security Role Setting By Id
     * @param id
     * @param settingsId
     */
    systemSecurityRolesIdSettingsSettingsIdGet(params: {
        id: number;
        settingsId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SecurityRoleSetting>;
}
export class SecurityRolesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Security Role Count
     * @param conditions
     */
    systemSecurityrolesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Security Role
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemSecurityrolesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SecurityRole>>;
    /**
     *
     * Delete Security Role By Id
     * @param id
     */
    systemSecurityrolesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Security Role By Id
     * @param id
     */
    systemSecurityrolesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SecurityRole>;
    /**
     *
     * Create Security Role
     * @param securityRole
     */
    systemSecurityrolesPost(params: {
        securityRole: SecurityRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SecurityRole>;
}
export class ServiceEmailTemplatesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Email Templates Count
     * @param conditions
     */
    serviceEmailTemplatesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Email Templates
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceEmailTemplatesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ServiceEmailTemplate>>;
    /**
     *
     * Delete Email Template By Id
     * @param id
     */
    serviceEmailTemplatesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Email Template By Id
     * @param id
     */
    serviceEmailTemplatesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceEmailTemplate>;
    /**
     *
     * Update Email Template
     * @param id
     * @param operations
     */
    serviceEmailTemplatesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceEmailTemplate>;
    /**
     *
     * Replace Email Template
     * @param id
     * @param serviceEmailTemplate
     */
    serviceEmailTemplatesIdPut(params: {
        id: number;
        serviceEmailTemplate: ServiceEmailTemplate;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceEmailTemplate>;
    /**
     *
     * Create Email Template
     * @param serviceEmailTemplate
     */
    serviceEmailTemplatesPost(params: {
        serviceEmailTemplate: ServiceEmailTemplate;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceEmailTemplate>;
}
export class ServiceLocationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Create Locations Count
     * @param conditions
     */
    serviceLocationsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Locations
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceLocationsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ServiceLocation>>;
    /**
     *
     * Delete Location By Id
     * @param id
     */
    serviceLocationsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Location By Id
     * @param id
     */
    serviceLocationsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceLocation>;
    /**
     *
     * Update Location
     * @param id
     * @param operations
     */
    serviceLocationsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceLocation>;
    /**
     *
     * Replace Location
     * @param id
     * @param location
     */
    serviceLocationsIdPut(params: {
        id: number;
        location: ServiceLocation;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceLocation>;
    /**
     *
     * Create Location
     * @param location
     */
    serviceLocationsPost(params: {
        location: ServiceLocation;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceLocation>;
}
export class ServiceSignoffsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Service Signoffs Count
     * @param conditions
     */
    serviceServiceSignoffCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Service Signoffs
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceServiceSignoffGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ServiceSignoff>>;
    /**
     *
     * Delete Service Signoff By Id
     * @param id
     */
    serviceServiceSignoffIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Service Signoff By Id
     * @param id
     */
    serviceServiceSignoffIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceSignoff>;
    /**
     *
     * Update Service Signoff
     * @param id
     * @param operations
     */
    serviceServiceSignoffIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceSignoff>;
    /**
     *
     * Replace Service Signoff
     * @param id
     * @param serviceSignoff
     */
    serviceServiceSignoffIdPut(params: {
        id: number;
        serviceSignoff: ServiceSignoff;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceSignoff>;
    /**
     *
     * Create Service Signoff
     * @param serviceSignoff
     */
    serviceServiceSignoffPost(params: {
        serviceSignoff: ServiceSignoff;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceSignoff>;
}
export class ServiceSurveyQuestionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Survey Questions Count
     * @param id
     * @param conditions
     */
    serviceSurveysIdQuestionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Survey Questions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceSurveysIdQuestionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ServiceSurveyQuestion>>;
    /**
     *
     * Create Survey Question
     * @param id
     * @param serviceSurveyQuestion
     */
    serviceSurveysIdQuestionsPost(params: {
        id: number;
        serviceSurveyQuestion: ServiceSurveyQuestion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceSurveyQuestion>;
    /**
     *
     * Delete Survey Question By Id
     * @param id
     * @param questionId
     */
    serviceSurveysIdQuestionsQuestionIdDelete(params: {
        id: number;
        questionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Survey Question By Id
     * @param id
     * @param questionId
     */
    serviceSurveysIdQuestionsQuestionIdGet(params: {
        id: number;
        questionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceSurveyQuestion>;
    /**
     *
     * Update Survey Question
     * @param id
     * @param questionId
     * @param operations
     */
    serviceSurveysIdQuestionsQuestionIdPatch(params: {
        id: number;
        questionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceSurveyQuestion>;
    /**
     *
     * Replace Survey Question
     * @param id
     * @param questionId
     * @param serviceSurveyQuestion
     */
    serviceSurveysIdQuestionsQuestionIdPut(params: {
        id: number;
        questionId: number;
        serviceSurveyQuestion: ServiceSurveyQuestion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceSurveyQuestion>;
}
export class ServiceSurveysApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Surveys Count
     * @param conditions
     */
    serviceSurveysCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Surveys
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceSurveysGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ServiceSurvey>>;
    /**
     *
     * Delete Survey By Id
     * @param id
     */
    serviceSurveysIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Survey By Id
     * @param id
     */
    serviceSurveysIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceSurvey>;
    /**
     *
     * Update Survey
     * @param id
     * @param operations
     */
    serviceSurveysIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceSurvey>;
    /**
     *
     * Replace Survey
     * @param id
     * @param survey
     */
    serviceSurveysIdPut(params: {
        id: number;
        survey: ServiceSurvey;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceSurvey>;
    /**
     *
     * Create Survey
     * @param survey
     */
    serviceSurveysPost(params: {
        survey: ServiceSurvey;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceSurvey>;
}
export class ServiceTeamsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Service Teams Count
     * @param conditions
     */
    serviceTeamsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Service Teams
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceTeamsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ServiceTeam>>;
    /**
     *
     * Get Service Team By Id
     * @param id
     */
    serviceTeamsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceTeam>;
}
export class ServiceTemplatesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Templates Count
     * @param conditions
     */
    serviceTemplatesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Templates
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceTemplatesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ServiceTemplate>>;
    /**
     *
     * Get Template By Id
     * @param id
     */
    serviceTemplatesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceTemplate>;
}
export class ServicesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Services
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMycompanyServicesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Service>>;
    /**
     *
     * Get Service By Id
     * @param id
     */
    systemMycompanyServicesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Service>;
    /**
     *
     * Update Service
     * @param id
     * @param operations
     */
    systemMycompanyServicesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Service>;
    /**
     *
     * Replace Service
     * @param id
     * @param service
     */
    systemMycompanyServicesIdPut(params: {
        id: number;
        service: Service;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Service>;
}
export class SetupScreensApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Setup Screens Count
     * @param conditions
     */
    systemSetupScreensCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Setup Screens
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemSetupScreensGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SetupScreen>>;
    /**
     *
     * Get Setup Screen By Id
     * @param id
     */
    systemSetupScreensIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SetupScreen>;
}
export class SeveritiesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Severities Count
     * @param conditions
     */
    serviceSeveritiesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Severities
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceSeveritiesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Severity>>;
    /**
     *
     * Get Severity By Id
     * @param id
     */
    serviceSeveritiesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Severity>;
    /**
     *
     * Update Severity
     * @param id
     * @param operations
     */
    serviceSeveritiesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Severity>;
    /**
     *
     * Replace Severity
     * @param id
     * @param severity
     */
    serviceSeveritiesIdPut(params: {
        id: number;
        severity: Severity;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Severity>;
}
export class ShipmentMethodsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Shipment Methods Count
     * @param conditions
     */
    procurementShipmentmethodsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Shipment Methods
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementShipmentmethodsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ShipmentMethod>>;
    /**
     *
     * Delete Shipment Method By Id
     * @param id
     */
    procurementShipmentmethodsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Shipment Method By Id
     * @param id
     */
    procurementShipmentmethodsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ShipmentMethod>;
    /**
     *
     * Update Shipment Method
     * @param id
     * @param operations
     */
    procurementShipmentmethodsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ShipmentMethod>;
    /**
     *
     * Replace Shipment Method
     * @param id
     * @param shipmentMethod
     */
    procurementShipmentmethodsIdPut(params: {
        id: number;
        shipmentMethod: ShipmentMethod;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ShipmentMethod>;
    /**
     *
     * Create Shipment Method
     * @param shipmentMethod
     */
    procurementShipmentmethodsPost(params: {
        shipmentMethod: ShipmentMethod;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ShipmentMethod>;
}
export class SkillCategoriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Skill Categories Count
     * @param conditions
     */
    systemSkillCategoriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Skill Categories
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemSkillCategoriesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SkillCategory>>;
    /**
     *
     * Delete Skill Category By Id
     * @param id
     */
    systemSkillCategoriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Skill Category By Id
     * @param id
     */
    systemSkillCategoriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SkillCategory>;
    /**
     *
     * Update Skill Category
     * @param id
     * @param operations
     */
    systemSkillCategoriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SkillCategory>;
    /**
     *
     * Replace Skill Category
     * @param id
     * @param skillCategory
     */
    systemSkillCategoriesIdPut(params: {
        id: number;
        skillCategory: SkillCategory;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SkillCategory>;
    /**
     *
     * Create Skill Category
     * @param skillCategory
     */
    systemSkillCategoriesPost(params: {
        skillCategory: SkillCategory;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SkillCategory>;
}
export class SkillsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Skill Count
     * @param conditions
     */
    systemSkillsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Skill
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemSkillsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Skill>>;
    /**
     *
     * Delete Skill By Id
     * @param id
     */
    systemSkillsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Skill By Id
     * @param id
     */
    systemSkillsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Skill>;
    /**
     *
     * Update Skill
     * @param id
     * @param operations
     */
    systemSkillsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Skill>;
    /**
     *
     * Replace Skill
     * @param id
     * @param skill
     */
    systemSkillsIdPut(params: {
        id: number;
        skill: Skill;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Skill>;
    /**
     *
     * Create Skill
     * @param skill
     */
    systemSkillsPost(params: {
        skill: Skill;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Skill>;
}
export class SourcesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Create Sources Count
     * @param conditions
     */
    serviceSourcesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Sources
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceSourcesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Source>>;
    /**
     *
     * Delete Source By Id
     * @param id
     */
    serviceSourcesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Source By Id
     * @param id
     */
    serviceSourcesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Source>;
    /**
     *
     * Update Source
     * @param id
     * @param operations
     */
    serviceSourcesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Source>;
    /**
     *
     * Replace Source
     * @param id
     * @param source
     */
    serviceSourcesIdPut(params: {
        id: number;
        source: Source;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Source>;
    /**
     *
     * Create Source
     * @param source
     */
    serviceSourcesPost(params: {
        source: Source;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Source>;
}
export class StatesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get States Count
     * @param conditions
     */
    systemStatesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get States
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemStatesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<State>>;
    /**
     *
     * Get State By Id
     * @param id
     */
    systemStatesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<State>;
    /**
     *
     * Create State
     * @param billingSetup
     */
    systemStatesPost(params: {
        billingSetup: State;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<State>;
}
export class StatusExternalIntegrationReferencesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Status External Integration References Count
     * @param conditions
     */
    serviceStatusExternalIntegrationReferencesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Status External Integration References
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceStatusExternalIntegrationReferencesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<StatusExternalIntegrationReference>>;
    /**
     *
     * Get External Integration Status By Id
     * @param id
     */
    serviceStatusExternalIntegrationReferencesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<StatusExternalIntegrationReference>;
}
export class SubCategoriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Sub Categories Count
     * @param conditions
     */
    procurementSubcategoriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Sub Categories
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementSubcategoriesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SubCategory>>;
    /**
     *
     * Delete Sub Category By Id
     * @param id
     */
    procurementSubcategoriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Sub Category By Id
     * @param id
     */
    procurementSubcategoriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SubCategory>;
    /**
     *
     * Update Sub Category
     * @param id
     * @param operations
     */
    procurementSubcategoriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SubCategory>;
    /**
     *
     * Replace Sub Category
     * @param id
     * @param subCategory
     */
    procurementSubcategoriesIdPut(params: {
        id: number;
        subCategory: SubCategory;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SubCategory>;
    /**
     *
     * Create Sub Category
     * @param subCategory
     */
    procurementSubcategoriesPost(params: {
        subCategory: SubCategory;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SubCategory>;
}
export class SurveyOptionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Survey Options Count
     * @param surveyID
     * @param questionID
     * @param conditions
     */
    serviceSurveysSurveyIDQuestionsQuestionIDOptionsCountGet(params: {
        surveyID: number;
        questionID: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Survey Options
     * @param surveyID
     * @param questionID
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceSurveysSurveyIDQuestionsQuestionIDOptionsGet(params: {
        surveyID: number;
        questionID: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SurveyOption>>;
    /**
     *
     * Delete Survey Option By Id
     * @param surveyID
     * @param questionID
     * @param oid
     */
    serviceSurveysSurveyIDQuestionsQuestionIDOptionsOidDelete(params: {
        surveyID: number;
        questionID: number;
        oid: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Survey Option By Id
     * @param surveyID
     * @param questionID
     * @param oid
     */
    serviceSurveysSurveyIDQuestionsQuestionIDOptionsOidGet(params: {
        surveyID: number;
        questionID: number;
        oid: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyOption>;
    /**
     *
     * Update Survey Option
     * @param surveyID
     * @param questionID
     * @param oid
     * @param operations
     */
    serviceSurveysSurveyIDQuestionsQuestionIDOptionsOidPatch(params: {
        surveyID: number;
        questionID: number;
        oid: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyOption>;
    /**
     *
     * Replace Survey Option
     * @param surveyID
     * @param questionID
     * @param oid
     * @param surveyOption
     */
    serviceSurveysSurveyIDQuestionsQuestionIDOptionsOidPut(params: {
        surveyID: number;
        questionID: number;
        oid: number;
        surveyOption: SurveyOption;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyOption>;
    /**
     *
     * Create Survey Option
     * @param surveyID
     * @param questionID
     * @param surveyOption
     */
    serviceSurveysSurveyIDQuestionsQuestionIDOptionsPost(params: {
        surveyID: number;
        questionID: number;
        surveyOption: SurveyOption;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyOption>;
}
export class SurveyQuestionValuesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Survey Question Values Count
     * @param surveyQuestionId
     * @param conditions
     */
    systemSurveysIdQuestionsSurveyQuestionIdValuesCountGet(params: {
        surveyQuestionId: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Survey Question Values
     * @param surveyQuestionId
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemSurveysIdQuestionsSurveyQuestionIdValuesGet(params: {
        surveyQuestionId: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SurveyQuestionValue>>;
    /**
     *
     * Create Survey Question Value
     * @param id
     * @param surveyQuestionId
     * @param surveyQuestionValue
     */
    systemSurveysIdQuestionsSurveyQuestionIdValuesPost(params: {
        id: number;
        surveyQuestionId: number;
        surveyQuestionValue: SurveyQuestionValue;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyQuestionValue>;
    /**
     *
     * Delete Survey Question Value By Id
     * @param surveyQuestionId
     * @param surveyQuestionValueId
     */
    systemSurveysIdQuestionsSurveyQuestionIdValuesSurveyQuestionValueIdDelete(params: {
        surveyQuestionId: number;
        surveyQuestionValueId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Survey Question Value By Id
     * @param surveyQuestionId
     * @param surveyQuestionValueId
     */
    systemSurveysIdQuestionsSurveyQuestionIdValuesSurveyQuestionValueIdGet(params: {
        surveyQuestionId: number;
        surveyQuestionValueId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyQuestionValue>;
    /**
     *
     * Update Survey Question Value
     * @param id
     * @param surveyQuestionId
     * @param surveyQuestionValueId
     * @param operations
     */
    systemSurveysIdQuestionsSurveyQuestionIdValuesSurveyQuestionValueIdPatch(params: {
        id: number;
        surveyQuestionId: number;
        surveyQuestionValueId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyQuestionValue>;
    /**
     *
     * Replace Survey Question Value
     * @param id
     * @param surveyQuestionId
     * @param surveyQuestionValueId
     * @param surveyQuestionValue
     */
    systemSurveysIdQuestionsSurveyQuestionIdValuesSurveyQuestionValueIdPut(params: {
        id: number;
        surveyQuestionId: number;
        surveyQuestionValueId: number;
        surveyQuestionValue: SurveyQuestionValue;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyQuestionValue>;
}
export class SurveyQuestionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Survey Questions Count
     * @param id
     * @param conditions
     */
    systemSurveysIdQuestionsGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Create Survey Question
     * @param id
     * @param surveyQuestion
     */
    systemSurveysIdQuestionsPost(params: {
        id: number;
        surveyQuestion: SurveyQuestion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyQuestion>;
    /**
     *
     * Delete Survey Question By Id
     * @param id
     * @param surveyQuestionId
     */
    systemSurveysIdQuestionsSurveyQuestionIdDelete(params: {
        id: number;
        surveyQuestionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Survey Question By Id
     * @param id
     * @param surveyQuestionId
     */
    systemSurveysIdQuestionsSurveyQuestionIdGet(params: {
        id: number;
        surveyQuestionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyQuestion>;
    /**
     *
     * Update Survey Question
     * @param id
     * @param surveyQuestionId
     * @param operations
     */
    systemSurveysIdQuestionsSurveyQuestionIdPatch(params: {
        id: number;
        surveyQuestionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyQuestion>;
    /**
     *
     * Replace Survey Question
     * @param id
     * @param surveyQuestionId
     * @param surveyQuestion
     */
    systemSurveysIdQuestionsSurveyQuestionIdPut(params: {
        id: number;
        surveyQuestionId: number;
        surveyQuestion: SurveyQuestion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyQuestion>;
}
export class SurveyResultsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Survey Results Count
     * @param id
     * @param conditions
     */
    serviceSurveysIdResultsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Survey Results
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceSurveysIdResultsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SurveyResult>>;
    /**
     *
     * Create Survey Result
     * @param id
     * @param surveyResult
     */
    serviceSurveysIdResultsPost(params: {
        id: number;
        surveyResult: SurveyResult;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyResult>;
    /**
     *
     * Delete Survey Result By Id
     * @param id
     * @param resultId
     */
    serviceSurveysIdResultsResultIdDelete(params: {
        id: number;
        resultId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Survey Result By Id
     * @param id
     * @param resultId
     */
    serviceSurveysIdResultsResultIdGet(params: {
        id: number;
        resultId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyResult>;
    /**
     *
     * Update Survey Result
     * @param id
     * @param resultId
     * @param operations
     */
    serviceSurveysIdResultsResultIdPatch(params: {
        id: number;
        resultId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyResult>;
    /**
     *
     * Replace Survey Result
     * @param id
     * @param resultId
     * @param surveyResult
     */
    serviceSurveysIdResultsResultIdPut(params: {
        id: number;
        resultId: number;
        surveyResult: SurveyResult;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyResult>;
}
export class SurveysApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Surveys Count
     * @param conditions
     */
    systemSurveysCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Surveys
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemSurveysGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Survey>>;
    /**
     *
     * Delete Survey By Id
     * @param id
     */
    systemSurveysIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Survey By Id
     * @param id
     */
    systemSurveysIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Survey>;
    /**
     *
     * Update Survey
     * @param id
     * @param operations
     */
    systemSurveysIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Survey>;
    /**
     *
     * Replace Survey
     * @param id
     * @param survey
     */
    systemSurveysIdPut(params: {
        id: number;
        survey: Survey;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Survey>;
    /**
     *
     * Create Survey
     * @param survey
     */
    systemSurveysPost(params: {
        survey: Survey;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Survey>;
}
export class SystemTracksApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Trackses Count
     * @param conditions
     */
    systemTracksCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Trackses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemTracksGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Track>>;
    /**
     *
     * Delete Tracks By Id
     * @param id
     */
    systemTracksIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Tracks By Id
     * @param id
     */
    systemTracksIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Track>;
    /**
     *
     * Update Tracks
     * @param id
     * @param operations
     */
    systemTracksIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Track>;
    /**
     *
     * Replace Tracks
     * @param id
     * @param track
     */
    systemTracksIdPut(params: {
        id: number;
        track: Track;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Track>;
    /**
     *
     * Create Tracks
     * @param track
     */
    systemTracksPost(params: {
        track: Track;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Track>;
}
export class TaxCodeExpenseTypeExemptionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Expense Type Exemption Count
     * @param id
     * @param conditions
     */
    financeTaxCodesIdExpenseTypeExemptionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Expense Type Exemption By Id
     * @param id
     * @param expenseTypeExemptionId
     */
    financeTaxCodesIdExpenseTypeExemptionsExpenseTypeExemptionIdDelete(params: {
        id: number;
        expenseTypeExemptionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Expense Type Exemption By Id
     * @param id
     * @param expenseTypeExemptionId
     */
    financeTaxCodesIdExpenseTypeExemptionsExpenseTypeExemptionIdGet(params: {
        id: number;
        expenseTypeExemptionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseTypeExemption>;
    /**
     *
     * Update Expense Type Exemption
     * @param id
     * @param expenseTypeExemptionId
     * @param operations
     */
    financeTaxCodesIdExpenseTypeExemptionsExpenseTypeExemptionIdPatch(params: {
        id: number;
        expenseTypeExemptionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseTypeExemption>;
    /**
     *
     * Replace Expense Type Exemption
     * @param id
     * @param expenseTypeExemptionId
     * @param expenseTypeExemption
     */
    financeTaxCodesIdExpenseTypeExemptionsExpenseTypeExemptionIdPut(params: {
        id: number;
        expenseTypeExemptionId: number;
        expenseTypeExemption: ExpenseTypeExemption;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseTypeExemption>;
    /**
     *
     * Get Expense Type Exemption
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeTaxCodesIdExpenseTypeExemptionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ExpenseTypeExemption>>;
    /**
     *
     * Create Expense Type Exemption
     * @param id
     * @param expenseTypeExemption
     */
    financeTaxCodesIdExpenseTypeExemptionsPost(params: {
        id: number;
        expenseTypeExemption: ExpenseTypeExemption;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseTypeExemption>;
}
export class TaxCodeProductTypeExemptionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Tax Code Product Type Exemption Count
     * @param id
     * @param conditions
     */
    financeTaxCodesIdProductTypeExemptionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Tax Code Product Type Exemption
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeTaxCodesIdProductTypeExemptionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductTypeExemption>>;
    /**
     *
     * Create Tax Code Product Type Exemption
     * @param id
     * @param productTypeExemption
     */
    financeTaxCodesIdProductTypeExemptionsPost(params: {
        id: number;
        productTypeExemption: ProductTypeExemption;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductTypeExemption>;
    /**
     *
     * Delete Tax Code Product Type Exemption By Id
     * @param id
     * @param productTypeExemptionId
     */
    financeTaxCodesIdProductTypeExemptionsProductTypeExemptionIdDelete(params: {
        id: number;
        productTypeExemptionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Tax Code Product Type Exemption By Id
     * @param id
     * @param productTypeExemptionId
     */
    financeTaxCodesIdProductTypeExemptionsProductTypeExemptionIdGet(params: {
        id: number;
        productTypeExemptionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductTypeExemption>;
    /**
     *
     * Update Tax Code Product Type Exemption
     * @param id
     * @param productTypeExemptionId
     * @param operations
     */
    financeTaxCodesIdProductTypeExemptionsProductTypeExemptionIdPatch(params: {
        id: number;
        productTypeExemptionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductTypeExemption>;
    /**
     *
     * Replace Tax Code Product Type Exemption
     * @param id
     * @param productTypeExemptionId
     * @param productTypeExemption
     */
    financeTaxCodesIdProductTypeExemptionsProductTypeExemptionIdPut(params: {
        id: number;
        productTypeExemptionId: number;
        productTypeExemption: ProductTypeExemption;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductTypeExemption>;
}
export class TaxCodeWorkRoleExemptionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Tax Code Work Role Exemption Count
     * @param id
     * @param conditions
     */
    financeTaxCodesIdWorkRoleExemptionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Tax Code Work Role Exemption
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeTaxCodesIdWorkRoleExemptionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WorkRoleExemption>>;
    /**
     *
     * Create Tax Code Work Role Exemption
     * @param id
     * @param workRoleExemption
     */
    financeTaxCodesIdWorkRoleExemptionsPost(params: {
        id: number;
        workRoleExemption: WorkRoleExemption;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkRoleExemption>;
    /**
     *
     * Delete Tax Code Work Role Exemption By Id
     * @param id
     * @param workRoleExemptionId
     */
    financeTaxCodesIdWorkRoleExemptionsWorkRoleExemptionIdDelete(params: {
        id: number;
        workRoleExemptionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Tax Code Work Role Exemption By Id
     * @param id
     * @param workRoleExemptionId
     */
    financeTaxCodesIdWorkRoleExemptionsWorkRoleExemptionIdGet(params: {
        id: number;
        workRoleExemptionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkRoleExemption>;
    /**
     *
     * Update Tax Code Work Role Exemption
     * @param id
     * @param workRoleExemptionId
     * @param operations
     */
    financeTaxCodesIdWorkRoleExemptionsWorkRoleExemptionIdPatch(params: {
        id: number;
        workRoleExemptionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkRoleExemption>;
    /**
     *
     * Replace Tax Code Work Role Exemption
     * @param id
     * @param workRoleExemptionId
     * @param workRoleExemption
     */
    financeTaxCodesIdWorkRoleExemptionsWorkRoleExemptionIdPut(params: {
        id: number;
        workRoleExemptionId: number;
        workRoleExemption: WorkRoleExemption;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkRoleExemption>;
}
export class TaxCodeXRefsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Tax Code X Ref Count
     * @param id
     * @param conditions
     */
    financeTaxCodesIdTaxCodeXRefsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Tax Code X Ref
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeTaxCodesIdTaxCodeXRefsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TaxCodeXRef>>;
    /**
     *
     * Create Tax Code X Ref
     * @param id
     * @param taxCodeXRef
     */
    financeTaxCodesIdTaxCodeXRefsPost(params: {
        id: number;
        taxCodeXRef: TaxCodeXRef;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TaxCodeXRef>;
    /**
     *
     * Delete Tax Code X Ref By Id
     * @param id
     * @param taxCodeXRefId
     */
    financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdDelete(params: {
        id: number;
        taxCodeXRefId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Tax Code X Ref By Id
     * @param id
     * @param taxCodeXRefId
     */
    financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdGet(params: {
        id: number;
        taxCodeXRefId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TaxCodeXRef>;
    /**
     *
     * Update Tax Code X Ref
     * @param id
     * @param taxCodeXRefId
     * @param operations
     */
    financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPatch(params: {
        id: number;
        taxCodeXRefId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TaxCodeXRef>;
    /**
     *
     * Replace Tax Code X Ref
     * @param id
     * @param taxCodeXRefId
     * @param taxCodeXRef
     */
    financeTaxCodesIdTaxCodeXRefsTaxCodeXRefIdPut(params: {
        id: number;
        taxCodeXRefId: number;
        taxCodeXRef: TaxCodeXRef;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TaxCodeXRef>;
}
export class TaxCodesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Tax Code Count
     * @param conditions
     */
    financeTaxCodesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Tax Code
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    financeTaxCodesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TaxCode>>;
    /**
     *
     * Delete Tax Code By Id
     * @param id
     */
    financeTaxCodesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Tax Code By Id
     * @param id
     */
    financeTaxCodesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TaxCode>;
    /**
     *
     * Update Tax Code
     * @param id
     * @param operations
     */
    financeTaxCodesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TaxCode>;
    /**
     *
     * Replace Tax Code
     * @param id
     * @param taxCode
     */
    financeTaxCodesIdPut(params: {
        id: number;
        taxCode: TaxCode;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TaxCode>;
    /**
     *
     * Create Tax Code
     * @param taxCode
     */
    financeTaxCodesPost(params: {
        taxCode: TaxCode;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TaxCode>;
}
export class TaxIntegrationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Tax Integrations Count
     * @param conditions
     */
    systemTaxIntegrationsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Tax Integrations
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemTaxIntegrationsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TaxIntegration>>;
    /**
     *
     * Get Tax Integration By Id
     * @param id
     */
    systemTaxIntegrationsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TaxIntegration>;
}
export class TeamMembersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Team Members Count
     * @param conditions
     */
    serviceTeamMembersCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Team Members
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceTeamMembersGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TeamMember>>;
    /**
     *
     * Delete Team By Id
     * @param id
     */
    serviceTeamMembersIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Team Member By Id
     * @param id
     */
    serviceTeamMembersIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TeamMember>;
    /**
     *
     * Create Team Member
     * @param teamMember
     */
    serviceTeamMembersPost(params: {
        teamMember: TeamMember;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TeamMember>;
}
export class TeamRolesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Team Role Count
     * @param conditions
     */
    companyTeamRolesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Team Role
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    companyTeamRolesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TeamRole>>;
    /**
     *
     * Delete Team Role By Id
     * @param id
     */
    companyTeamRolesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Team Role By Id
     * @param id
     */
    companyTeamRolesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TeamRole>;
    /**
     *
     * Update Team Role
     * @param id
     * @param operations
     */
    companyTeamRolesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TeamRole>;
    /**
     *
     * Replace Team Role
     * @param id
     * @param teamRole
     */
    companyTeamRolesIdPut(params: {
        id: number;
        teamRole: TeamRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TeamRole>;
    /**
     *
     * Create Team Role
     * @param teamRole
     */
    companyTeamRolesPost(params: {
        teamRole: TeamRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TeamRole>;
}
export class TicketNotesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Service Notes Count
     * @param id
     * @param conditions
     */
    serviceTicketsIdNotesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Service Notes
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceTicketsIdNotesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ServiceNote>>;
    /**
     *
     * Delete Service Note By Id
     * @param id
     * @param noteId
     */
    serviceTicketsIdNotesNoteIdDelete(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Service Note By Id
     * @param id
     * @param noteId
     */
    serviceTicketsIdNotesNoteIdGet(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceNote>;
    /**
     *
     * Update Service Note
     * @param id
     * @param noteId
     * @param operations
     */
    serviceTicketsIdNotesNoteIdPatch(params: {
        id: number;
        noteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceNote>;
    /**
     *
     * Replace Service Note
     * @param id
     * @param noteId
     * @param serviceNote
     */
    serviceTicketsIdNotesNoteIdPut(params: {
        id: number;
        noteId: number;
        serviceNote: ServiceNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceNote>;
    /**
     *
     * Create Service Note
     * @param id
     * @param serviceNote
     */
    serviceTicketsIdNotesPost(params: {
        id: number;
        serviceNote: ServiceNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceNote>;
}
export class TicketStopwatchesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Ticket Stopwatches Count
     * @param conditions
     */
    timeTicketstopwatchesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Ticket Stopwatches
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeTicketstopwatchesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TicketStopwatch>>;
    /**
     *
     * Delete Ticket Stopwatch By Id
     * @param id
     */
    timeTicketstopwatchesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Ticket Stopwatch By Id
     * @param id
     */
    timeTicketstopwatchesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TicketStopwatch>;
    /**
     *
     * Update Ticket Stopwatch
     * @param id
     * @param operations
     */
    timeTicketstopwatchesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TicketStopwatch>;
    /**
     *
     * Replace Ticket Stopwatch
     * @param id
     * @param ticketStopwatch
     */
    timeTicketstopwatchesIdPut(params: {
        id: number;
        ticketStopwatch: TicketStopwatch;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TicketStopwatch>;
    /**
     *
     * Create Ticket Stopwatch
     * @param ticketStopwatch
     */
    timeTicketstopwatchesPost(params: {
        ticketStopwatch: TicketStopwatch;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TicketStopwatch>;
}
export class TicketSyncsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Ticket Syncs Count
     * @param conditions
     */
    systemTicketSyncsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Ticket Syncs
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemTicketSyncsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TicketSync>>;
    /**
     *
     * Delete Ticket Sync By Id
     * @param id
     */
    systemTicketSyncsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Ticket Sync By Id
     * @param id
     */
    systemTicketSyncsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TicketSync>;
    /**
     *
     * Update Ticket Sync
     * @param id
     * @param operations
     */
    systemTicketSyncsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TicketSync>;
    /**
     *
     * Replace Ticket Sync
     * @param id
     * @param ticketSync
     */
    systemTicketSyncsIdPut(params: {
        id: number;
        ticketSync: TicketSync;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TicketSync>;
    /**
     *
     * Create Ticket Sync
     * @param ticketSync
     */
    systemTicketSyncsPost(params: {
        ticketSync: TicketSync;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TicketSync>;
}
export class TicketTasksApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Tasks Count
     * @param id
     * @param conditions
     */
    serviceTicketsIdTasksCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Tasks
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceTicketsIdTasksGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Task>>;
    /**
     *
     * Create Task
     * @param id
     * @param task
     */
    serviceTicketsIdTasksPost(params: {
        id: number;
        task: Task;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Task>;
    /**
     *
     * Delete Task By Id
     * @param id
     * @param taskId
     */
    serviceTicketsIdTasksTaskIdDelete(params: {
        id: number;
        taskId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Task By Id
     * @param id
     * @param taskId
     */
    serviceTicketsIdTasksTaskIdGet(params: {
        id: number;
        taskId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Task>;
    /**
     *
     * Update Task
     * @param id
     * @param taskId
     * @param operations
     */
    serviceTicketsIdTasksTaskIdPatch(params: {
        id: number;
        taskId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Task>;
    /**
     *
     * Replace Task
     * @param id
     * @param taskId
     * @param task
     */
    serviceTicketsIdTasksTaskIdPut(params: {
        id: number;
        taskId: number;
        task: Task;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Task>;
}
export class TicketsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Tickets Count
     * @param conditions
     * @param customFieldConditions
     */
    serviceTicketsCountGet(params: {
        conditions?: string;
        customFieldConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Tickets
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    serviceTicketsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Ticket>>;
    /**
     *
     * Gets count of activities associated to the ticket          /// Please use the /sales/activities/count?conditions&#x3D;ticket/id&#x3D;{id} endpoint
     * @param id
     */
    serviceTicketsIdActivitiesCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Gets activities associated to the ticket          /// Please use the /sales/activities?conditions&#x3D;ticket/id&#x3D;{id} endpoint
     * @param id
     * @param page
     * @param pageSize
     */
    serviceTicketsIdActivitiesGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ActivityReference>>;
    /**
     *
     * Delete Configuration Association
     * @param id
     * @param configId
     */
    serviceTicketsIdConfigurationsConfigIdDelete(params: {
        id: number;
        configId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Configuration Association
     * @param id
     * @param configId
     */
    serviceTicketsIdConfigurationsConfigIdGet(params: {
        id: number;
        configId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationReference>;
    /**
     *
     * Get Ticket Configurations Count
     * @param id
     */
    serviceTicketsIdConfigurationsCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Ticket Configurations
     * @param id
     * @param page
     * @param pageSize
     */
    serviceTicketsIdConfigurationsGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConfigurationReference>>;
    /**
     *
     * Create Configuration Association
     * @param id
     * @param configuration
     */
    serviceTicketsIdConfigurationsPost(params: {
        id: number;
        configuration: ConfigurationReference;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationReference>;
    /**
     *
     * Delete Ticket By Id
     * @param id
     */
    serviceTicketsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Ticket Documents Count
     * @param id
     */
    serviceTicketsIdDocumentsCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Gets the documents associated to the ticket          /// Please use the /system/documents?recordType&#x3D;Ticket&amp;amp;recordId&#x3D;{id} endpoint
     * @param id
     * @param page
     * @param pageSize
     */
    serviceTicketsIdDocumentsGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<DocumentReference>>;
    /**
     *
     * Get Ticket By Id
     * @param id
     */
    serviceTicketsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Ticket>;
    /**
     *
     * Merge Company
     * @param id
     * @param merge
     */
    serviceTicketsIdMergePost(params: {
        id: number;
        merge: TicketMerge;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SuccessResponse>;
    /**
     *
     * Update Ticket
     * @param id
     * @param operations
     */
    serviceTicketsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Ticket>;
    /**
     *
     * Gets the products associated to the ticket          /// Please use the /procurement/products/count?conditions&#x3D;chargeToType&#x3D;&#39;Ticket&#39; AND chargeToId&#x3D;{id} endpoint
     * @param id
     */
    serviceTicketsIdProductsCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Gets the products associated to the ticket          /// Please use the /procurement/products?conditions&#x3D;chargeToType&#x3D;&#39;Ticket&#39; AND chargeToId&#x3D;{id} endpoint
     * @param id
     * @param page
     * @param pageSize
     */
    serviceTicketsIdProductsGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductReference>>;
    /**
     *
     * Replace Ticket
     * @param id
     * @param ticket
     */
    serviceTicketsIdPut(params: {
        id: number;
        ticket: Ticket;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Ticket>;
    /**
     *
     * Gets the schedule entries count associated to the ticket          /// Please use the /schedule/entries/count?conditions&#x3D;type/id&#x3D;4 AND objectId&#x3D;{id} endpoint
     * @param id
     */
    serviceTicketsIdScheduleentriesCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Gets the schedule entries associated to the ticket          /// Please use the /schedule/entries?conditions&#x3D;type/id&#x3D;4 AND objectId&#x3D;{id} endpoint
     * @param id
     * @param page
     * @param pageSize
     */
    serviceTicketsIdScheduleentriesGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleEntryReference>>;
    /**
     *
     * Gets time entries count associated to the ticket          /// Please use the /time/entries/count?conditions&#x3D;(chargeToType&#x3D;&quot;ServiceTicket&quot; OR chargeToType&#x3D;&quot;ProjectTicket&quot;) AND chargeToId&#x3D;{id} endpoint
     * @param id
     */
    serviceTicketsIdTimeentriesCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Gets time entries associated to the ticket          /// Please use the /time/entries?conditions&#x3D;(chargeToType&#x3D;&quot;ServiceTicket&quot; OR chargeToType&#x3D;&quot;ProjectTicket&quot;) AND chargeToId&#x3D;{id} endpoint
     * @param id
     * @param page
     * @param pageSize
     */
    serviceTicketsIdTimeentriesGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TimeEntryReference>>;
    /**
     *
     * Create Ticket
     * @param ticket
     */
    serviceTicketsPost(params: {
        ticket: Ticket;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Ticket>;
    /**
     *
     * Ticket Search
     * @param filterValues
     * @param page
     * @param pageSize
     */
    serviceTicketsSearchPost(params: {
        filterValues: FilterValues;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Ticket>>;
}
export class TimeAccrualDetailsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Time Accrual Detail Count
     * @param id
     * @param conditions
     */
    timeAccrualsIdDetailsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Time Accrual Detail By Id
     * @param id
     * @param detailId
     */
    timeAccrualsIdDetailsDetailIdDelete(params: {
        id: number;
        detailId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Time Accrual Detail By Id
     * @param id
     * @param detailId
     */
    timeAccrualsIdDetailsDetailIdGet(params: {
        id: number;
        detailId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeAccrualDetail>;
    /**
     *
     * Update Time Accrual Detail
     * @param id
     * @param detailId
     * @param operations
     */
    timeAccrualsIdDetailsDetailIdPatch(params: {
        id: number;
        detailId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeAccrualDetail>;
    /**
     *
     * Replace Time Accrual Detail
     * @param id
     * @param detailId
     * @param timeAccrualDetail
     */
    timeAccrualsIdDetailsDetailIdPut(params: {
        id: number;
        detailId: number;
        timeAccrualDetail: TimeAccrualDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeAccrualDetail>;
    /**
     *
     * Get Time Accrual Detail
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeAccrualsIdDetailsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TimeAccrualDetail>>;
    /**
     *
     * Create Time Accrual Detail
     * @param id
     * @param timeAccrualDetail
     */
    timeAccrualsIdDetailsPost(params: {
        id: number;
        timeAccrualDetail: TimeAccrualDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeAccrualDetail>;
}
export class TimeAccrualsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Time Accruals Count
     * @param conditions
     */
    timeAccrualsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Time Accruals
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeAccrualsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TimeAccrual>>;
    /**
     *
     * Delete Time Accrual By Id
     * @param id
     */
    timeAccrualsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Time Accrual By Id
     * @param id
     */
    timeAccrualsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeAccrual>;
    /**
     *
     * Update Time Accrual
     * @param id
     * @param operations
     */
    timeAccrualsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeAccrual>;
    /**
     *
     * Replace Time Accrual
     * @param id
     * @param timeAccrual
     */
    timeAccrualsIdPut(params: {
        id: number;
        timeAccrual: TimeAccrual;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeAccrual>;
    /**
     *
     * Create Time Accrual
     * @param timeAccrual
     */
    timeAccrualsPost(params: {
        timeAccrual: TimeAccrual;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeAccrual>;
}
export class TimeEntriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Time Entries Count
     * @param conditions
     * @param customFieldConditions
     */
    timeEntriesCountGet(params: {
        conditions?: string;
        customFieldConditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Time Entry Defaults
     * @param timeEntry
     */
    timeEntriesDefaultsPost(params: {
        timeEntry: TimeEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeEntry>;
    /**
     *
     * Get Time Entries
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeEntriesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TimeEntry>>;
    /**
     *
     * Delete Time Entry By Id
     * @param id
     */
    timeEntriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Time Entry By Id
     * @param id
     */
    timeEntriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeEntry>;
    /**
     *
     * Update Time Entry
     * @param id
     * @param operations
     */
    timeEntriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeEntry>;
    /**
     *
     * Replace Time Entry
     * @param id
     * @param timeEntry
     */
    timeEntriesIdPut(params: {
        id: number;
        timeEntry: TimeEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeEntry>;
    /**
     *
     * Create Time Entry
     * @param timeEntry
     */
    timeEntriesPost(params: {
        timeEntry: TimeEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeEntry>;
}
export class TimeExpensesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Time Expenses Count
     * @param conditions
     */
    systemMyCompanyTimeExpenseCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Time Expenses
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemMyCompanyTimeExpenseGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TimeExpense>>;
    /**
     *
     * Get Time Expense By Id
     * @param id
     */
    systemMyCompanyTimeExpenseIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeExpense>;
    /**
     *
     * Update Time Expense
     * @param id
     * @param operations
     */
    systemMyCompanyTimeExpenseIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeExpense>;
    /**
     *
     * Replace Time Expense
     * @param id
     * @param timeExpense
     */
    systemMyCompanyTimeExpenseIdPut(params: {
        id: number;
        timeExpense: TimeExpense;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeExpense>;
}
export class TimePeriodSetupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Time Period Setups Count
     * @param conditions
     */
    timeTimePeriodSetupsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Time Period Setups Default
     */
    timeTimePeriodSetupsDefaultGet(params: {}, extraQueryParams?: any, extraFetchParams?: any): Promise<TimePeriodSetupDefaults>;
    /**
     *
     * Get Time Period Setups
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeTimePeriodSetupsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TimePeriodSetup>>;
    /**
     *
     * Delete Time Period Setup By Id
     * @param id
     */
    timeTimePeriodSetupsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Time Period Setup By Id
     * @param id
     */
    timeTimePeriodSetupsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimePeriodSetup>;
    /**
     *
     * Create Time Period Setup
     * @param timePeriodSetup
     */
    timeTimePeriodSetupsPost(params: {
        timePeriodSetup: TimePeriodSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimePeriodSetup>;
}
export class TimePeriodsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Time Periods Count
     * @param id
     * @param conditions
     */
    timeTimePeriodSetupsIdPeriodsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Time Periods
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeTimePeriodSetupsIdPeriodsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TimePeriod>>;
    /**
     *
     * Get Time Period By Id
     * @param id
     * @param periodID
     */
    timeTimePeriodSetupsIdPeriodsPeriodIDGet(params: {
        id: number;
        periodID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimePeriod>;
}
export class TimeSheetsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Time Sheet Count
     * @param conditions
     */
    timeSheetsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Time Sheet
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeSheetsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TimeSheet>>;
    /**
     *
     * Get Time Sheet By Id
     * @param id
     */
    timeSheetsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeSheet>;
    /**
     *
     * Reverse Time Sheet
     * @param id
     */
    timeSheetsIdReversePost(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SuccessResponse>;
    /**
     *
     * Submit Time Sheet
     * @param id
     */
    timeSheetsIdSubmitPost(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SuccessResponse>;
}
export class TimeZoneSetupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Time Zones Count
     * @param conditions
     */
    systemTimeZoneSetupsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Time Zones
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemTimeZoneSetupsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TimeZoneSetup>>;
    /**
     *
     * Delete Time Zone Setup By Id
     * @param id
     */
    systemTimeZoneSetupsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Time Zone By Id
     * @param id
     */
    systemTimeZoneSetupsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeZoneSetup>;
    /**
     *
     * Update Time Zone Setup
     * @param id
     * @param operations
     */
    systemTimeZoneSetupsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeZoneSetup>;
    /**
     *
     * Replace Time Zone Setup
     * @param id
     * @param timeZoneSetup
     */
    systemTimeZoneSetupsIdPut(params: {
        id: number;
        timeZoneSetup: TimeZoneSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeZoneSetup>;
    /**
     *
     * Create Time Zone Setup
     * @param timeZoneSetup
     */
    systemTimeZoneSetupsPost(params: {
        timeZoneSetup: TimeZoneSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeZoneSetup>;
}
export class TimeZonesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Returns a count of system TimeZones
     * @param conditions
     */
    systemTimeZonesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Returns a list of system TimeZones
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemTimeZonesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TimeZone>>;
    /**
     *
     * Returns a system TimeZone that can be used to create a TimeZoneSetup
     * @param id
     */
    systemTimeZonesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeZone>;
}
export class TodayPageCategoriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Today Page Categories Count
     * @param conditions
     */
    systemTodayPageCategoriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Today Page Categories
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemTodayPageCategoriesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TodayPageCategory>>;
    /**
     *
     * Delete Today Page Category By Id
     * @param id
     */
    systemTodayPageCategoriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Today Page Category By Id
     * @param id
     */
    systemTodayPageCategoriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TodayPageCategory>;
    /**
     *
     * Update Today Page Category
     * @param id
     * @param operations
     */
    systemTodayPageCategoriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TodayPageCategory>;
    /**
     *
     * Replace Today Page Category
     * @param id
     * @param todayPageCategory
     */
    systemTodayPageCategoriesIdPut(params: {
        id: number;
        todayPageCategory: TodayPageCategory;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TodayPageCategory>;
    /**
     *
     * Create Today Page Category
     * @param todayPageCategory
     */
    systemTodayPageCategoriesPost(params: {
        todayPageCategory: TodayPageCategory;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TodayPageCategory>;
}
export class TrackActionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Track Action By Id
     * @param id
     * @param actionId
     */
    systemTracksIdActionsActionIdDelete(params: {
        id: number;
        actionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Track Action By Id
     * @param id
     * @param actionId
     */
    systemTracksIdActionsActionIdGet(params: {
        id: number;
        actionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TrackAction>;
    /**
     *
     * Update Track Action
     * @param id
     * @param actionId
     * @param operations
     */
    systemTracksIdActionsActionIdPatch(params: {
        id: number;
        actionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TrackAction>;
    /**
     *
     * Replace Track Action
     * @param id
     * @param actionId
     * @param trackAction
     */
    systemTracksIdActionsActionIdPut(params: {
        id: number;
        actionId: number;
        trackAction: TrackAction;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TrackAction>;
    /**
     *
     * Get Track Actions Count
     * @param id
     * @param conditions
     */
    systemTracksIdActionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Track Actions
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemTracksIdActionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TrackAction>>;
    /**
     *
     * Create Track Action
     * @param id
     * @param trackAction
     */
    systemTracksIdActionsPost(params: {
        id: number;
        trackAction: TrackAction;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TrackAction>;
}
export class UnitOfMeasureConversionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Conversion By Id
     * @param id
     * @param conversionId
     */
    procurementUnitOfMeasuresIdConversionsConversionIdDelete(params: {
        id: number;
        conversionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Conversion By Id
     * @param id
     * @param conversionId
     */
    procurementUnitOfMeasuresIdConversionsConversionIdGet(params: {
        id: number;
        conversionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Conversion>;
    /**
     *
     * Update Conversion
     * @param id
     * @param conversionId
     * @param operations
     */
    procurementUnitOfMeasuresIdConversionsConversionIdPatch(params: {
        id: number;
        conversionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Conversion>;
    /**
     *
     * Replace Conversion
     * @param id
     * @param conversionId
     * @param conversion
     */
    procurementUnitOfMeasuresIdConversionsConversionIdPut(params: {
        id: number;
        conversionId: number;
        conversion: Conversion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Conversion>;
    /**
     *
     * Get Conversion Count
     * @param id
     * @param conditions
     */
    procurementUnitOfMeasuresIdConversionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Conversion
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementUnitOfMeasuresIdConversionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Conversion>>;
    /**
     *
     * Create Conversion
     * @param id
     * @param conversion
     */
    procurementUnitOfMeasuresIdConversionsPost(params: {
        id: number;
        conversion: Conversion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Conversion>;
}
export class UnitOfMeasuresApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Unit Of Measure Count
     * @param conditions
     */
    procurementUnitOfMeasuresCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Unit Of Measure
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementUnitOfMeasuresGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<UnitOfMeasure>>;
    /**
     *
     * Delete Unit Of Measure By Id
     * @param id
     */
    procurementUnitOfMeasuresIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Unit Of Measure By Id
     * @param id
     */
    procurementUnitOfMeasuresIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UnitOfMeasure>;
    /**
     *
     * Update Unit Of Measure
     * @param id
     * @param operations
     */
    procurementUnitOfMeasuresIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UnitOfMeasure>;
    /**
     *
     * Replace Unit Of Measure
     * @param id
     * @param unitOfMeasure
     */
    procurementUnitOfMeasuresIdPut(params: {
        id: number;
        unitOfMeasure: UnitOfMeasure;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UnitOfMeasure>;
    /**
     *
     * Create Unit Of Measure
     * @param unitOfMeasure
     */
    procurementUnitOfMeasuresPost(params: {
        unitOfMeasure: UnitOfMeasure;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UnitOfMeasure>;
}
export class UserDefinedFieldsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get User Defined Fields Count
     * @param conditions
     */
    systemUserDefinedFieldsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get User Defined Fields
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemUserDefinedFieldsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<UserDefinedField>>;
    /**
     *
     * Delete User Defined Field By Id
     * @param id
     */
    systemUserDefinedFieldsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get User Defined Field By Id
     * @param id
     */
    systemUserDefinedFieldsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UserDefinedField>;
    /**
     *
     * Update User Defined Field
     * @param id
     * @param operations
     */
    systemUserDefinedFieldsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UserDefinedField>;
    /**
     *
     * Replace User Defined Field
     * @param id
     * @param userDefinedField
     */
    systemUserDefinedFieldsIdPut(params: {
        id: number;
        userDefinedField: UserDefinedField;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UserDefinedField>;
    /**
     *
     * Create User Defined Field
     * @param userDefinedField
     */
    systemUserDefinedFieldsPost(params: {
        userDefinedField: UserDefinedField;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UserDefinedField>;
}
export class WarehouseBinsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Warehouse Bin Count
     * @param conditions
     */
    procurementWarehouseBinsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Warehouse Bin
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementWarehouseBinsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WarehouseBin>>;
    /**
     *
     * Delete Warehouse Bin By Id
     * @param id
     */
    procurementWarehouseBinsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Warehouse Bin By Id
     * @param id
     */
    procurementWarehouseBinsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WarehouseBin>;
    /**
     *
     * Update Warehouse Bin
     * @param id
     * @param operations
     */
    procurementWarehouseBinsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WarehouseBin>;
    /**
     *
     * Replace Warehouse Bin
     * @param id
     * @param warehouseBin
     */
    procurementWarehouseBinsIdPut(params: {
        id: number;
        warehouseBin: WarehouseBin;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WarehouseBin>;
    /**
     *
     * Create Warehouse Bin
     * @param warehouseBin
     */
    procurementWarehouseBinsPost(params: {
        warehouseBin: WarehouseBin;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WarehouseBin>;
}
export class WarehousesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Warehouse Count
     * @param conditions
     */
    procurementWarehousesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Warehouse
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    procurementWarehousesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Warehouse>>;
    /**
     *
     * Delete Warehouse By Id
     * @param id
     */
    procurementWarehousesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Warehouse By Id
     * @param id
     */
    procurementWarehousesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Warehouse>;
    /**
     *
     * Update Warehouse
     * @param id
     * @param operations
     */
    procurementWarehousesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Warehouse>;
    /**
     *
     * Replace Warehouse
     * @param id
     * @param warehouse
     */
    procurementWarehousesIdPut(params: {
        id: number;
        warehouse: Warehouse;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Warehouse>;
    /**
     *
     * Create Warehouse
     * @param warehouse
     */
    procurementWarehousesPost(params: {
        warehouse: Warehouse;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Warehouse>;
}
export class WorkRoleLocationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Work Role Location Count
     * @param id
     * @param conditions
     */
    timeWorkRolesIdLocationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Work Role Location
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeWorkRolesIdLocationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WorkRoleLocation>>;
    /**
     *
     * Delete Work Role Location By Id
     * @param id
     * @param locationId
     */
    timeWorkRolesIdLocationsLocationIdDelete(params: {
        id: number;
        locationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Work Role Location By Id
     * @param id
     * @param locationId
     */
    timeWorkRolesIdLocationsLocationIdGet(params: {
        id: number;
        locationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkRoleLocation>;
    /**
     *
     * Update Work Role Location
     * @param id
     * @param locationId
     * @param operations
     */
    timeWorkRolesIdLocationsLocationIdPatch(params: {
        id: number;
        locationId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkRoleLocation>;
    /**
     *
     * Replace Work Role Location
     * @param id
     * @param locationId
     * @param workRoleLocation
     */
    timeWorkRolesIdLocationsLocationIdPut(params: {
        id: number;
        locationId: number;
        workRoleLocation: WorkRoleLocation;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkRoleLocation>;
    /**
     *
     * Create Work Role Location
     * @param id
     * @param workRoleLocation
     */
    timeWorkRolesIdLocationsPost(params: {
        id: number;
        workRoleLocation: WorkRoleLocation;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkRoleLocation>;
}
export class WorkRolesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Work Role Count
     * @param conditions
     */
    timeWorkRolesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Work Role
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeWorkRolesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WorkRole>>;
    /**
     *
     * Delete Work Role By Id
     * @param id
     */
    timeWorkRolesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Work Role By Id
     * @param id
     */
    timeWorkRolesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkRole>;
    /**
     *
     * Update Work Role
     * @param id
     * @param operations
     */
    timeWorkRolesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkRole>;
    /**
     *
     * Replace Work Role
     * @param id
     * @param workRole
     */
    timeWorkRolesIdPut(params: {
        id: number;
        workRole: WorkRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkRole>;
    /**
     *
     * Create Work Role
     * @param workRole
     */
    timeWorkRolesPost(params: {
        workRole: WorkRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkRole>;
}
export class WorkTypeExternalIntegrationReferencesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get External Integration Reference Count
     * @param conditions
     */
    timeWorkTypeExternalIntegrationReferencesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get External Integration Referencet
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeWorkTypeExternalIntegrationReferencesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WorkTypeExternalIntegrationReference>>;
    /**
     *
     * Get External Integration Reference By Id
     * @param id
     */
    timeWorkTypeExternalIntegrationReferencesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkTypeExternalIntegrationReference>;
}
export class WorkTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Work Type Count
     * @param conditions
     */
    timeWorkTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Work Type
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    timeWorkTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WorkType>>;
    /**
     *
     * Delete Work Type By Id
     * @param id
     */
    timeWorkTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Work Type By Id
     * @param id
     */
    timeWorkTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkType>;
    /**
     *
     * Update Work Type
     * @param id
     * @param operations
     */
    timeWorkTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkType>;
    /**
     *
     * Replace Work Type
     * @param id
     * @param workType
     */
    timeWorkTypesIdPut(params: {
        id: number;
        workType: WorkType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkType>;
    /**
     *
     * Create Work Type
     * @param workType
     */
    timeWorkTypesPost(params: {
        workType: WorkType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkType>;
}
export class WorkflowActionAutomateParametersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Workflow Action Automate Parameters Count
     * @param id
     * @param conditions
     */
    systemWorkflowActionsIdAutomateParametersCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Workflow Action Automate Parameters
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemWorkflowActionsIdAutomateParametersGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WorkflowActionAutomateParameter>>;
    /**
     *
     * Delete Workflow Action Automate Parameter By Id
     * @param id
     * @param parameterId
     */
    systemWorkflowActionsIdAutomateParametersParameterIdDelete(params: {
        id: number;
        parameterId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Workflow Action Automate Parameter By Id
     * @param id
     * @param parameterId
     */
    systemWorkflowActionsIdAutomateParametersParameterIdGet(params: {
        id: number;
        parameterId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowActionAutomateParameter>;
    /**
     *
     * Update Workflow Action Automate Parameter
     * @param id
     * @param parameterId
     * @param operations
     */
    systemWorkflowActionsIdAutomateParametersParameterIdPatch(params: {
        id: number;
        parameterId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowActionAutomateParameter>;
    /**
     *
     * Replace Workflow Action Automate Parameter
     * @param id
     * @param parameterId
     * @param workflowActionAutomateParameter
     */
    systemWorkflowActionsIdAutomateParametersParameterIdPut(params: {
        id: number;
        parameterId: number;
        workflowActionAutomateParameter: WorkflowActionAutomateParameter;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowActionAutomateParameter>;
    /**
     *
     * Create Workflow Action Automate Parameter
     * @param id
     * @param workflowActionAutomateParameter
     */
    systemWorkflowActionsIdAutomateParametersPost(params: {
        id: number;
        workflowActionAutomateParameter: WorkflowActionAutomateParameter;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowActionAutomateParameter>;
}
export class WorkflowActionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Delete Workflow Action By Id
     * @param workflowId
     * @param eventId
     * @param actionId
     */
    systemWorkflowsWorkflowIdEventsEventIdActionsActionIdDelete(params: {
        workflowId: number;
        eventId: number;
        actionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Workflow Action By Id
     * @param workflowId
     * @param eventId
     * @param actionId
     */
    systemWorkflowsWorkflowIdEventsEventIdActionsActionIdGet(params: {
        workflowId: number;
        eventId: number;
        actionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowAction>;
    /**
     *
     * Update Workflow Action
     * @param workflowId
     * @param eventId
     * @param actionId
     * @param operations
     */
    systemWorkflowsWorkflowIdEventsEventIdActionsActionIdPatch(params: {
        workflowId: number;
        eventId: number;
        actionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowAction>;
    /**
     *
     * Replace Workflow Action
     * @param workflowId
     * @param eventId
     * @param actionId
     * @param workflowAction
     */
    systemWorkflowsWorkflowIdEventsEventIdActionsActionIdPut(params: {
        workflowId: number;
        eventId: number;
        actionId: number;
        workflowAction: WorkflowAction;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowAction>;
    /**
     *
     * Get Workflow Actions Count
     * @param workflowId
     * @param eventId
     * @param conditions
     */
    systemWorkflowsWorkflowIdEventsEventIdActionsCountGet(params: {
        workflowId: number;
        eventId: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Workflow Actions
     * @param workflowId
     * @param eventId
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemWorkflowsWorkflowIdEventsEventIdActionsGet(params: {
        workflowId: number;
        eventId: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WorkflowAction>>;
    /**
     *
     * Create Workflow Action
     * @param workflowId
     * @param eventId
     * @param workflowAction
     */
    systemWorkflowsWorkflowIdEventsEventIdActionsPost(params: {
        workflowId: number;
        eventId: number;
        workflowAction: WorkflowAction;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowAction>;
}
export class WorkflowEventsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Workflow Events Count
     * @param id
     * @param conditions
     */
    systemWorkflowsIdEventsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Delete Workflow Event By Id
     * @param id
     * @param eventId
     */
    systemWorkflowsIdEventsEventIdDelete(params: {
        id: number;
        eventId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Workflow Event By Id
     * @param id
     * @param eventId
     */
    systemWorkflowsIdEventsEventIdGet(params: {
        id: number;
        eventId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowEvent>;
    /**
     *
     * Update Workflow Event
     * @param id
     * @param eventId
     * @param operations
     */
    systemWorkflowsIdEventsEventIdPatch(params: {
        id: number;
        eventId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowEvent>;
    /**
     *
     * Replace Workflow Event
     * @param id
     * @param eventId
     * @param workflowEvent
     */
    systemWorkflowsIdEventsEventIdPut(params: {
        id: number;
        eventId: number;
        workflowEvent: WorkflowEvent;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowEvent>;
    /**
     *
     * Test Workflow Evemt
     * @param id
     * @param eventId
     */
    systemWorkflowsIdEventsEventIdTestGet(params: {
        id: number;
        eventId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<JArray>;
    /**
     *
     * Get Workflow Events
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemWorkflowsIdEventsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WorkflowEvent>>;
    /**
     *
     * Create Workflow Event
     * @param id
     * @param workflowEvent
     */
    systemWorkflowsIdEventsPost(params: {
        id: number;
        workflowEvent: WorkflowEvent;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowEvent>;
}
export class WorkflowNotifyTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Workflow Notify Types Count
     * @param id
     * @param conditions
     */
    systemWorkflowsIdNotifyTypesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Workflow Notify Types
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemWorkflowsIdNotifyTypesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WorkflowNotifyType>>;
    /**
     *
     * Get Workflow Notify Type By Id
     * @param id
     * @param typeId
     */
    systemWorkflowsIdNotifyTypesTypeIdGet(params: {
        id: number;
        typeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowNotifyType>;
}
export class WorkflowTableTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Workflow Table Types Count
     * @param conditions
     */
    systemWorkflowsTableTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Workflow Table Types
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemWorkflowsTableTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WorkflowTableType>>;
    /**
     *
     * Get Workflow Table Type By Id
     * @param id
     */
    systemWorkflowsTableTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<WorkflowTableType>;
}
export class WorkflowTriggerOptionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Workflow Triggers Count
     * @param workflowId
     * @param triggerId
     * @param conditions
     */
    systemWorkflowsWorkflowIdTriggersTriggerIdOptionsCountGet(params: {
        workflowId: number;
        triggerId: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Trigger Options
     * @param workflowId
     * @param triggerId
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemWorkflowsWorkflowIdTriggersTriggerIdOptionsGet(params: {
        workflowId: number;
        triggerId: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WorkflowTriggerOption>>;
}
export class WorkflowTriggersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Workflow Triggers Count
     * @param id
     * @param conditions
     */
    systemWorkflowsIdTriggersCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Workflow Triggers
     * @param id
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemWorkflowsIdTriggersGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<WorkflowTrigger>>;
}
export class WorkflowsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    /**
     *
     * Get Workflows Count
     * @param conditions
     */
    systemWorkflowsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    /**
     *
     * Get Workflows
     * @param conditions
     * @param orderBy
     * @param childconditions
     * @param customfieldconditions
     * @param page
     * @param pageSize
     */
    systemWorkflowsGet(params: {
        conditions?: string;
        orderBy?: string;
        childconditions?: string;
        customfieldconditions?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Workflow>>;
    /**
     *
     * Copy Workflow
     * @param id
     */
    systemWorkflowsIdCopyPost(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Workflow>;
    /**
     *
     * Delete Workflow By Id
     * @param id
     */
    systemWorkflowsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    /**
     *
     * Get Workflow By Id
     * @param id
     */
    systemWorkflowsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Workflow>;
    /**
     *
     * Update Workflow
     * @param id
     * @param operations
     */
    systemWorkflowsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Workflow>;
    /**
     *
     * Replace Workflow
     * @param id
     * @param workflow
     */
    systemWorkflowsIdPut(params: {
        id: number;
        workflow: Workflow;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Workflow>;
    /**
     *
     * Create Workflow
     * @param workflow
     */
    systemWorkflowsPost(params: {
        workflow: Workflow;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Workflow>;
}
}
declare module 'connectwise-rest-api/release/api/api' {
export * from '~connectwise-rest-api/release/api/api';
}

// Generated by typings
// Source: release/connectwise.d.ts
declare module '~connectwise-rest-api/release/connectwise' {
import { AccountingPackagesApi, AddressFormatsApi, AgreementBatchSetupsApi, AgreementTypeBoardDefaultsApi, AgreementTypeWorkRoleExclusionsApi, AgreementTypeWorkRolesApi, AgreementTypeWorkTypeExclusionsApi, AgreementTypeWorkTypesApi, AuthAnvilsApi, BillingCyclesApi, BillingSetupRoutingsApi, BillingSetupsApi, BillingStatusesApi, BillingTermsApi, BoardAutoAssignResourcesApi, BoardAutoTemplatesApi, BoardItemAssociationsApi, BoardNotificationsApi, BoardStatusNotificationsApi, BoardTypeSubTypeItemAssociationsApi, CalendarsApi, ChargeCodeExpenseTypesApi, ChargeCodesApi, ClassificationsApi, CommissionsApi, CompanyGroupsApi, CompanyPickerItemsApi, ConfigurationTypeQuestionValuesApi, ContactGroupsApi, CorporateStructureLevelsApi, CorporateStructuresApi, CountriesApi, CrmsApi, CustomReportParametersApi, CustomReportsApi, DeliveryMethodsApi, DepartmentLocationsApi, DepartmentsApi, DocumentsSetupApi, EmailConnectorParsingRulesApi, EmailConnectorParsingStylesApi, EmailConnectorsApi, EmailTokensApi, ExpenseReportsApi, ExpenseTypeExternalIntegrationReferencesApi, HolidayListsApi, HolidaysApi, ImapsApi, ImpactsApi, ImportsMassMaintenanceApi, IntegratorLoginsApi, InvoiceEmailTemplatesApi, InvoiceTemplatesApi, InvoiceTemplateSetupsApi, KPICategoriesApi, KPIsApi, LdapConfigurationsApi, LegacyCampaignSubTypesApi, LegacySubCategoriesApi, LocationDepartmentsApi, LocationWorkRolesApi, ManagedDevicesIntegrationCrossReferencesApi, ManagedDevicesIntegrationLoginsApi, ManagedDevicesIntegrationNotificationsApi, ManagedDevicesIntegrationsApi, ManagementExecuteManagedItSyncsApi, ManagementItSolutionAgreementInterfaceParametersApi, ManagementItSolutionsApi, ManagementLogsApi, ManagementNetworksSecurityApi, ManagementReportNotificationsApi, ManagementsApi, MemberAccrualsApi, MemberCertificationsApi, MemberDelegationsApi, MemberSkillsApi, MenuEntryLocationsApi, MyCompanyPurchasingsApi, NotificationRecipientsApi, OrderStatusesEmailTemplateApi, OrderStatusNotificationsApi, OthersApi, ParsingTypesApi, ParsingVariablesApi, PaymentTypesApi, PortalCalendarsApi, PortalConfigurationInvoiceSetupsApi, PortalConfigurationOpportunitySetupsApi, PortalConfigurationPasswordEmailSetupsApi, PortalConfigurationProjectSetupsApi, PortalConfigurationsApi, PortalConfigurationServiceSetupsApi, PortalReportsApi, PortalSecuritiesApi, PortalSecurityLevelsApi, ProjectSecurityRolesApi, ProjectSecurityRoleSettingsApi, ProjectStatusesApi, ProjectTypesApi, PurchaseOrderStatusEmailTemplatesApi, PurchaseOrderStatusesApi, PurchaseOrderStatusNotificationsApi, ReportCardDetailsApi, ReportCardsApi, ReportingServicesApi, RmaStatusEmailTemplatesApi, RmaStatusesApi, RmaStatusNotificationsApi, SalesQuotasApi, SalesTeamMembersApi, SalesTeamsApi, ScheduleColorsApi, ScheduleDetailsApi, SecurityRolesApi, SecurityRoleSettingsApi, ServiceEmailTemplatesApi, ServiceLocationsApi, ServicesApi, ServiceSignoffsApi, ServiceSurveyQuestionsApi, ServiceSurveysApi, ServiceTeamsApi, ServiceTemplatesApi, SetupScreensApi, SeveritiesApi, SLAPrioritiesApi, SLAsApi, StatesApi, StatusExternalIntegrationReferencesApi, SurveyOptionsApi, SurveyQuestionValuesApi, SystemTracksApi, TaxCodeExpenseTypeExemptionsApi, TaxCodeProductTypeExemptionsApi, TaxCodeWorkRoleExemptionsApi, TaxIntegrationsApi, TeamMembersApi, TicketSyncsApi, TimeAccrualDetailsApi, TimeAccrualsApi, TimeExpensesApi, TimePeriodsApi, TimePeriodSetupsApi, TimeSheetsApi, TimeZonesApi, TimeZoneSetupsApi, TrackActionsApi, WarehouseBinsApi, WarehousesApi, WorkflowActionAutomateParametersApi, WorkflowActionsApi, WorkflowEventsApi, WorkflowNotifyTypesApi, WorkflowsApi, WorkflowTableTypesApi, WorkflowTriggerOptionsApi, WorkflowTriggersApi, WorkRoleLocationsApi, WorkRolesApi, WorkTypeExternalIntegrationReferencesApi, WorkTypesApi, AccountingBatchesApi, AccountingUnpostedExpensesApi, AccountingUnpostedProcurementsApi, AccountingUnpostedinvoicesApi, ActivitiesApi, ActivityStatusesApi, ActivityStopwatchesApi, ActivityTypesApi, AdjustmentDetailsApi, AdjustmentTypesApi, AdjustmentsApi, AgreementSitesApi, AgreementAdditionsApi, AgreementAdjustmentsApi, AgreementBoardDefaultsApi, AgreementTypesApi, AgreementWorkRoleExclusionsApi, AgreementWorkRolesApi, AgreementWorkTypeExclusionsApi, AgreementWorkTypesApi, AgreementsApi, AuditTrailApi, BatchApi, BoardExcludedMembersApi, BoardItemsApi, BoardStatusesApi, BoardSubTypesApi, BoardTeamsApi, BoardTypesApi, BoardsApi, CallbacksApi, CampaignAuditsApi, CampaignEmailsOpenedApi, CampaignFormsSubmittedApi, CampaignLinksClickedApi, CampaignStatusesApi, CampaignSubTypesApi, CampaignTypesApi, CampaignsApi, CatalogComponentsApi, CatalogsItemApi, CategoriesApi, CertificationsApi, CodesApi, CompaniesApi, CompanyCustomNotesApi, CompanyManagementSummaryReportsApi, CompanyNotesApi, CompanyNoteTypesApi, CompanySitesApi, CompanyStatusesApi, CompanyTeamsApi, CompanyTypesApi, ConfigurationStatusesApi, ConfigurationTypeQuestionsApi, ConfigurationTypesApi, ContactsApi, CurrenciesApi, ConfigurationsApi, ContactNotesApi, ContactTypesApi, ContactTracksApi, ContactDepartmentsApi, ContactRelationshipsApi, ContactCommunicationsApi, ConnectWiseHostedSetupsApi, DocumentsApi, ExpenseEntriesApi, ExpenseTypesApi, GroupCompaniesApi, GroupsApi, GroupContactsApi, InfoApi, InOutBoardsApi, InOutTypesApi, InvoicesApi, InvoicePaymentsApi, KnowledgeBaseArticlesApi, LinksApi, LocationsApi, ManagementBackupsApi, ManagementEmailsApi, MarketDescriptionsApi, ManufacturersApi, MembersApi, MemberTypesApi, MenuEntriesApi, OpportunitiesApi, OrdersApi, OrderStatusesApi, OpportunityNotesApi, OpportunityTeamsApi, OpportunityTypesApi, OpportunityRatingsApi, OpportunityContactsApi, OpportunityStatusesApi, OpportunityStagesApi, OpportunityForecastsApi, OwnershipTypesApi, PricingBreaksApi, ProjectsApi, PrioritiesApi, ProductsItemApi, ProductTypesApi, ProjectNotesApi, ProjectPhasesApi, PricingDetailsApi, PurchaseOrdersApi, ProjectContactsApi, PricingSchedulesApi, ProductComponentsApi, ProjectsTeammembersApi, PurchaseOrderLineItemsApi, ProductPickingShippingDetailsApi, ReportsApi, RMAActionsApi, RMADispositionsApi, RolesApi, SalesProbabilitiesApi, SourcesApi, SurveysApi, ScheduleTypesApi, SubCategoriesApi, SurveyResultsApi, ScheduleEntriesApi, ShipmentMethodsApi, SurveyQuestionsApi, ScheduleStatusesApi, ScheduleStopwatchesApi, ScheduleReminderTimesApi, TaxCodeXRefsApi, TicketsApi, TaxCodesApi, TicketNotesApi, TicketTasksApi, TimeEntriesApi, TeamRolesApi, SkillsApi, SkillCategoriesApi, TodayPageCategoriesApi, TicketStopwatchesApi, UnitOfMeasureConversionsApi, UnitOfMeasuresApi, UserDefinedFieldsApi } from '~connectwise-rest-api/release/api/api';
export class Connectwise {
    readonly AccountingPackagesApi: AccountingPackagesApi;
    readonly AddressFormatsApi: AddressFormatsApi;
    readonly AgreementBatchSetupsApi: AgreementBatchSetupsApi;
    readonly AgreementTypeBoardDefaultsApi: AgreementTypeBoardDefaultsApi;
    readonly AgreementTypeWorkRoleExclusionsApi: AgreementTypeWorkRoleExclusionsApi;
    readonly AgreementTypeWorkRolesApi: AgreementTypeWorkRolesApi;
    readonly AgreementTypeWorkTypeExclusionsApi: AgreementTypeWorkTypeExclusionsApi;
    readonly AgreementTypeWorkTypesApi: AgreementTypeWorkTypesApi;
    readonly AuthAnvilsApi: AuthAnvilsApi;
    readonly BillingCyclesApi: BillingCyclesApi;
    readonly BillingSetupRoutingsApi: BillingSetupRoutingsApi;
    readonly BillingSetupsApi: BillingSetupsApi;
    readonly BillingStatusesApi: BillingStatusesApi;
    readonly BillingTermsApi: BillingTermsApi;
    readonly BoardAutoAssignResourcesApi: BoardAutoAssignResourcesApi;
    readonly BoardAutoTemplatesApi: BoardAutoTemplatesApi;
    readonly BoardItemAssociationsApi: BoardItemAssociationsApi;
    readonly BoardNotificationsApi: BoardNotificationsApi;
    readonly BoardStatusNotificationsApi: BoardStatusNotificationsApi;
    readonly BoardTypeSubTypeItemAssociationsApi: BoardTypeSubTypeItemAssociationsApi;
    readonly CalendarsApi: CalendarsApi;
    readonly ChargeCodeExpenseTypesApi: ChargeCodeExpenseTypesApi;
    readonly ChargeCodesApi: ChargeCodesApi;
    readonly ClassificationsApi: ClassificationsApi;
    readonly CommissionsApi: CommissionsApi;
    readonly CompanyGroupsApi: CompanyGroupsApi;
    readonly CompanyPickerItemsApi: CompanyPickerItemsApi;
    readonly ConfigurationTypeQuestionValuesApi: ConfigurationTypeQuestionValuesApi;
    readonly ContactGroupsApi: ContactGroupsApi;
    readonly CorporateStructureLevelsApi: CorporateStructureLevelsApi;
    readonly CorporateStructuresApi: CorporateStructuresApi;
    readonly CountriesApi: CountriesApi;
    readonly CrmsApi: CrmsApi;
    readonly CustomReportParametersApi: CustomReportParametersApi;
    readonly CustomReportsApi: CustomReportsApi;
    readonly DeliveryMethodsApi: DeliveryMethodsApi;
    readonly DepartmentLocationsApi: DepartmentLocationsApi;
    readonly DepartmentsApi: DepartmentsApi;
    readonly DocumentsSetupApi: DocumentsSetupApi;
    readonly EmailConnectorParsingRulesApi: EmailConnectorParsingRulesApi;
    readonly EmailConnectorParsingStylesApi: EmailConnectorParsingStylesApi;
    readonly EmailConnectorsApi: EmailConnectorsApi;
    readonly EmailTokensApi: EmailTokensApi;
    readonly ExpenseReportsApi: ExpenseReportsApi;
    readonly ExpenseTypeExternalIntegrationReferencesApi: ExpenseTypeExternalIntegrationReferencesApi;
    readonly HolidayListsApi: HolidayListsApi;
    readonly HolidaysApi: HolidaysApi;
    readonly ImapsApi: ImapsApi;
    readonly ImpactsApi: ImpactsApi;
    readonly ImportsMassMaintenanceApi: ImportsMassMaintenanceApi;
    readonly IntegratorLoginsApi: IntegratorLoginsApi;
    readonly InvoiceEmailTemplatesApi: InvoiceEmailTemplatesApi;
    readonly InvoiceTemplatesApi: InvoiceTemplatesApi;
    readonly InvoiceTemplateSetupsApi: InvoiceTemplateSetupsApi;
    readonly KPICategoriesApi: KPICategoriesApi;
    readonly KPIsApi: KPIsApi;
    readonly LdapConfigurationsApi: LdapConfigurationsApi;
    readonly LegacyCampaignSubTypesApi: LegacyCampaignSubTypesApi;
    readonly LegacySubCategoriesApi: LegacySubCategoriesApi;
    readonly LocationDepartmentsApi: LocationDepartmentsApi;
    readonly LocationWorkRolesApi: LocationWorkRolesApi;
    readonly ManagedDevicesIntegrationCrossReferencesApi: ManagedDevicesIntegrationCrossReferencesApi;
    readonly ManagedDevicesIntegrationLoginsApi: ManagedDevicesIntegrationLoginsApi;
    readonly ManagedDevicesIntegrationNotificationsApi: ManagedDevicesIntegrationNotificationsApi;
    readonly ManagedDevicesIntegrationsApi: ManagedDevicesIntegrationsApi;
    readonly ManagementExecuteManagedItSyncsApi: ManagementExecuteManagedItSyncsApi;
    readonly ManagementItSolutionAgreementInterfaceParametersApi: ManagementItSolutionAgreementInterfaceParametersApi;
    readonly ManagementItSolutionsApi: ManagementItSolutionsApi;
    readonly ManagementLogsApi: ManagementLogsApi;
    readonly ManagementNetworksSecurityApi: ManagementNetworksSecurityApi;
    readonly ManagementReportNotificationsApi: ManagementReportNotificationsApi;
    readonly ManagementsApi: ManagementsApi;
    readonly MemberAccrualsApi: MemberAccrualsApi;
    readonly MemberCertificationsApi: MemberCertificationsApi;
    readonly MemberDelegationsApi: MemberDelegationsApi;
    readonly MemberSkillsApi: MemberSkillsApi;
    readonly MenuEntryLocationsApi: MenuEntryLocationsApi;
    readonly MyCompanyPurchasingsApi: MyCompanyPurchasingsApi;
    readonly NotificationRecipientsApi: NotificationRecipientsApi;
    readonly OrderStatusesEmailTemplateApi: OrderStatusesEmailTemplateApi;
    readonly OrderStatusNotificationsApi: OrderStatusNotificationsApi;
    readonly OthersApi: OthersApi;
    readonly ParsingTypesApi: ParsingTypesApi;
    readonly ParsingVariablesApi: ParsingVariablesApi;
    readonly PaymentTypesApi: PaymentTypesApi;
    readonly PortalCalendarsApi: PortalCalendarsApi;
    readonly PortalConfigurationInvoiceSetupsApi: PortalConfigurationInvoiceSetupsApi;
    readonly PortalConfigurationOpportunitySetupsApi: PortalConfigurationOpportunitySetupsApi;
    readonly PortalConfigurationPasswordEmailSetupsApi: PortalConfigurationPasswordEmailSetupsApi;
    readonly PortalConfigurationProjectSetupsApi: PortalConfigurationProjectSetupsApi;
    readonly PortalConfigurationsApi: PortalConfigurationsApi;
    readonly PortalConfigurationServiceSetupsApi: PortalConfigurationServiceSetupsApi;
    readonly PortalReportsApi: PortalReportsApi;
    readonly PortalSecuritiesApi: PortalSecuritiesApi;
    readonly PortalSecurityLevelsApi: PortalSecurityLevelsApi;
    readonly ProjectSecurityRolesApi: ProjectSecurityRolesApi;
    readonly ProjectSecurityRoleSettingsApi: ProjectSecurityRoleSettingsApi;
    readonly ProjectStatusesApi: ProjectStatusesApi;
    readonly ProjectTypesApi: ProjectTypesApi;
    readonly PurchaseOrderStatusEmailTemplatesApi: PurchaseOrderStatusEmailTemplatesApi;
    readonly PurchaseOrderStatusesApi: PurchaseOrderStatusesApi;
    readonly PurchaseOrderStatusNotificationsApi: PurchaseOrderStatusNotificationsApi;
    readonly ReportCardDetailsApi: ReportCardDetailsApi;
    readonly ReportCardsApi: ReportCardsApi;
    readonly ReportingServicesApi: ReportingServicesApi;
    readonly RmaStatusEmailTemplatesApi: RmaStatusEmailTemplatesApi;
    readonly RmaStatusesApi: RmaStatusesApi;
    readonly RmaStatusNotificationsApi: RmaStatusNotificationsApi;
    readonly SalesQuotasApi: SalesQuotasApi;
    readonly SalesTeamMembersApi: SalesTeamMembersApi;
    readonly SalesTeamsApi: SalesTeamsApi;
    readonly ScheduleColorsApi: ScheduleColorsApi;
    readonly ScheduleDetailsApi: ScheduleDetailsApi;
    readonly SecurityRolesApi: SecurityRolesApi;
    readonly SecurityRoleSettingsApi: SecurityRoleSettingsApi;
    readonly ServiceEmailTemplatesApi: ServiceEmailTemplatesApi;
    readonly ServiceLocationsApi: ServiceLocationsApi;
    readonly ServicesApi: ServicesApi;
    readonly ServiceSignoffsApi: ServiceSignoffsApi;
    readonly ServiceSurveyQuestionsApi: ServiceSurveyQuestionsApi;
    readonly ServiceSurveysApi: ServiceSurveysApi;
    readonly ServiceTeamsApi: ServiceTeamsApi;
    readonly ServiceTemplatesApi: ServiceTemplatesApi;
    readonly SetupScreensApi: SetupScreensApi;
    readonly SeveritiesApi: SeveritiesApi;
    readonly SLAPrioritiesApi: SLAPrioritiesApi;
    readonly SLAsApi: SLAsApi;
    readonly StatesApi: StatesApi;
    readonly StatusExternalIntegrationReferencesApi: StatusExternalIntegrationReferencesApi;
    readonly SurveyOptionsApi: SurveyOptionsApi;
    readonly SurveyQuestionValuesApi: SurveyQuestionValuesApi;
    readonly SystemTracksApi: SystemTracksApi;
    readonly TaxCodeExpenseTypeExemptionsApi: TaxCodeExpenseTypeExemptionsApi;
    readonly TaxCodeProductTypeExemptionsApi: TaxCodeProductTypeExemptionsApi;
    readonly TaxCodeWorkRoleExemptionsApi: TaxCodeWorkRoleExemptionsApi;
    readonly TaxIntegrationsApi: TaxIntegrationsApi;
    readonly TeamMembersApi: TeamMembersApi;
    readonly TicketSyncsApi: TicketSyncsApi;
    readonly TimeAccrualDetailsApi: TimeAccrualDetailsApi;
    readonly TimeAccrualsApi: TimeAccrualsApi;
    readonly TimeExpensesApi: TimeExpensesApi;
    readonly TimePeriodsApi: TimePeriodsApi;
    readonly TimePeriodSetupsApi: TimePeriodSetupsApi;
    readonly TimeSheetsApi: TimeSheetsApi;
    readonly TimeZonesApi: TimeZonesApi;
    readonly TimeZoneSetupsApi: TimeZoneSetupsApi;
    readonly TrackActionsApi: TrackActionsApi;
    readonly WarehouseBinsApi: WarehouseBinsApi;
    readonly WarehousesApi: WarehousesApi;
    readonly WorkflowActionAutomateParametersApi: WorkflowActionAutomateParametersApi;
    readonly WorkflowActionsApi: WorkflowActionsApi;
    readonly WorkflowEventsApi: WorkflowEventsApi;
    readonly WorkflowNotifyTypesApi: WorkflowNotifyTypesApi;
    readonly WorkflowsApi: WorkflowsApi;
    readonly WorkflowTableTypesApi: WorkflowTableTypesApi;
    readonly WorkflowTriggerOptionsApi: WorkflowTriggerOptionsApi;
    readonly WorkflowTriggersApi: WorkflowTriggersApi;
    readonly WorkRoleLocationsApi: WorkRoleLocationsApi;
    readonly WorkRolesApi: WorkRolesApi;
    readonly WorkTypeExternalIntegrationReferencesApi: WorkTypeExternalIntegrationReferencesApi;
    readonly WorkTypesApi: WorkTypesApi;
    readonly AccountingBatchesApi: AccountingBatchesApi;
    readonly AccountingUnpostedExpensesApi: AccountingUnpostedExpensesApi;
    readonly AccountingUnpostedProcurementsApi: AccountingUnpostedProcurementsApi;
    readonly AccountingUnpostedinvoicesApi: AccountingUnpostedinvoicesApi;
    readonly ActivitiesApi: ActivitiesApi;
    readonly ActivityStatusesApi: ActivityStatusesApi;
    readonly ActivityStopwatchesApi: ActivityStopwatchesApi;
    readonly ActivityTypesApi: ActivityTypesApi;
    readonly AdjustmentDetailsApi: AdjustmentDetailsApi;
    readonly AdjustmentTypesApi: AdjustmentTypesApi;
    readonly AdjustmentsApi: AdjustmentsApi;
    readonly AgreementSitesApi: AgreementSitesApi;
    readonly AgreementAdditionsApi: AgreementAdditionsApi;
    readonly AgreementAdjustmentsApi: AgreementAdjustmentsApi;
    readonly AgreementBoardDefaultsApi: AgreementBoardDefaultsApi;
    readonly AgreementTypesApi: AgreementTypesApi;
    readonly AgreementWorkRoleExclusionsApi: AgreementWorkRoleExclusionsApi;
    readonly AgreementWorkRolesApi: AgreementWorkRolesApi;
    readonly AgreementWorkTypeExclusionsApi: AgreementWorkTypeExclusionsApi;
    readonly AgreementWorkTypesApi: AgreementWorkTypesApi;
    readonly AgreementsApi: AgreementsApi;
    readonly AuditTrailApi: AuditTrailApi;
    readonly BatchApi: BatchApi;
    readonly BoardExcludedMembersApi: BoardExcludedMembersApi;
    readonly BoardItemsApi: BoardItemsApi;
    readonly BoardStatusesApi: BoardStatusesApi;
    readonly BoardSubTypesApi: BoardSubTypesApi;
    readonly BoardTeamsApi: BoardTeamsApi;
    readonly BoardTypesApi: BoardTypesApi;
    readonly BoardsApi: BoardsApi;
    readonly CallbacksApi: CallbacksApi;
    readonly CampaignAuditsApi: CampaignAuditsApi;
    readonly CampaignEmailsOpenedApi: CampaignEmailsOpenedApi;
    readonly CampaignFormsSubmittedApi: CampaignFormsSubmittedApi;
    readonly CampaignLinksClickedApi: CampaignLinksClickedApi;
    readonly CampaignStatusesApi: CampaignStatusesApi;
    readonly CampaignSubTypesApi: CampaignSubTypesApi;
    readonly CampaignTypesApi: CampaignTypesApi;
    readonly CampaignsApi: CampaignsApi;
    readonly CatalogComponentsApi: CatalogComponentsApi;
    readonly CatalogsItemApi: CatalogsItemApi;
    readonly CategoriesApi: CategoriesApi;
    readonly CertificationsApi: CertificationsApi;
    readonly CodesApi: CodesApi;
    readonly CompaniesApi: CompaniesApi;
    readonly CompanyCustomNotesApi: CompanyCustomNotesApi;
    readonly CompanyManagementSummaryReportsApi: CompanyManagementSummaryReportsApi;
    readonly CompanyNotesApi: CompanyNotesApi;
    readonly CompanyNoteTypesApi: CompanyNoteTypesApi;
    readonly CompanySitesApi: CompanySitesApi;
    readonly CompanyStatusesApi: CompanyStatusesApi;
    readonly CompanyTeamsApi: CompanyTeamsApi;
    readonly CompanyTypesApi: CompanyTypesApi;
    readonly ConfigurationStatusesApi: ConfigurationStatusesApi;
    readonly ConfigurationTypeQuestionsApi: ConfigurationTypeQuestionsApi;
    readonly ConfigurationTypesApi: ConfigurationTypesApi;
    readonly ContactsApi: ContactsApi;
    readonly CurrenciesApi: CurrenciesApi;
    readonly ConfigurationsApi: ConfigurationsApi;
    readonly ContactNotesApi: ContactNotesApi;
    readonly ContactTypesApi: ContactTypesApi;
    readonly ContactTracksApi: ContactTracksApi;
    readonly ContactDepartmentsApi: ContactDepartmentsApi;
    readonly ContactRelationshipsApi: ContactRelationshipsApi;
    readonly ContactCommunicationsApi: ContactCommunicationsApi;
    readonly ConnectWiseHostedSetupsApi: ConnectWiseHostedSetupsApi;
    readonly DocumentsApi: DocumentsApi;
    readonly ExpenseEntriesApi: ExpenseEntriesApi;
    readonly ExpenseTypesApi: ExpenseTypesApi;
    readonly GroupCompaniesApi: GroupCompaniesApi;
    readonly GroupsApi: GroupsApi;
    readonly GroupContactsApi: GroupContactsApi;
    readonly InfoApi: InfoApi;
    readonly InOutBoardsApi: InOutBoardsApi;
    readonly InOutTypesApi: InOutTypesApi;
    readonly InvoicesApi: InvoicesApi;
    readonly InvoicePaymentsApi: InvoicePaymentsApi;
    readonly KnowledgeBaseArticlesApi: KnowledgeBaseArticlesApi;
    readonly LinksApi: LinksApi;
    readonly LocationsApi: LocationsApi;
    readonly MembersApi: MembersApi;
    readonly MemberTypesApi: MemberTypesApi;
    readonly ManagementBackupsApi: ManagementBackupsApi;
    readonly ManagementEmailsApi: ManagementEmailsApi;
    readonly MarketDescriptionsApi: MarketDescriptionsApi;
    readonly ManufacturersApi: ManufacturersApi;
    readonly MenuEntriesApi: MenuEntriesApi;
    readonly OpportunitiesApi: OpportunitiesApi;
    readonly OrdersApi: OrdersApi;
    readonly OrderStatusesApi: OrderStatusesApi;
    readonly OpportunityNotesApi: OpportunityNotesApi;
    readonly OpportunityTeamsApi: OpportunityTeamsApi;
    readonly OpportunityTypesApi: OpportunityTypesApi;
    readonly OpportunityRatingsApi: OpportunityRatingsApi;
    readonly OpportunityContactsApi: OpportunityContactsApi;
    readonly OpportunityStatusesApi: OpportunityStatusesApi;
    readonly OpportunityStagesApi: OpportunityStagesApi;
    readonly OpportunityForecastsApi: OpportunityForecastsApi;
    readonly OwnershipTypesApi: OwnershipTypesApi;
    readonly PricingBreaksApi: PricingBreaksApi;
    readonly ProjectsApi: ProjectsApi;
    readonly PrioritiesApi: PrioritiesApi;
    readonly ProductsItemApi: ProductsItemApi;
    readonly ProductTypesApi: ProductTypesApi;
    readonly ProjectNotesApi: ProjectNotesApi;
    readonly ProjectPhasesApi: ProjectPhasesApi;
    readonly PricingDetailsApi: PricingDetailsApi;
    readonly PurchaseOrdersApi: PurchaseOrdersApi;
    readonly ProjectContactsApi: ProjectContactsApi;
    readonly PricingSchedulesApi: PricingSchedulesApi;
    readonly ProductComponentsApi: ProductComponentsApi;
    readonly ProjectsTeammembersApi: ProjectsTeammembersApi;
    readonly PurchaseOrderLineItemsApi: PurchaseOrderLineItemsApi;
    readonly ProductPickingShippingDetailsApi: ProductPickingShippingDetailsApi;
    readonly ReportsApi: ReportsApi;
    readonly RMAActionsApi: RMAActionsApi;
    readonly RMADispositionsApi: RMADispositionsApi;
    readonly RolesApi: RolesApi;
    readonly SalesProbabilitiesApi: SalesProbabilitiesApi;
    readonly SkillsApi: SkillsApi;
    readonly SkillCategoriesApi: SkillCategoriesApi;
    readonly SourcesApi: SourcesApi;
    readonly SurveysApi: SurveysApi;
    readonly ScheduleTypesApi: ScheduleTypesApi;
    readonly SubCategoriesApi: SubCategoriesApi;
    readonly SurveyResultsApi: SurveyResultsApi;
    readonly ScheduleEntriesApi: ScheduleEntriesApi;
    readonly ShipmentMethodsApi: ShipmentMethodsApi;
    readonly SurveyQuestionsApi: SurveyQuestionsApi;
    readonly ScheduleStatusesApi: ScheduleStatusesApi;
    readonly ScheduleStopwatchesApi: ScheduleStopwatchesApi;
    readonly ScheduleReminderTimesApi: ScheduleReminderTimesApi;
    readonly TaxCodeXRefsApi: TaxCodeXRefsApi;
    readonly TeamRolesApi: TeamRolesApi;
    readonly TicketsApi: TicketsApi;
    readonly TaxCodesApi: TaxCodesApi;
    readonly TicketNotesApi: TicketNotesApi;
    readonly TicketTasksApi: TicketTasksApi;
    readonly TimeEntriesApi: TimeEntriesApi;
    readonly TicketStopwatchesApi: TicketStopwatchesApi;
    readonly TodayPageCategoriesApi: TodayPageCategoriesApi;
    readonly UnitOfMeasureConversionsApi: UnitOfMeasureConversionsApi;
    readonly UnitOfMeasuresApi: UnitOfMeasuresApi;
    readonly UserDefinedFieldsApi: UserDefinedFieldsApi;
    private readonly authKey;
    constructor(host: string, companyId: string, publicKey: string, privateKey: string);
}
}
declare module 'connectwise-rest-api/release/connectwise' {
export * from '~connectwise-rest-api/release/connectwise';
}
declare module 'connectwise-rest-api' {
export * from '~connectwise-rest-api/release/connectwise';
}
