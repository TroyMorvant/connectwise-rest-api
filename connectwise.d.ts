// Generated by typings
// Source: release/api/companyAPI.d.ts
declare module '~connectwise-rest-api/release/api/companyAPI' {
export interface AgreementReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CalendarReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CommunicationTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Company {
    "id"?: number;
    "identifier": string;
    "name": string;
    "status": CompanyStatusReference;
    "type": CompanyTypeReference;
    "addressLine1": string;
    "addressLine2"?: string;
    "city"?: string;
    "state"?: string;
    "zip"?: string;
    "country"?: CountryReference;
    "phoneNumber"?: string;
    "faxNumber"?: string;
    "website"?: string;
    "territoryId"?: number;
    "marketId"?: number;
    "accountNumber"?: string;
    "defaultContact"?: ContactReference;
    "dateAcquired"?: Date;
    "sicCode"?: SicCodeReference;
    "parentCompany"?: CompanyReference;
    "annualRevenue"?: number;
    "numberOfEmployees"?: number;
    "ownershipType"?: OwnershipTypeReference;
    "timeZone"?: TimeZoneReference;
    "leadSource"?: string;
    "leadFlag"?: boolean;
    "unsubscribeFlag"?: boolean;
    "calendarId"?: number;
    "deletedFlag"?: boolean;
    "dateDeleted"?: Date;
    "deletedBy"?: string;
    "mobileGuid"?: Guid;
    "currency"?: CurrencyReference;
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export interface CompanyManagementSummary {
    "id"?: number;
    "managementSolution"?: ManagementSolutionReference;
    "groupIdentifier": string;
    "deviceType"?: DeviceTypeEnum;
    "agreement"?: AgreementReference;
    "snmpMachines"?: number;
    "totalWorkstations"?: number;
    "totalServers"?: number;
    "totalWindowsServers"?: number;
    "totalWindowsWorkstations"?: number;
    "totalManagedMachines"?: number;
    "serversOffline"?: number;
    "serversDiskSpaceLow"?: number;
    "failedBackupJobs"?: number;
    "totalNotifications"?: number;
    "successfulBackupJobs"?: number;
    "serverAvailability"?: number;
    "virusesRemoved"?: number;
    "spywareItemsRemoved"?: number;
    "windowsPatchesInstalled"?: number;
    "diskCleanups"?: number;
    "diskDefragmentations"?: number;
    "fullyPatchedMachines"?: number;
    "missingOneTwoPatchesMachines"?: number;
    "missingThreeFivePatchesMachines"?: number;
    "missingMoreFivePatchesMachines"?: number;
    "missingUnscannedPatchesMachines"?: number;
    "alertsGenerated"?: string;
    "internetConnectivity"?: number;
    "diskSpaceCleanedMb"?: number;
    "missingSecurityPatches"?: string;
    "cpuUtilization"?: number;
    "memoryUtilization"?: number;
    "company"?: CompanyReference;
    "info"?: Metadata;
}
export enum DeviceTypeEnum {
    WorkstationsAndServers,
    BackupStats,
    Servers,
    Workstations,
}
export interface CompanyMerge {
    "toCompanyId": number;
    "name"?: NameEnum;
    "identifier"?: IdentifierEnum;
    "status"?: StatusEnum;
    "type"?: TypeEnum;
    "primaryAddress"?: PrimaryAddressEnum;
    "primaryContact"?: PrimaryContactEnum;
    "phone"?: PhoneEnum;
    "fax"?: FaxEnum;
    "website"?: WebsiteEnum;
    "market"?: MarketEnum;
    "territory"?: TerritoryEnum;
    "revenue"?: RevenueEnum;
    "revenueYear"?: RevenueYearEnum;
    "numberOfEmployees"?: NumberOfEmployeesEnum;
    "sicCode"?: SicCodeEnum;
    "dateAcquired"?: DateAcquiredEnum;
    "timeZone"?: TimeZoneEnum;
    "sourceList"?: SourceListEnum;
    "userDefinedField1"?: UserDefinedField1Enum;
    "userDefinedField2"?: UserDefinedField2Enum;
    "userDefinedField3"?: UserDefinedField3Enum;
    "userDefinedField4"?: UserDefinedField4Enum;
    "userDefinedField5"?: UserDefinedField5Enum;
    "userDefinedField6"?: UserDefinedField6Enum;
    "userDefinedField7"?: UserDefinedField7Enum;
    "userDefinedField8"?: UserDefinedField8Enum;
    "userDefinedField9"?: UserDefinedField9Enum;
    "userDefinedField10"?: UserDefinedField10Enum;
    "billingAddress"?: BillingAddressEnum;
    "billingContact"?: BillingContactEnum;
    "taxCode"?: TaxCodeEnum;
    "accountNumber"?: AccountNumberEnum;
    "billingTerms"?: BillingTermsEnum;
    "notes"?: NotesEnum;
    "sites"?: SitesEnum;
    "activities"?: ActivitiesEnum;
    "opportunities"?: OpportunitiesEnum;
    "services"?: ServicesEnum;
    "projects"?: ProjectsEnum;
    "contacts"?: ContactsEnum;
    "documents"?: DocumentsEnum;
}
export enum NameEnum {
    From,
    To,
}
export enum IdentifierEnum {
    From,
    To,
}
export enum StatusEnum {
    From,
    To,
}
export enum TypeEnum {
    From,
    To,
}
export enum PrimaryAddressEnum {
    From,
    To,
}
export enum PrimaryContactEnum {
    From,
    To,
}
export enum PhoneEnum {
    From,
    To,
}
export enum FaxEnum {
    From,
    To,
}
export enum WebsiteEnum {
    From,
    To,
}
export enum MarketEnum {
    From,
    To,
}
export enum TerritoryEnum {
    From,
    To,
}
export enum RevenueEnum {
    From,
    To,
}
export enum RevenueYearEnum {
    From,
    To,
}
export enum NumberOfEmployeesEnum {
    From,
    To,
}
export enum SicCodeEnum {
    From,
    To,
}
export enum DateAcquiredEnum {
    From,
    To,
}
export enum TimeZoneEnum {
    From,
    To,
}
export enum SourceListEnum {
    From,
    To,
}
export enum UserDefinedField1Enum {
    From,
    To,
}
export enum UserDefinedField2Enum {
    From,
    To,
}
export enum UserDefinedField3Enum {
    From,
    To,
}
export enum UserDefinedField4Enum {
    From,
    To,
}
export enum UserDefinedField5Enum {
    From,
    To,
}
export enum UserDefinedField6Enum {
    From,
    To,
}
export enum UserDefinedField7Enum {
    From,
    To,
}
export enum UserDefinedField8Enum {
    From,
    To,
}
export enum UserDefinedField9Enum {
    From,
    To,
}
export enum UserDefinedField10Enum {
    From,
    To,
}
export enum BillingAddressEnum {
    From,
    To,
}
export enum BillingContactEnum {
    From,
    To,
}
export enum TaxCodeEnum {
    From,
    To,
}
export enum AccountNumberEnum {
    From,
    To,
}
export enum BillingTermsEnum {
    From,
    To,
}
export enum NotesEnum {
    Discard,
    Merge,
}
export enum SitesEnum {
    Discard,
    Merge,
}
export enum ActivitiesEnum {
    Discard,
    Merge,
}
export enum OpportunitiesEnum {
    Discard,
    Merge,
}
export enum ServicesEnum {
    Discard,
    Merge,
}
export enum ProjectsEnum {
    Discard,
    Merge,
}
export enum ContactsEnum {
    Discard,
    Merge,
}
export enum DocumentsEnum {
    Discard,
    Merge,
}
export interface CompanyNote {
    "id"?: number;
    "text": string;
    "type"?: NoteTypeReference;
    "flagged"?: boolean;
    "enteredBy"?: string;
    "company"?: CompanyReference;
    "info"?: Metadata;
}
export interface CompanyReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface CompanySite {
    "id"?: number;
    "name": string;
    "addressLine1"?: string;
    "addressLine2"?: string;
    "city"?: string;
    "state"?: string;
    "zip"?: string;
    "country"?: CountryReference;
    "phoneNumber"?: string;
    "faxNumber"?: string;
    "taxCodeId"?: number;
    "expenseReimbursement"?: number;
    "primaryAddressFlag"?: boolean;
    "defaultShippingFlag"?: boolean;
    "defaultBillingFlag"?: boolean;
    "defaultMailingFlag"?: boolean;
    "calendar"?: CalendarReference;
    "timeZone"?: TimeZoneReference;
    "company"?: CompanyReference;
    "info"?: Metadata;
}
export interface CompanyStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "notifyFlag"?: boolean;
    "disallowSavingFlag"?: boolean;
    "notificationMessage"?: string;
    "customNoteFlag"?: boolean;
    "cancelOpenTracksFlag"?: boolean;
    "track"?: TrackReference;
    "info"?: Metadata;
}
export interface CompanyStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CompanyTeam {
    "id"?: number;
    "company"?: CompanyReference;
    "teamRole": TeamRoleReference;
    "locationId"?: number;
    "businessUnitId"?: number;
    "contact"?: ContactReference;
    "member"?: MemberReference;
    "accountManagerFlag"?: boolean;
    "techFlag"?: boolean;
    "salesFlag"?: boolean;
    "info"?: Metadata;
}
export interface CompanyType {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "vendorFlag"?: boolean;
    "info"?: Metadata;
}
export interface CompanyTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Configuration {
    "id"?: number;
    "name": string;
    "type": ConfigurationTypeReference;
    "status"?: ConfigurationStatusReference;
    "company": CompanyReference;
    "contact"?: ContactReference;
    "site"?: SiteReference;
    "locationId"?: number;
    "businessUnitId"?: number;
    "deviceIdentifier"?: string;
    "serialNumber"?: string;
    "modelNumber"?: string;
    "tagNumber"?: string;
    "purchaseDate"?: Date;
    "installationDate"?: Date;
    "installedBy"?: MemberReference;
    "warrantyExpirationDate"?: Date;
    "vendorNotes"?: string;
    "notes"?: string;
    "macAddress"?: string;
    "lastLoginName"?: string;
    "billFlag"?: boolean;
    "backupSuccesses"?: number;
    "backupIncomplete"?: number;
    "backupFailed"?: number;
    "backupRestores"?: number;
    "lastBackupDate"?: Date;
    "backupServerName"?: string;
    "backupBillableSpaceGb"?: number;
    "backupProtectedDeviceList"?: string;
    "backupYear"?: number;
    "backupMonth"?: number;
    "ipAddress"?: string;
    "defaultGateway"?: string;
    "osType"?: string;
    "osInfo"?: string;
    "cpuSpeed"?: string;
    "ram"?: string;
    "localHardDrives"?: string;
    "parentConfigurationId"?: number;
    "vendor"?: CompanyReference;
    "manufacturer"?: ManufacturerReference;
    "questions"?: Array<ConfigurationQuestion>;
    "activeFlag"?: boolean;
    "managementLink"?: string;
    "remoteLink"?: string;
    "sla"?: SLAReference;
    "mobileGuid"?: Guid;
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export interface ConfigurationQuestion {
    "answerId"?: number;
    "questionId"?: number;
    "question"?: string;
    "answer"?: string;
    "sequenceNumber"?: number;
    "numberOfDecimals"?: number;
    "fieldType"?: FieldTypeEnum;
    "requiredFlag"?: boolean;
}
export interface ConfigurationStatus {
    "id"?: number;
    "description": string;
    "closedFlag"?: boolean;
    "defaultFlag"?: boolean;
    "info"?: Metadata;
}
export interface ConfigurationStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ConfigurationType {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "systemFlag"?: boolean;
    "info"?: Metadata;
}
export interface ConfigurationTypeQuestion {
    "id"?: number;
    "configurationTypeId"?: number;
    "fieldType": FieldTypeEnum;
    "entryType": EntryTypeEnum;
    "sequenceNumber"?: number;
    "question": string;
    "numberOfDecimals"?: number;
    "requiredFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "possibleAnswers"?: Array<string>;
    "info"?: Metadata;
}
export enum FieldTypeEnum {
    Text,
    Button,
    Currency,
    Date,
    Hyperlink,
    IPAddress,
    Checkbox,
    Number,
    Percent,
    TextArea,
    Password,
}
export enum EntryTypeEnum {
    EntryField,
    List,
    Option,
}
export interface ConfigurationTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Contact {
    "id"?: number;
    "firstName": string;
    "lastName"?: string;
    "type"?: ContactTypeReference;
    "company"?: CompanyReference;
    "site"?: SiteReference;
    "addressLine1"?: string;
    "addressLine2"?: string;
    "city"?: string;
    "state"?: string;
    "zip"?: string;
    "country"?: string;
    "relationship"?: RelationshipReference;
    "department"?: ContactDepartmentReference;
    "inactiveFlag"?: boolean;
    "securityIdentifier"?: string;
    "managerContactId"?: number;
    "assistantContactId"?: number;
    "title"?: string;
    "school"?: string;
    "nickName"?: string;
    "marriedFlag"?: boolean;
    "childrenFlag"?: boolean;
    "significantOther"?: string;
    "portalPassword"?: string;
    "portalSecurityLevel"?: number;
    "disablePortalLoginFlag"?: boolean;
    "unsubscribeFlag"?: boolean;
    "gender"?: GenderEnum;
    "birthDay"?: Date;
    "anniversary"?: Date;
    "presence"?: PresenceEnum;
    "mobileGuid"?: Guid;
    "facebookUrl"?: string;
    "twitterUrl"?: string;
    "linkedInUrl"?: string;
    "communicationItems"?: Array<ContactCommunicationItem>;
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export enum GenderEnum {
    Male,
    Female,
}
export enum PresenceEnum {
    Online,
    DoNotDisturb,
    Away,
    Offline,
    NoAgent,
}
export interface ContactCommunication {
    "id"?: number;
    "contactId"?: number;
    "type": CommunicationTypeReference;
    "value": string;
    "extension"?: string;
    "defaultFlag"?: boolean;
    "mobileGuid"?: Guid;
    "communicationType"?: CommunicationTypeEnum;
    "info"?: Metadata;
}
export interface ContactCommunicationItem {
    "id"?: number;
    "type": CommunicationTypeReference;
    "value": string;
    "extension"?: string;
    "defaultFlag"?: boolean;
    "communicationType"?: CommunicationTypeEnum;
}
export enum CommunicationTypeEnum {
    Phone,
    Fax,
    Email,
}
export interface ContactDepartment {
    "id"?: number;
    "name": string;
    "info"?: Metadata;
}
export interface ContactDepartmentReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ContactNote {
    "id"?: number;
    "contactId"?: number;
    "text": string;
    "type"?: NoteTypeReference;
    "flagged"?: boolean;
    "enteredBy"?: string;
    "info"?: Metadata;
}
export interface ContactReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ContactRelationship {
    "id"?: number;
    "name": string;
    "info"?: Metadata;
}
export interface ContactType {
    "id"?: number;
    "description": string;
    "defaultFlag"?: boolean;
    "info"?: Metadata;
}
export interface ContactTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Count {
    "count"?: number;
}
export interface CountryReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CurrencyReference {
    "id"?: number;
    "identifier"?: string;
    "info"?: Metadata;
}
export interface CustomFieldValue {
    "id"?: number;
    "caption"?: string;
    "type"?: CustomFieldTypeEnum;
    "entryMethod"?: EntryMethodEnum;
    "numberOfDecimals"?: number;
    "value"?: string;
}
export enum CustomFieldTypeEnum {
    Text,
    Button,
    Currency,
    Date,
    Hyperlink,
    IPAddress,
    Checkbox,
    Number,
    Percent,
    TextArea,
    Password,
}
export enum EntryMethodEnum {
    EntryField,
    List,
    Option,
}
export interface Error {
    "code"?: string;
    "message"?: string;
    "errors"?: Array<ValidationError>;
}
export interface Guid {
}
export interface ManagementSolutionReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ManufacturerReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface MemberReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface Metadata {
}
export interface NoteTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface OwnershipTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface PatchOperation {
    "op"?: string;
    "path"?: string;
    "value"?: string;
}
export interface PortalSecurity {
    "identifier"?: string;
    "enabled"?: boolean;
}
export interface RelationshipReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface RequestPasswordRequest {
    "email"?: string;
}
export interface SLAReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface SicCodeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface SiteReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface SuccessResponse {
    "success"?: boolean;
    "message"?: string;
}
export interface TeamRoleReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface TimeZoneReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Track {
    "id"?: number;
    "trackId": number;
    "name"?: string;
    "startDate"?: string;
    "endDate"?: string;
    "actionTaken"?: number;
    "actionRemaining"?: number;
    "startedBy"?: string;
    "company"?: CompanyReference;
    "contact"?: ContactReference;
    "info"?: Metadata;
}
export interface TrackReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ValidatePortalRequest {
    "email"?: string;
    "password"?: string;
}
export interface ValidatePortalResponse {
    "success"?: boolean;
    "contactId"?: number;
}
export interface ValidationError {
    "code"?: string;
    "message"?: string;
    "resource"?: string;
    "field"?: string;
}
export class CompaniesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyCompaniesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyCompaniesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Company>>;
    companyCompaniesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyCompaniesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Company>;
    companyCompaniesIdMergePost(params: {
        id: number;
        merge: CompanyMerge;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SuccessResponse>;
    companyCompaniesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Company>;
    companyCompaniesIdPut(params: {
        id: number;
        company: Company;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Company>;
    companyCompaniesPost(params: {
        company: Company;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Company>;
}
export class CompanyManagementSummarysApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyCompaniesIdManagementSummaryReportsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyCompaniesIdManagementSummaryReportsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyManagementSummary>>;
    companyCompaniesIdManagementSummaryReportsPost(params: {
        id: number;
        managementSummary: CompanyManagementSummary;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyManagementSummary>;
    companyCompaniesIdManagementSummaryReportsReportIdDelete(params: {
        id: number;
        reportId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyCompaniesIdManagementSummaryReportsReportIdGet(params: {
        id: number;
        reportId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyManagementSummary>;
    companyCompaniesIdManagementSummaryReportsReportIdPatch(params: {
        id: number;
        reportId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyManagementSummary>;
    companyCompaniesIdManagementSummaryReportsReportIdPut(params: {
        id: number;
        reportId: number;
        managementSummary: CompanyManagementSummary;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyManagementSummary>;
}
export class CompanyNotesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyCompaniesIdNotesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyCompaniesIdNotesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyNote>>;
    companyCompaniesIdNotesNoteIdDelete(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyCompaniesIdNotesNoteIdGet(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyNote>;
    companyCompaniesIdNotesNoteIdPatch(params: {
        id: number;
        noteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyNote>;
    companyCompaniesIdNotesNoteIdPut(params: {
        id: number;
        noteId: number;
        companyNote: CompanyNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyNote>;
    companyCompaniesIdNotesPost(params: {
        id: number;
        companyNote: CompanyNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyNote>;
}
export class CompanySitesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyCompaniesIdSitesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyCompaniesIdSitesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanySite>>;
    companyCompaniesIdSitesPost(params: {
        id: number;
        site: CompanySite;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanySite>;
    companyCompaniesIdSitesSiteIdDelete(params: {
        id: number;
        siteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyCompaniesIdSitesSiteIdGet(params: {
        id: number;
        siteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanySite>;
    companyCompaniesIdSitesSiteIdPatch(params: {
        id: number;
        siteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanySite>;
    companyCompaniesIdSitesSiteIdPut(params: {
        id: number;
        siteId: number;
        site: CompanySite;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanySite>;
}
export class CompanyStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyCompaniesStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyCompaniesStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyStatus>>;
    companyCompaniesStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyCompaniesStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyStatus>;
    companyCompaniesStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyStatus>;
    companyCompaniesStatusesIdPut(params: {
        id: number;
        companyStatus: CompanyStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyStatus>;
    companyCompaniesStatusesPost(params: {
        companyStatus: CompanyStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyStatus>;
}
export class CompanyTeamsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyCompaniesIdTeamsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyCompaniesIdTeamsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyTeam>>;
    companyCompaniesIdTeamsPost(params: {
        id: number;
        companyTeam: CompanyTeam;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyTeam>;
    companyCompaniesIdTeamsTeamIdDelete(params: {
        id: number;
        teamId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyCompaniesIdTeamsTeamIdGet(params: {
        id: number;
        teamId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyTeam>;
    companyCompaniesIdTeamsTeamIdPatch(params: {
        id: number;
        teamId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyTeam>;
    companyCompaniesIdTeamsTeamIdPut(params: {
        id: number;
        teamId: number;
        companyTeam: CompanyTeam;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyTeam>;
}
export class CompanyTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyCompaniesTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyCompaniesTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CompanyType>>;
    companyCompaniesTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyCompaniesTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyType>;
    companyCompaniesTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyType>;
    companyCompaniesTypesIdPut(params: {
        id: number;
        companyType: CompanyType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyType>;
    companyCompaniesTypesPost(params: {
        companyType: CompanyType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CompanyType>;
}
export class ConfigurationStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyConfigurationsStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyConfigurationsStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConfigurationStatus>>;
    companyConfigurationsStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyConfigurationsStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationStatus>;
    companyConfigurationsStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationStatus>;
    companyConfigurationsStatusesIdPut(params: {
        id: number;
        configurationStatus: ConfigurationStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationStatus>;
    companyConfigurationsStatusesPost(params: {
        configurationStatus: ConfigurationStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationStatus>;
}
export class ConfigurationTypeQuestionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyConfigurationsTypesIdQuestionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyConfigurationsTypesIdQuestionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConfigurationTypeQuestion>>;
    companyConfigurationsTypesIdQuestionsPost(params: {
        id: number;
        configurationTypeQuestion: ConfigurationTypeQuestion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationTypeQuestion>;
    companyConfigurationsTypesIdQuestionsQuestionIdDelete(params: {
        id: number;
        questionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyConfigurationsTypesIdQuestionsQuestionIdGet(params: {
        id: number;
        questionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationTypeQuestion>;
    companyConfigurationsTypesIdQuestionsQuestionIdPatch(params: {
        id: number;
        questionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationTypeQuestion>;
    companyConfigurationsTypesIdQuestionsQuestionIdPut(params: {
        id: number;
        questionId: number;
        configurationTypeQuestion: ConfigurationTypeQuestion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationTypeQuestion>;
}
export class ConfigurationTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyConfigurationsTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyConfigurationsTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConfigurationType>>;
    companyConfigurationsTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyConfigurationsTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationType>;
    companyConfigurationsTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationType>;
    companyConfigurationsTypesIdPut(params: {
        id: number;
        configurationType: ConfigurationType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationType>;
    companyConfigurationsTypesPost(params: {
        configurationType: ConfigurationType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationType>;
}
export class ConfigurationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyConfigurationsCountGet(params: {
        conditions?: string;
        managedIdentifier?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyConfigurationsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
        managedIdentifier?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Configuration>>;
    companyConfigurationsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyConfigurationsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Configuration>;
    companyConfigurationsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
        managementSolutionName?: string;
        managedIdentifier?: string;
        type?: string;
        level?: string;
        childConfigurationsMatchingOn?: string;
        inactivateConfigurationsMatchingOn?: string;
        inactiveConfigurationStatusId?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Configuration>;
    companyConfigurationsIdPut(params: {
        id: number;
        configuration: Configuration;
        managementSolutionName?: string;
        managedIdentifier?: string;
        type?: string;
        level?: string;
        childConfigurationsMatchingOn?: string;
        inactivateConfigurationsMatchingOn?: string;
        inactiveConfigurationStatusId?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Configuration>;
    companyConfigurationsPost(params: {
        configuration: Configuration;
        managementSolutionName?: string;
        managedIdentifier?: string;
        type?: string;
        level?: string;
        childConfigurationsMatchingOn?: string;
        inactivateConfigurationsMatchingOn?: string;
        inactiveConfigurationStatusId?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Configuration>;
}
export class ContactCommunicationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyContactsIdCommunicationsCommunicationIdDelete(params: {
        id: number;
        communicationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyContactsIdCommunicationsCommunicationIdGet(params: {
        id: number;
        communicationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactCommunication>;
    companyContactsIdCommunicationsCommunicationIdPatch(params: {
        id: number;
        communicationId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactCommunication>;
    companyContactsIdCommunicationsCommunicationIdPut(params: {
        id: number;
        communicationId: number;
        contactCommunication: ContactCommunication;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactCommunication>;
    companyContactsIdCommunicationsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyContactsIdCommunicationsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ContactCommunication>>;
    companyContactsIdCommunicationsPost(params: {
        id: number;
        contactCommunication: ContactCommunication;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactCommunication>;
}
export class ContactDepartmentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyContactsDepartmentsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyContactsDepartmentsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ContactDepartment>>;
    companyContactsDepartmentsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyContactsDepartmentsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactDepartment>;
    companyContactsDepartmentsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactDepartment>;
    companyContactsDepartmentsIdPut(params: {
        id: number;
        contactDepartment: ContactDepartment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactDepartment>;
    companyContactsDepartmentsPost(params: {
        contactDepartment: ContactDepartment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactDepartment>;
}
export class ContactNotesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyContactsIdNotesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyContactsIdNotesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ContactNote>>;
    companyContactsIdNotesNoteIdDelete(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyContactsIdNotesNoteIdGet(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactNote>;
    companyContactsIdNotesNoteIdPatch(params: {
        id: number;
        noteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactNote>;
    companyContactsIdNotesNoteIdPut(params: {
        id: number;
        noteId: number;
        contactNote: ContactNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactNote>;
    companyContactsIdNotesPost(params: {
        id: number;
        contactNote: ContactNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactNote>;
}
export class ContactRelationshipsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyContactsRelationshipsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyContactsRelationshipsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ContactRelationship>>;
    companyContactsRelationshipsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyContactsRelationshipsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactRelationship>;
    companyContactsRelationshipsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactRelationship>;
    companyContactsRelationshipsIdPut(params: {
        id: number;
        contactRelationship: ContactRelationship;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactRelationship>;
    companyContactsRelationshipsPost(params: {
        contactRelationship: ContactRelationship;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactRelationship>;
}
export class ContactTracksApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyContactsIdTracksCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyContactsIdTracksGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Track>>;
    companyContactsIdTracksPost(params: {
        id: number;
        track: Track;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Track>;
    companyContactsIdTracksTrackIdDelete(params: {
        id: number;
        trackId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyContactsIdTracksTrackIdGet(params: {
        id: number;
        trackId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Track>;
}
export class ContactTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyContactsTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyContactsTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ContactType>>;
    companyContactsTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyContactsTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactType>;
    companyContactsTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactType>;
    companyContactsTypesIdPut(params: {
        id: number;
        contactType: ContactType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactType>;
    companyContactsTypesPost(params: {
        contactType: ContactType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ContactType>;
}
export class ContactsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    companyContactsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    companyContactsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Contact>>;
    companyContactsIdDelete(params: {
        id: number;
        transferContactId?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyContactsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Contact>;
    companyContactsIdImageGet(params: {
        id: number;
        useDefaultFlag?: boolean;
        lastModified?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyContactsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Contact>;
    companyContactsIdPortalSecurityGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PortalSecurity>>;
    companyContactsIdPut(params: {
        id: number;
        contact: Contact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Contact>;
    companyContactsPost(params: {
        contact: Contact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Contact>;
    companyContactsRequestPasswordPost(params: {
        request: RequestPasswordRequest;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    companyContactsValidatePortalCredentialsPost(params: {
        request: ValidatePortalRequest;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ValidatePortalResponse>;
}
}
declare module 'connectwise-rest-api/release/api/companyAPI' {
import alias = require('~connectwise-rest-api/release/api/companyAPI');
export = alias;
}

// Generated by typings
// Source: release/api/expenseAPI.d.ts
declare module '~connectwise-rest-api/release/api/expenseAPI' {
export interface AgreementReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ClassificationReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CompanyReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface Count {
    "value"?: number;
}
export interface Error {
    "code"?: string;
    "message"?: string;
    "errors"?: Array<ValidationError>;
}
export interface ExpenseEntry {
    "id"?: number;
    "company"?: CompanyReference;
    "chargeToId"?: number;
    "chargeToType"?: ChargeToTypeEnum;
    "type": ExpenseTypeReference;
    "member"?: MemberReference;
    "paymentMethod"?: PaymentMethodReference;
    "classification"?: ClassificationReference;
    "amount": number;
    "billableOption": BillableOptionEnum;
    "date": Date;
    "locationId"?: number;
    "businessUnitId"?: number;
    "notes"?: string;
    "agreement"?: AgreementReference;
    "invoiceAmount"?: number;
    "taxes"?: Array<ExpenseTax>;
    "info"?: Metadata;
}
export enum ChargeToTypeEnum {
    ServiceTicket,
    ProjectTicket,
    ChargeCode,
    Activity,
}
export enum BillableOptionEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export interface ExpenseTax {
    "id"?: number;
    "amount"?: number;
    "type"?: ExpenseTaxTypeReference;
}
export interface ExpenseTaxTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ExpenseType {
    "id"?: number;
    "name": string;
    "amountCaption": string;
    "reimbursementRate"?: number;
    "billExpenses": BillExpensesEnum;
    "invoiceMarkupOption": InvoiceMarkupOptionEnum;
    "invoiceMarkupAmount"?: number;
    "advancedAmountFlag"?: boolean;
    "mileageFlag"?: boolean;
    "quantityFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "maxAmount"?: number;
    "info"?: Metadata;
}
export enum BillExpensesEnum {
    Billable,
    DoNotBill,
    NoCharge,
}
export enum InvoiceMarkupOptionEnum {
    Percent,
    Amount,
    Mile,
}
export interface ExpenseTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface MemberReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface Metadata {
}
export interface PatchOperation {
    "op"?: string;
    "path"?: string;
    "value"?: string;
}
export interface PaymentMethodReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ValidationError {
    "code"?: string;
    "message"?: string;
    "resource"?: string;
    "field"?: string;
}
export class ExpenseEntriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    expenseEntriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    expenseEntriesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ExpenseEntry>>;
    expenseEntriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    expenseEntriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseEntry>;
    expenseEntriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseEntry>;
    expenseEntriesIdPut(params: {
        id: number;
        expenseEntry: ExpenseEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseEntry>;
    expenseEntriesPost(params: {
        expenseEntry: ExpenseEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseEntry>;
}
export class ExpenseTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    expenseTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    expenseTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ExpenseType>>;
    expenseTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    expenseTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseType>;
    expenseTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseType>;
    expenseTypesIdPut(params: {
        id: number;
        expenseType: ExpenseType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseType>;
    expenseTypesPost(params: {
        expenseType: ExpenseType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExpenseType>;
}
}
declare module 'connectwise-rest-api/release/api/expenseAPI' {
import alias = require('~connectwise-rest-api/release/api/expenseAPI');
export = alias;
}

// Generated by typings
// Source: release/api/financeAPI.d.ts
declare module '~connectwise-rest-api/release/api/financeAPI' {
export interface ActivityReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Addition {
    "id"?: number;
    "product": IvItemReference;
    "quantity"?: number;
    "lessIncluded"?: number;
    "unitPrice"?: number;
    "unitCost"?: number;
    "billCustomer": BillCustomerEnum;
    "effectiveDate"?: Date;
    "cancelledDate"?: Date;
    "taxableFlag"?: boolean;
    "serialNumber"?: string;
    "invoiceDescription"?: string;
    "purchaseItemFlag"?: boolean;
    "specialOrderFlag"?: boolean;
    "agreementId"?: number;
    "description"?: string;
    "billedQuantity"?: number;
    "uom"?: string;
    "extPrice"?: number;
    "extCost"?: number;
    "margin"?: number;
    "info"?: Metadata;
}
export enum BillCustomerEnum {
    Billable,
    DoNotBill,
    NoCharge,
}
export interface Adjustment {
    "id"?: number;
    "amount"?: number;
    "description"?: string;
    "effectiveDate"?: Date;
    "agreementId"?: number;
    "info"?: Metadata;
}
export interface Agreement {
    "id"?: number;
    "name": string;
    "type": AgreementTypeReference;
    "company": CompanyReference;
    "contact": ContactReference;
    "subContractCompany"?: CompanyReference;
    "subContractContact"?: ContactReference;
    "parentAgreementId"?: number;
    "customerPO"?: string;
    "locationId"?: number;
    "businessUnitId"?: number;
    "restrictLocationFlag"?: boolean;
    "restrictDepartmentFlag"?: boolean;
    "startDate"?: Date;
    "endDate"?: Date;
    "noEndingDateFlag"?: boolean;
    "opportunity"?: OpportunityReference;
    "cancelledFlag"?: boolean;
    "dateCancelled"?: Date;
    "reasonCancelled"?: string;
    "slaId"?: number;
    "workOrder"?: string;
    "internalNotes"?: string;
    "applicationUnits"?: ApplicationUnitsEnum;
    "applicationLimit"?: number;
    "applicationCycle"?: ApplicationCycleEnum;
    "applicationUnlimitedFlag"?: boolean;
    "oneTimeFlag"?: boolean;
    "coverAgreementTime"?: boolean;
    "coverAgreementProduct"?: boolean;
    "coverAgreementExpense"?: boolean;
    "coverSalesTax"?: boolean;
    "carryOverUnused"?: boolean;
    "allowOverruns"?: boolean;
    "expiredDays"?: number;
    "limit"?: number;
    "expireWhenZero"?: boolean;
    "chargeToFirm"?: boolean;
    "employeeCompRate"?: EmployeeCompRateEnum;
    "employeeCompNotExceed"?: EmployeeCompNotExceedEnum;
    "compHourlyRate"?: number;
    "compLimitAmount"?: number;
    "billCycleId"?: number;
    "billOneTimeFlag"?: boolean;
    "billTermsId"?: number;
    "invoicingCycle"?: InvoicingCycleEnum;
    "billToCompany"?: CompanyReference;
    "billToSite"?: SiteReference;
    "billAmount"?: number;
    "taxable"?: boolean;
    "prorateFirstBill"?: number;
    "billStartDate"?: Date;
    "taxCodeId"?: number;
    "restrictDownPayment"?: boolean;
    "invoiceDescription"?: string;
    "topComment"?: boolean;
    "bottomComment"?: boolean;
    "workRole"?: WorkRoleReference;
    "workType"?: WorkTypeReference;
    "projectTypeId"?: number;
    "invoiceTemplateSetupId"?: number;
    "billTime"?: BillTimeEnum;
    "billExpenses"?: BillExpensesEnum;
    "billProducts"?: BillProductsEnum;
    "billableTimeInvoice"?: boolean;
    "billableExpenseInvoice"?: boolean;
    "billableProductInvoice"?: boolean;
    "info"?: Metadata;
    "periodType"?: PeriodTypeEnum;
}
export enum PeriodTypeEnum {
    Current,
    Future,
    Both,
    Undefined,
}
export interface AgreementReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface AgreementSite {
    "id"?: number;
    "company": CompanyReference;
    "site"?: SiteReference;
    "agreementId"?: number;
    "info"?: Metadata;
}
export interface AgreementType {
    "id"?: number;
    "name": string;
    "prefixSuffixOption": PrefixSuffixOptionEnum;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "prePaymentFlag"?: boolean;
    "invoicePreSuffix"?: string;
    "locationId"?: number;
    "businessUnitId"?: number;
    "restrictLocationFlag"?: boolean;
    "restrictDepartmentFlag"?: boolean;
    "slaId"?: number;
    "applicationUnits"?: ApplicationUnitsEnum;
    "applicationLimit"?: number;
    "applicationCycle"?: ApplicationCycleEnum;
    "applicationUnlimitedFlag"?: boolean;
    "oneTimeFlag"?: boolean;
    "coverAgreementTimeFlag"?: boolean;
    "coverAgreementProductFlag"?: boolean;
    "coverAgreementExpenseFlag"?: boolean;
    "coverSalesTaxFlag"?: boolean;
    "carryOverUnusedFlag"?: boolean;
    "allowOverrunsFlag"?: boolean;
    "expiredDays"?: number;
    "limit"?: number;
    "expireWhenZero"?: boolean;
    "chargeToFirmFlag"?: boolean;
    "employeeCompRate": EmployeeCompRateEnum;
    "employeeCompNotExceed": EmployeeCompNotExceedEnum;
    "compHourlyRate"?: number;
    "compLimitAmount"?: number;
    "billCycleId"?: number;
    "billOneTimeFlag"?: boolean;
    "billTermsId"?: number;
    "invoicingCycle": InvoicingCycleEnum;
    "billAmount"?: number;
    "taxableFlag"?: boolean;
    "restrictDownPaymentFlag"?: boolean;
    "invoiceDescription"?: string;
    "topCommentFlag"?: boolean;
    "bottomCommentFlag"?: boolean;
    "workRole"?: WorkRoleReference;
    "workType"?: WorkTypeReference;
    "projectTypeId"?: number;
    "invoiceTemplateSetupId"?: number;
    "billTime": BillTimeEnum;
    "billExpenses": BillExpensesEnum;
    "billProducts": BillProductsEnum;
    "billableTimeInvoiceFlag"?: boolean;
    "billableExpenseInvoiceFlag"?: boolean;
    "billableProductInvoiceFlag"?: boolean;
    "copyWorkRolesFlag"?: boolean;
    "copyWorkTypesFlag"?: boolean;
    "info"?: Metadata;
}
export enum PrefixSuffixOptionEnum {
    Prefix,
    Suffix,
}
export enum ApplicationUnitsEnum {
    Amount,
    Hours,
    Incidents,
}
export enum ApplicationCycleEnum {
    Contract2Weeks,
    Contract4Weeks,
    ContractYear,
    CalendarMonth,
    CalendarQuarter,
    CalendarWeek,
    ContractQuarter,
    CalendarYear,
}
export enum EmployeeCompRateEnum {
    Actual,
    Hourly,
}
export enum EmployeeCompNotExceedEnum {
    Billing,
    Percent,
    Amount,
}
export enum InvoicingCycleEnum {
    CalendarYear,
    ContractYear,
}
export enum BillExpensesEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export enum BillProductsEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export interface AgreementTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface AgreementWorkRole {
    "id"?: number;
    "workRole"?: WorkRoleReference;
    "locationId"?: number;
    "rateType": RateTypeEnum;
    "rate"?: number;
    "limitTo"?: number;
    "effectiveDate"?: Date;
    "endingDate"?: Date;
    "agreementId"?: number;
    "info"?: Metadata;
}
export interface AgreementWorkRoleExclusion {
    "id"?: number;
    "workRole": WorkRoleReference;
    "agreementId"?: number;
    "info"?: Metadata;
}
export interface AgreementWorkType {
    "id"?: number;
    "workType"?: WorkTypeReference;
    "locationId"?: number;
    "rateType": RateTypeEnum;
    "billTime": BillTimeEnum;
    "rate"?: number;
    "hoursMax"?: number;
    "hoursMin"?: number;
    "roundBillHours"?: number;
    "overageRate"?: number;
    "overageRateType"?: OverageRateTypeEnum;
    "agreementLimit"?: number;
    "site"?: SiteReference;
    "effectiveDate"?: Date;
    "endingDate"?: Date;
    "agreementId"?: number;
    "company"?: CompanyReference;
    "info"?: Metadata;
}
export enum RateTypeEnum {
    AdjAmount,
    Custom,
    Multiplier,
}
export enum BillTimeEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export enum OverageRateTypeEnum {
    AdjAmount,
    Custom,
    Multiplier,
}
export interface AgreementWorkTypeExclusion {
    "id"?: number;
    "workType": WorkTypeReference;
    "agreementId"?: number;
    "info"?: Metadata;
}
export interface Batch {
    "thruDate"?: Date;
    "locationId"?: number;
    "summarizeInvoices"?: number;
    "excludedInvoiceIds"?: Array<number>;
    "excludedExpenseIds"?: Array<number>;
    "excludedProductIds"?: Array<number>;
    "id"?: number;
    "batchIdentifier": string;
    "exportInvoicesFlag"?: boolean;
    "exportExpensesFlag"?: boolean;
    "exportProductsFlag"?: boolean;
    "closedFlag"?: boolean;
    "info"?: Metadata;
}
export interface BatchReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface BillingStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface BillingTermsReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface BoardDefault {
    "id"?: number;
    "board": BoardReference;
    "serviceType"?: ServiceTypeReference;
    "defaultFlag"?: boolean;
    "agreementId"?: number;
    "info"?: Metadata;
}
export interface BoardReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ChargeCodeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CompanyReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface ConfigurationReference {
    "id"?: number;
    "deviceIdentifier"?: string;
    "info"?: Metadata;
}
export interface ContactReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Count {
    "count"?: number;
}
export interface Currency {
    "id"?: number;
    "currencyIdentifier": string;
    "name"?: string;
    "symbol"?: string;
    "displayIdFlag"?: boolean;
    "displaySymbolFlag"?: boolean;
    "isoCode"?: string;
    "info"?: Metadata;
}
export interface CurrencyReference {
    "id"?: number;
    "identifier"?: string;
    "info"?: Metadata;
}
export interface Error {
    "code"?: string;
    "message"?: string;
    "errors"?: Array<ValidationError>;
}
export interface ExpenseTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Invoice {
    "id"?: number;
    "invoiceNumber"?: string;
    "type": TypeEnum;
    "status"?: BillingStatusReference;
    "company": CompanyReference;
    "billToCompany"?: CompanyReference;
    "shipToCompany"?: CompanyReference;
    "applyToType"?: ApplyToTypeEnum;
    "applyToId"?: number;
    "attention"?: string;
    "billingSite"?: SiteReference;
    "shippingSite"?: SiteReference;
    "billingTerms"?: BillingTermsReference;
    "reference"?: string;
    "customerPO"?: string;
    "templateSetupId"?: number;
    "emailTemplateId"?: number;
    "addToBatchEmailList"?: boolean;
    "date"?: Date;
    "restrictDownpaymentFlag"?: boolean;
    "locationId"?: number;
    "departmentId"?: number;
    "territoryId"?: number;
    "topComment"?: string;
    "bottomComment"?: string;
    "taxableFlag"?: boolean;
    "taxCode"?: TaxCodeReference;
    "internalNotes"?: string;
    "downpaymentPreviouslyTaxedFlag"?: boolean;
    "serviceTotal"?: number;
    "dueDate"?: Date;
    "expenseTotal"?: number;
    "productTotal"?: number;
    "previousProgressApplied"?: number;
    "serviceAdjustmentAmount"?: number;
    "agreementAmount"?: number;
    "downpaymentApplied"?: number;
    "subtotal"?: number;
    "total"?: number;
    "remainingDownpayment"?: number;
    "salesTax"?: number;
    "adjustmentReason"?: string;
    "adjustedBy"?: string;
    "payments"?: number;
    "credits"?: number;
    "balance"?: number;
    "specialInvoiceFlag"?: boolean;
}
export enum TypeEnum {
    Agreement,
    CreditMemo,
    DownPayment,
    Miscellaneous,
    Progress,
    Standard,
}
export enum ApplyToTypeEnum {
    All,
    Agreement,
    Project,
    ProjectPhase,
    SalesOrder,
    Ticket,
}
export interface InvoiceReference {
    "id"?: number;
    "identifier"?: string;
    "info"?: Metadata;
}
export interface IvItemReference {
    "id"?: number;
    "identifier"?: string;
    "info"?: Metadata;
}
export interface MemberReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface Metadata {
}
export interface OpportunityReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface PatchOperation {
    "op"?: string;
    "path"?: string;
    "value"?: string;
}
export interface Payment {
    "id"?: number;
    "type"?: string;
    "invoice"?: InvoiceReference;
    "amount": number;
    "paymentDate"?: Date;
    "appliedBy"?: string;
    "info"?: Metadata;
}
export interface PaymentMethodReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProductReference {
    "id"?: number;
    "description"?: string;
    "info"?: Metadata;
}
export interface ProjectPhaseReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProjectReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface PurchaseOrderReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ShipmentMethodReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface SiteReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface TaxCodeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface TicketReference {
    "id"?: number;
    "summary"?: string;
    "info"?: Metadata;
}
export interface TimeEntryReference {
    "id"?: number;
    "info"?: Metadata;
}
export interface Transaction {
    "id"?: number;
    "batch"?: BatchReference;
    "billingLogId"?: number;
    "invoiceNumber"?: string;
    "type"?: TransactionTypeEnum;
    "description"?: string;
    "cost"?: number;
    "item"?: string;
    "inventory"?: string;
    "salesCode"?: string;
    "cogs"?: string;
    "glAccount"?: string;
    "currency"?: CurrencyReference;
    "debitAmount"?: number;
    "creditAmount"?: number;
    "balance"?: string;
    "product"?: ProductReference;
    "quantity"?: number;
    "unitOfMeasure"?: UnitOfMeasureReference;
    "serializedFlag"?: boolean;
    "serialNumber"?: string;
    "shipmentMethod"?: ShipmentMethodReference;
    "packingSlip"?: string;
    "ticket"?: TicketReference;
    "project"?: ProjectReference;
    "phase"?: ProjectPhaseReference;
    "expenseClass"?: ExpenseClassEnum;
    "expenseType"?: ExpenseTypeReference;
    "timeEntry"?: TimeEntryReference;
    "activity"?: ActivityReference;
    "segment1"?: string;
    "segment2"?: string;
    "segment3"?: string;
    "segment4"?: string;
    "segment5"?: string;
    "segment6"?: string;
    "segment7"?: string;
    "segment8"?: string;
    "segment9"?: string;
    "segment10"?: string;
    "avalaraTaxFlag"?: boolean;
    "stateTaxAmount"?: number;
    "countyTaxAmount"?: number;
    "cityTaxAmount"?: number;
    "countryTaxAmount"?: number;
    "compositeTaxAmount"?: number;
    "taxTotal"?: number;
    "info"?: Metadata;
}
export enum TransactionTypeEnum {
    AP,
    AR,
    EE,
    EI,
    EO,
    IA,
    IT,
    P,
    PF,
    R,
    RA,
    RD,
    RE,
    RP,
    ST,
    SD,
    ET,
    RM,
    FT,
    PT,
}
export enum ExpenseClassEnum {
    NonReimbursable,
    Reimbursable,
    Personal,
}
export interface UnitOfMeasureReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface UnpostedExpense {
    "id"?: number;
    "locationId"?: number;
    "departmentId"?: number;
    "company"?: CompanyReference;
    "accountNumber"?: string;
    "creditAccount"?: string;
    "expenseDetailId"?: number;
    "expenseType"?: ExpenseTypeReference;
    "classification"?: ClassificationEnum;
    "glType"?: GlTypeEnum;
    "member"?: MemberReference;
    "dateExpense"?: Date;
    "chargeCode"?: ChargeCodeReference;
    "chargeDescription"?: string;
    "inPolicy"?: boolean;
    "paymentMethod"?: PaymentMethodReference;
    "currency"?: CurrencyReference;
    "total"?: number;
    "billableAmount"?: number;
    "nonBillableAmount"?: number;
    "agreement"?: AgreementReference;
    "agreementAmountCovered"?: number;
    "ticket"?: TicketReference;
    "project"?: ProjectReference;
    "projectPhase"?: ProjectPhaseReference;
    "taxCode"?: TaxCodeReference;
    "avalaraTaxFlag"?: boolean;
    "salesTaxAmount"?: number;
    "stateTaxAmount"?: number;
    "countyTaxAmount"?: number;
    "cityTaxAmount"?: number;
    "countryTaxAmount"?: number;
    "compositeTaxAmount"?: number;
    "info"?: Metadata;
}
export enum ClassificationEnum {
    NonReimbursable,
    Reimbursable,
    Personal,
}
export enum GlTypeEnum {
    AP,
    AR,
    EE,
    EI,
    EO,
    IA,
    IT,
    P,
    PF,
    R,
    RA,
    RD,
    RE,
    RP,
    ST,
    SD,
    ET,
    RM,
    FT,
    PT,
}
export interface UnpostedInvoice {
    "id"?: number;
    "billingLogId"?: number;
    "locationId"?: number;
    "departmentId"?: number;
    "company"?: CompanyReference;
    "accountNumber"?: string;
    "billToCompany"?: CompanyReference;
    "billToSite"?: SiteReference;
    "shipToCompany"?: CompanyReference;
    "shipToSite"?: SiteReference;
    "invoiceNumber"?: string;
    "invoiceDate"?: Date;
    "invoiceType"?: InvoiceTypeEnum;
    "description"?: string;
    "billingTerms"?: BillingTermsReference;
    "dueDays"?: string;
    "dueDate"?: Date;
    "currency"?: CurrencyReference;
    "subTotal"?: number;
    "total"?: number;
    "invoiceTaxableFlag"?: boolean;
    "taxCode"?: TaxCodeReference;
    "avalaraTaxFlag"?: boolean;
    "salesTaxAmount"?: number;
    "stateTaxAmount"?: number;
    "countyTaxAmount"?: number;
    "cityTaxAmount"?: number;
    "countryTaxAmount"?: number;
    "compositeTaxAmount"?: number;
    "createdBy"?: string;
    "info"?: Metadata;
}
export enum InvoiceTypeEnum {
    Agreement,
    CreditMemo,
    DownPayment,
    Miscellaneous,
    Progress,
    Standard,
}
export interface UnpostedProcurement {
    "id"?: number;
    "description"?: string;
    "locationId"?: number;
    "departmentId"?: number;
    "procurementType"?: ProcurementTypeEnum;
    "purchaseOrder"?: PurchaseOrderReference;
    "purchaseDate"?: Date;
    "billingTerms"?: BillingTermsReference;
    "currency"?: CurrencyReference;
    "total"?: number;
    "taxCode"?: TaxCodeReference;
    "avalaraTaxFlag"?: boolean;
    "stateTaxAmount"?: number;
    "countyTaxAmount"?: number;
    "cityTaxAmount"?: number;
    "countryTaxAmount"?: number;
    "compositeTaxAmount"?: number;
    "taxTotal"?: number;
    "customer"?: CompanyReference;
    "vendor"?: CompanyReference;
    "vendorAccountNumber"?: string;
    "vendorInvoiceNumber"?: string;
    "vendorInvoiceDate"?: Date;
    "taxFreightFlag"?: boolean;
    "freightTaxTotal"?: number;
    "freightCost"?: number;
    "info"?: Metadata;
}
export enum ProcurementTypeEnum {
    Purchase,
    Adjustment,
    Transfer,
}
export interface ValidationError {
    "code"?: string;
    "message"?: string;
    "resource"?: string;
    "field"?: string;
}
export interface WorkRoleReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface WorkTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export class AccountingBatchTransactionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAccountingBatchesIdTransactionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAccountingBatchesIdTransactionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Transaction>>;
    financeAccountingBatchesIdTransactionsTransactionIdGet(params: {
        id: number;
        transactionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Transaction>;
}
export class AccountingBatchesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAccountingBatchesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAccountingBatchesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Batch>>;
    financeAccountingBatchesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeAccountingBatchesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Batch>;
    financeAccountingBatchesPost(params: {
        batch: Batch;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Batch>;
}
export class AccountingUnpostedExpensesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAccountingUnpostedexpensesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAccountingUnpostedexpensesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<UnpostedExpense>>;
    financeAccountingUnpostedexpensesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UnpostedExpense>;
}
export class AccountingUnpostedProcurementsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAccountingUnpostedprocurementCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAccountingUnpostedprocurementGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<UnpostedProcurement>>;
    financeAccountingUnpostedprocurementIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UnpostedProcurement>;
}
export class AccountingUnpostedinvoicesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAccountingUnpostedinvoicesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAccountingUnpostedinvoicesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<UnpostedInvoice>>;
    financeAccountingUnpostedinvoicesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UnpostedInvoice>;
}
export class AgreementAdditionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAgreementsIdAdditionsAdditionIdDelete(params: {
        id: number;
        additionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeAgreementsIdAdditionsAdditionIdGet(params: {
        id: number;
        additionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Addition>;
    financeAgreementsIdAdditionsAdditionIdPatch(params: {
        id: number;
        additionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Addition>;
    financeAgreementsIdAdditionsAdditionIdPut(params: {
        id: number;
        additionId: number;
        addition: Addition;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Addition>;
    financeAgreementsIdAdditionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAgreementsIdAdditionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Addition>>;
    financeAgreementsIdAdditionsPost(params: {
        id: number;
        addition: Addition;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Addition>;
}
export class AgreementAdjustmentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAgreementsIdAdjustmentsAdjustmentIdDelete(params: {
        id: number;
        adjustmentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeAgreementsIdAdjustmentsAdjustmentIdGet(params: {
        id: number;
        adjustmentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Adjustment>;
    financeAgreementsIdAdjustmentsAdjustmentIdPatch(params: {
        id: number;
        adjustmentId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Adjustment>;
    financeAgreementsIdAdjustmentsAdjustmentIdPut(params: {
        id: number;
        adjustmentId: number;
        adjustment: Adjustment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Adjustment>;
    financeAgreementsIdAdjustmentsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAgreementsIdAdjustmentsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Adjustment>>;
    financeAgreementsIdAdjustmentsPost(params: {
        id: number;
        adjustment: Adjustment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Adjustment>;
}
export class AgreementBoardDefaultsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAgreementsIdBoardDefaultsBoardDefaultIdDelete(params: {
        id: number;
        boardDefaultId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeAgreementsIdBoardDefaultsBoardDefaultIdGet(params: {
        id: number;
        boardDefaultId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardDefault>;
    financeAgreementsIdBoardDefaultsBoardDefaultIdPatch(params: {
        id: number;
        boardDefaultId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardDefault>;
    financeAgreementsIdBoardDefaultsBoardDefaultIdPut(params: {
        id: number;
        boardDefaultId: number;
        boardDefault: BoardDefault;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardDefault>;
    financeAgreementsIdBoardDefaultsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAgreementsIdBoardDefaultsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<BoardDefault>>;
    financeAgreementsIdBoardDefaultsPost(params: {
        id: number;
        boardDefault: BoardDefault;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<BoardDefault>;
}
export class AgreementSitesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAgreementsIdSitesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAgreementsIdSitesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementSite>>;
    financeAgreementsIdSitesPost(params: {
        id: number;
        site: AgreementSite;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementSite>;
    financeAgreementsIdSitesSiteIdDelete(params: {
        id: number;
        siteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeAgreementsIdSitesSiteIdGet(params: {
        id: number;
        siteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementSite>;
    financeAgreementsIdSitesSiteIdPatch(params: {
        id: number;
        siteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementSite>;
    financeAgreementsIdSitesSiteIdPut(params: {
        id: number;
        siteId: number;
        site: AgreementSite;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementSite>;
}
export class AgreementTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAgreementsTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAgreementsTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementType>>;
    financeAgreementsTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeAgreementsTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementType>;
    financeAgreementsTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementType>;
    financeAgreementsTypesIdPut(params: {
        id: number;
        agreementType: AgreementType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementType>;
    financeAgreementsTypesPost(params: {
        agreementType: AgreementType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementType>;
}
export class AgreementWorkRoleExclusionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAgreementsIdWorkRoleExclusionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAgreementsIdWorkRoleExclusionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementWorkRoleExclusion>>;
    financeAgreementsIdWorkRoleExclusionsPost(params: {
        id: number;
        workRoleExclusion: AgreementWorkRoleExclusion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkRoleExclusion>;
    financeAgreementsIdWorkRoleExclusionsWorkRoleExclusionIdDelete(params: {
        id: number;
        workRoleExclusionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
}
export class AgreementWorkRolesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAgreementsIdWorkrolesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAgreementsIdWorkrolesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementWorkRole>>;
    financeAgreementsIdWorkrolesPost(params: {
        id: number;
        workRole: AgreementWorkRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkRole>;
    financeAgreementsIdWorkrolesWorkRoleIdDelete(params: {
        id: number;
        workRoleId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeAgreementsIdWorkrolesWorkRoleIdGet(params: {
        id: number;
        workRoleId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkRole>;
    financeAgreementsIdWorkrolesWorkRoleIdPatch(params: {
        id: number;
        workRoleId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkRole>;
    financeAgreementsIdWorkrolesWorkRoleIdPut(params: {
        id: number;
        workRoleId: number;
        workRole: AgreementWorkRole;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkRole>;
}
export class AgreementWorkTypeExclusionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAgreementsIdWorkTypeExclusionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAgreementsIdWorkTypeExclusionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementWorkTypeExclusion>>;
    financeAgreementsIdWorkTypeExclusionsPost(params: {
        id: number;
        workTypeExclusion: AgreementWorkTypeExclusion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkTypeExclusion>;
    financeAgreementsIdWorkTypeExclusionsWorkTypeExclusionIdDelete(params: {
        id: number;
        workTypeExclusionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
}
export class AgreementWorkTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAgreementsIdWorktypesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAgreementsIdWorktypesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AgreementWorkType>>;
    financeAgreementsIdWorktypesPost(params: {
        id: number;
        workType: AgreementWorkType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkType>;
    financeAgreementsIdWorktypesWorktypeIdDelete(params: {
        id: number;
        worktypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeAgreementsIdWorktypesWorktypeIdGet(params: {
        id: number;
        worktypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkType>;
    financeAgreementsIdWorktypesWorktypeIdPatch(params: {
        id: number;
        worktypeId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkType>;
    financeAgreementsIdWorktypesWorktypeIdPut(params: {
        id: number;
        worktypeId: number;
        workType: AgreementWorkType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<AgreementWorkType>;
}
export class AgreementsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeAgreementsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAgreementsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Agreement>>;
    financeAgreementsIdConfigurationsConfigurationIdDelete(params: {
        id: number;
        configurationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeAgreementsIdConfigurationsConfigurationIdGet(params: {
        id: number;
        configurationId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationReference>;
    financeAgreementsIdConfigurationsCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeAgreementsIdConfigurationsGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConfigurationReference>>;
    financeAgreementsIdConfigurationsPost(params: {
        id: number;
        configuration: ConfigurationReference;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationReference>;
    financeAgreementsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeAgreementsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Agreement>;
    financeAgreementsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Agreement>;
    financeAgreementsIdPut(params: {
        id: number;
        agreement: Agreement;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Agreement>;
    financeAgreementsPost(params: {
        agreement: Agreement;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Agreement>;
}
export class CurrenciesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeCurrenciesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeCurrenciesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Currency>>;
    financeCurrenciesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeCurrenciesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Currency>;
    financeCurrenciesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Currency>;
    financeCurrenciesIdPut(params: {
        id: number;
        currency: Currency;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Currency>;
    financeCurrenciesPost(params: {
        currency: Currency;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Currency>;
}
export class InvoicePaymentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeInvoicesIdPaymentsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Payment>>;
    financeInvoicesIdPaymentsPaymentIdDelete(params: {
        id: number;
        paymentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeInvoicesIdPaymentsPaymentIdGet(params: {
        id: number;
        paymentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Payment>;
    financeInvoicesIdPaymentsPaymentIdPatch(params: {
        id: number;
        paymentId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Payment>;
    financeInvoicesIdPaymentsPaymentIdPut(params: {
        id: number;
        paymentId: number;
        payment: Payment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Payment>;
    financeInvoicesIdPaymentsPost(params: {
        id: number;
        payment: Payment;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Payment>;
}
export class InvoicesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    financeInvoicesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    financeInvoicesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Invoice>>;
    financeInvoicesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeInvoicesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Invoice>;
    financeInvoicesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Invoice>;
    financeInvoicesIdPdfGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    financeInvoicesIdPut(params: {
        id: number;
        invoice: Invoice;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Invoice>;
    financeInvoicesPost(params: {
        invoice: Invoice;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Invoice>;
}
}
declare module 'connectwise-rest-api/release/api/financeAPI' {
import alias = require('~connectwise-rest-api/release/api/financeAPI');
export = alias;
}

// Generated by typings
// Source: release/api/marketingAPI.d.ts
declare module '~connectwise-rest-api/release/api/marketingAPI' {
export interface ActivityReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Campaign {
    "id"?: number;
    "name": string;
    "type": CampaignTypeReference;
    "subType": CampaignSubTypeReference;
    "status"?: CampaignStatusReference;
    "startDate": Date;
    "endDate"?: Date;
    "locationId"?: number;
    "member"?: MemberReference;
    "inactive"?: boolean;
    "inactiveDaysAfterEnd"?: number;
    "notes"?: string;
    "defaultGroup"?: GroupReference;
    "marketingManagerDefaultTrackId"?: number;
    "opportunityDefaultTrackId"?: number;
    "impressions"?: number;
    "budgetRevenue"?: number;
    "budgetCost"?: number;
    "actualCost"?: number;
    "budgetGrossMargin"?: number;
    "budgetROI"?: number;
    "actualRevenue"?: number;
    "actualGrossMargin"?: number;
    "actualROI"?: number;
    "emailsSent"?: number;
    "info"?: Metadata;
}
export interface CampaignAudit {
    "id"?: number;
    "emailsSent": number;
    "emailsUnsent"?: number;
    "documentsCreated"?: number;
    "emailSubject"?: string;
    "group"?: GroupReference;
    "campaignId"?: number;
    "createdBy"?: string;
    "dateCreated"?: string;
}
export interface CampaignStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "info"?: Metadata;
}
export interface CampaignStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CampaignSubType {
    "id"?: number;
    "typeId"?: number;
    "name": string;
    "info"?: Metadata;
}
export interface CampaignSubTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CampaignType {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "info"?: Metadata;
}
export interface CampaignTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Count {
    "count"?: number;
}
export interface EmailOpened {
    "id"?: number;
    "campaignId"?: number;
    "contactId": number;
    "dateOpened"?: Date;
}
export interface Error {
    "code"?: string;
    "message"?: string;
    "errors"?: Array<ValidationError>;
}
export interface FormSubmitted {
    "id"?: number;
    "campaignId"?: number;
    "contactId": number;
    "dateSubmitted"?: Date;
    "url": string;
    "queryString"?: string;
    "pageType"?: string;
    "pageSubType"?: string;
    "topic"?: string;
    "version"?: string;
    "status"?: string;
}
export interface Group {
    "id"?: number;
    "name": string;
    "publicDescription"?: string;
    "publicFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "info"?: Metadata;
}
export interface GroupReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface LinkClicked {
    "id"?: number;
    "campaignId"?: number;
    "contactId": number;
    "dateClicked"?: Date;
    "url": string;
    "queryString"?: string;
}
export interface MarketingCompany {
    "id": number;
    "groupId"?: number;
    "defaultContactFlag"?: boolean;
    "allContactsFlag"?: boolean;
    "unsubscribeFlag"?: boolean;
    "info"?: Metadata;
}
export interface MarketingContact {
    "id": number;
    "groupId"?: number;
    "note"?: string;
    "unsubscribeFlag"?: boolean;
    "info"?: Metadata;
}
export interface MemberReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface Metadata {
}
export interface OpportunityReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface PatchOperation {
    "op"?: string;
    "path"?: string;
    "value"?: string;
}
export interface ValidationError {
    "code"?: string;
    "message"?: string;
    "resource"?: string;
    "field"?: string;
}
export class CampaignAuditsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    marketingCampaignsIdAuditsAuditIdDelete(params: {
        id: number;
        auditId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    marketingCampaignsIdAuditsAuditIdGet(params: {
        id: number;
        auditId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignAudit>;
    marketingCampaignsIdAuditsAuditIdPatch(params: {
        id: number;
        auditId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignAudit>;
    marketingCampaignsIdAuditsAuditIdPut(params: {
        id: number;
        auditId: number;
        campaignAudit: CampaignAudit;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignAudit>;
    marketingCampaignsIdAuditsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingCampaignsIdAuditsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CampaignAudit>>;
    marketingCampaignsIdAuditsPost(params: {
        id: number;
        campaignAudit: CampaignAudit;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignAudit>;
}
export class CampaignEmailsOpenedApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    marketingCampaignsIdEmailsOpenedCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingCampaignsIdEmailsOpenedEmailOpenedIdDelete(params: {
        id: number;
        emailOpenedId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    marketingCampaignsIdEmailsOpenedEmailOpenedIdGet(params: {
        id: number;
        emailOpenedId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailOpened>;
    marketingCampaignsIdEmailsOpenedEmailOpenedIdPatch(params: {
        id: number;
        emailOpenedId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailOpened>;
    marketingCampaignsIdEmailsOpenedEmailOpenedIdPut(params: {
        id: number;
        emailOpenedId: number;
        emailOpened: EmailOpened;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailOpened>;
    marketingCampaignsIdEmailsOpenedGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<EmailOpened>>;
    marketingCampaignsIdEmailsOpenedPost(params: {
        id: number;
        emailOpened: EmailOpened;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<EmailOpened>;
}
export class CampaignFormsSubmittedApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    marketingCampaignsIdFormsSubmittedCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingCampaignsIdFormsSubmittedFormSubmittedIdDelete(params: {
        id: number;
        formSubmittedId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    marketingCampaignsIdFormsSubmittedFormSubmittedIdGet(params: {
        id: number;
        formSubmittedId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<FormSubmitted>;
    marketingCampaignsIdFormsSubmittedFormSubmittedIdPatch(params: {
        id: number;
        formSubmittedId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<FormSubmitted>;
    marketingCampaignsIdFormsSubmittedFormSubmittedIdPut(params: {
        id: number;
        formSubmittedId: number;
        formSubmitted: FormSubmitted;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<FormSubmitted>;
    marketingCampaignsIdFormsSubmittedGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<FormSubmitted>>;
    marketingCampaignsIdFormsSubmittedPost(params: {
        id: number;
        formSubmitted: FormSubmitted;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<FormSubmitted>;
}
export class CampaignLinksClickedApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    marketingCampaignsIdLinksClickedCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingCampaignsIdLinksClickedGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<LinkClicked>>;
    marketingCampaignsIdLinksClickedLinkClickedIdDelete(params: {
        id: number;
        linkClickedId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    marketingCampaignsIdLinksClickedLinkClickedIdGet(params: {
        id: number;
        linkClickedId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LinkClicked>;
    marketingCampaignsIdLinksClickedLinkClickedIdPatch(params: {
        id: number;
        linkClickedId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LinkClicked>;
    marketingCampaignsIdLinksClickedLinkClickedIdPut(params: {
        id: number;
        linkClickedId: number;
        linkClicked: LinkClicked;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LinkClicked>;
    marketingCampaignsIdLinksClickedPost(params: {
        id: number;
        linkClicked: LinkClicked;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<LinkClicked>;
}
export class CampaignStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    marketingCampaignsStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingCampaignsStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CampaignStatus>>;
    marketingCampaignsStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    marketingCampaignsStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignStatus>;
    marketingCampaignsStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignStatus>;
    marketingCampaignsStatusesIdPut(params: {
        id: number;
        campaignStatus: CampaignStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignStatus>;
    marketingCampaignsStatusesPost(params: {
        campaignStatus: CampaignStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignStatus>;
}
export class CampaignSubTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    marketingCampaignsTypesIdSubTypesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingCampaignsTypesIdSubTypesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CampaignSubType>>;
    marketingCampaignsTypesIdSubTypesPost(params: {
        id: number;
        campaignSubType: CampaignSubType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignSubType>;
    marketingCampaignsTypesIdSubTypesSubTypeIdDelete(params: {
        id: number;
        subTypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    marketingCampaignsTypesIdSubTypesSubTypeIdGet(params: {
        id: number;
        subTypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignSubType>;
    marketingCampaignsTypesIdSubTypesSubTypeIdPatch(params: {
        id: number;
        subTypeId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignSubType>;
    marketingCampaignsTypesIdSubTypesSubTypeIdPut(params: {
        id: number;
        subTypeId: number;
        campaignSubType: CampaignSubType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignSubType>;
}
export class CampaignTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    marketingCampaignsTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingCampaignsTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CampaignType>>;
    marketingCampaignsTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    marketingCampaignsTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignType>;
    marketingCampaignsTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignType>;
    marketingCampaignsTypesIdPut(params: {
        id: number;
        campaignType: CampaignType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignType>;
    marketingCampaignsTypesPost(params: {
        campaignType: CampaignType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CampaignType>;
}
export class CampaignsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    marketingCampaignsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingCampaignsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Campaign>>;
    marketingCampaignsIdActivitiesCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingCampaignsIdActivitiesGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ActivityReference>>;
    marketingCampaignsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    marketingCampaignsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Campaign>;
    marketingCampaignsIdOpportunitiesCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingCampaignsIdOpportunitiesGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityReference>>;
    marketingCampaignsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Campaign>;
    marketingCampaignsIdPut(params: {
        id: number;
        campaign: Campaign;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Campaign>;
    marketingCampaignsPost(params: {
        campaign: Campaign;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Campaign>;
}
export class GroupCompaniesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    marketingGroupsIdCompaniesCompanyIdDelete(params: {
        id: number;
        companyId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    marketingGroupsIdCompaniesCompanyIdGet(params: {
        id: number;
        companyId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingCompany>;
    marketingGroupsIdCompaniesCompanyIdPatch(params: {
        id: number;
        companyId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingCompany>;
    marketingGroupsIdCompaniesCompanyIdPut(params: {
        id: number;
        companyId: number;
        marketingCompany: MarketingCompany;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingCompany>;
    marketingGroupsIdCompaniesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingGroupsIdCompaniesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<MarketingCompany>>;
    marketingGroupsIdCompaniesPost(params: {
        id: number;
        marketingCompany: MarketingCompany;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingCompany>;
}
export class GroupContactsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    marketingGroupsIdContactsContactIdDelete(params: {
        id: number;
        contactId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    marketingGroupsIdContactsContactIdGet(params: {
        id: number;
        contactId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingContact>;
    marketingGroupsIdContactsContactIdPatch(params: {
        id: number;
        contactId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingContact>;
    marketingGroupsIdContactsContactIdPut(params: {
        id: number;
        contactId: number;
        marketingContact: MarketingContact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingContact>;
    marketingGroupsIdContactsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingGroupsIdContactsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<MarketingContact>>;
    marketingGroupsIdContactsPost(params: {
        id: number;
        marketingContact: MarketingContact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MarketingContact>;
}
export class GroupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    marketingGroupsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    marketingGroupsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Group>>;
    marketingGroupsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    marketingGroupsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Group>;
    marketingGroupsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Group>;
    marketingGroupsIdPut(params: {
        id: number;
        group: Group;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Group>;
    marketingGroupsPost(params: {
        group: Group;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Group>;
}
}
declare module 'connectwise-rest-api/release/api/marketingAPI' {
import alias = require('~connectwise-rest-api/release/api/marketingAPI');
export = alias;
}

// Generated by typings
// Source: release/api/procurementAPI.d.ts
declare module '~connectwise-rest-api/release/api/procurementAPI' {
export interface AgreementReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface BillingTermsReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CatalogComponent {
    "id"?: number;
    "sequenceNumber"?: number;
    "quantity": number;
    "catalogItem": CatalogItemReference;
    "hidePriceFlag"?: boolean;
    "hideItemIdentifierFlag"?: boolean;
    "hideDescriptionFlag"?: boolean;
    "hideQuantityFlag"?: boolean;
    "parentCatalogItem"?: CatalogItemReference;
    "price"?: number;
    "cost"?: number;
    "info"?: Metadata;
}
export interface CatalogItem {
    "id"?: number;
    "identifier": string;
    "description": string;
    "inactiveFlag"?: boolean;
    "subcategory": ProductSubCategoryReference;
    "type": ProductTypeReference;
    "productClass": ProductClassEnum;
    "serializedFlag"?: boolean;
    "serializedCostFlag"?: boolean;
    "phaseProductFlag"?: boolean;
    "unitOfMeasure"?: UnitOfMeasureReference;
    "minStockLevel"?: number;
    "price"?: number;
    "cost"?: number;
    "priceAttribute"?: PriceAttributeEnum;
    "taxableFlag"?: boolean;
    "customerDescription": string;
    "manufacturer"?: ManufacturerReference;
    "manufacturerPartNumber"?: string;
    "vendor"?: CompanyReference;
    "vendorSku"?: string;
    "notes"?: string;
    "integrationXRef"?: string;
    "dateEntered"?: string;
    "category"?: ProductCategoryReference;
    "info"?: Metadata;
}
export enum ProductClassEnum {
    Agreement,
    Bundle,
    Inventory,
    NonInventory,
    Service,
}
export enum PriceAttributeEnum {
    FixedFee,
    NotToExceed,
    TimeAndMaterials,
    OverrideRate,
}
export interface CatalogItemReference {
    "id"?: number;
    "identifier"?: string;
    "info"?: Metadata;
}
export interface Category {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "priceLevelXref"?: string;
    "integrationXref"?: string;
    "locationIds"?: Array<number>;
    "addAllLocations"?: boolean;
    "removeAllLocations"?: boolean;
    "info"?: Metadata;
}
export interface CompanyReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface ContactReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Count {
    "count"?: number;
}
export interface CountryReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface EntityTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Error {
    "code"?: string;
    "message"?: string;
    "errors"?: Array<ValidationError>;
}
export interface IvItemReference {
    "id"?: number;
    "identifier"?: string;
    "info"?: Metadata;
}
export interface Manufacturer {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "info"?: Metadata;
}
export interface ManufacturerReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Metadata {
}
export interface PatchOperation {
    "op"?: string;
    "path"?: string;
    "value"?: string;
}
export interface PricingBreak {
    "id"?: number;
    "detailId"?: number;
    "amount"?: number;
    "quantityStart"?: number;
    "quantityEnd"?: number;
    "priceMethod": PriceMethodEnum;
    "info"?: Metadata;
}
export interface PricingDetail {
    "id"?: number;
    "product"?: CatalogItemReference;
    "category"?: ProductCategoryReference;
    "subCategory"?: ProductSubCategoryReference;
    "startDate": Date;
    "endDate"?: Date;
    "info"?: Metadata;
}
export interface PricingSchedule {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "defaultFlag"?: boolean;
    "companies"?: Array<number>;
    "setAllCompaniesFlag"?: boolean;
    "removeAllCompaniesFlag"?: boolean;
    "info"?: Metadata;
}
export interface ProductCategoryReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProductComponent {
    "id"?: number;
    "sequenceNumber"?: number;
    "quantity": number;
    "catalogItem": CatalogItemReference;
    "hidePriceFlag"?: boolean;
    "hideItemIdentifierFlag"?: boolean;
    "hideDescriptionFlag"?: boolean;
    "hideQuantityFlag"?: boolean;
    "vendor"?: CompanyReference;
    "parentProductItem"?: ProductItemReference;
    "productItem"?: ProductItemReference;
    "price"?: number;
    "cost"?: number;
    "info"?: Metadata;
}
export interface ProductItem {
    "id"?: number;
    "catalogItem": CatalogItemReference;
    "chargeToId": number;
    "chargeToType": ChargeToTypeEnum;
    "description"?: string;
    "sequenceNumber"?: number;
    "quantity"?: number;
    "price"?: number;
    "cost"?: number;
    "discount"?: number;
    "priceMethod"?: PriceMethodEnum;
    "billableOption": BillableOptionEnum;
    "agreement"?: AgreementReference;
    "locationId"?: number;
    "businessUnitId"?: number;
    "vendor"?: CompanyReference;
    "taxableFlag"?: boolean;
    "dropshipFlag"?: boolean;
    "specialOrderFlag"?: boolean;
    "phaseProductFlag"?: boolean;
    "cancelledFlag"?: boolean;
    "quantityCancelled"?: number;
    "cancelledReason"?: string;
    "customerDescription"?: string;
    "internalNotes"?: string;
    "productSuppliedFlag"?: boolean;
    "subContractorShipToId"?: number;
    "subContractorAmountLimit"?: number;
    "recurring"?: ProductRecurring;
    "sla"?: SLAReference;
    "entityType"?: EntityTypeReference;
    "forecastDetailId"?: number;
    "cancelledBy"?: number;
    "cancelledDate"?: Date;
    "warehouse"?: string;
    "warehouseBin"?: string;
    "purchaseDate"?: Date;
    "integrationXRef"?: string;
    "listPrice"?: number;
    "info"?: Metadata;
    "bypassForecastUpdate"?: boolean;
}
export enum ChargeToTypeEnum {
    Ticket,
    Project,
    Invoice,
    Opportunity,
    SalesOrder,
}
export enum PriceMethodEnum {
    FlatRateForRange,
    PercentMarkupFromCost,
    PercentMarkdownFromPrice,
    PricePerUnit,
}
export enum BillableOptionEnum {
    Billable,
    DoNotBill,
    NoCharge,
}
export interface ProductItemReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProductPickingShippingDetail {
    "id"?: number;
    "pickedQuantity": number;
    "shippedQuantity": number;
    "warehouse": WarehouseReference;
    "warehouseBin": WarehouseBinReference;
    "shipmentMethod"?: ShipmentMethodReference;
    "serialNumber"?: string;
    "serialNumberIds"?: Array<number>;
    "trackingNumber"?: string;
    "productItem"?: ProductItemReference;
    "lineNumber"?: number;
    "quantity"?: number;
    "info"?: Metadata;
}
export interface ProductRecurring {
    "recurringRevenue": number;
    "recurringCost": number;
    "startDate": Date;
    "endDate": Date;
    "billCycleId": number;
    "cycles": number;
    "cycleType": CycleTypeEnum;
}
export enum CycleTypeEnum {
    CalendarYear,
    ContractYear,
}
export interface ProductSubCategoryReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProductType {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "typeXref"?: TypeXrefEnum;
    "info"?: Metadata;
}
export enum TypeXrefEnum {
    InventoryPart,
    NonInventoryPart,
    OtherCharge,
    Service,
}
export interface ProductTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface PurchaseOrder {
    "id"?: number;
    "info"?: Metadata;
    "businessUnitId"?: number;
    "cancelReason"?: string;
    "closedFlag"?: boolean;
    "customerCity"?: string;
    "customerCompany"?: CompanyReference;
    "customerContact"?: ContactReference;
    "customerCountry"?: CountryReference;
    "customerExtension"?: string;
    "customerName"?: string;
    "customerPhone"?: string;
    "customerSite"?: SiteReference;
    "customerSiteName"?: string;
    "customerState"?: string;
    "customerStreetLine1"?: string;
    "customerStreetLine2"?: string;
    "customerZip"?: string;
    "dateClosed"?: Date;
    "dropShipCustomerFlag"?: boolean;
    "enteredBy"?: string;
    "freightCost"?: number;
    "freightPackingSlip"?: string;
    "freightTaxTotal"?: number;
    "internalNotes"?: string;
    "locationId": number;
    "poDate"?: Date;
    "poNumber"?: string;
    "salesTax"?: number;
    "shipmentDate"?: Date;
    "shipmentMethod"?: ShipmentMethodReference;
    "shippingInstructions"?: string;
    "status": PurchaseOrderStatusReference;
    "subTotal"?: number;
    "taxCode"?: TaxCodeReference;
    "taxFreightFlag"?: boolean;
    "taxPoFlag"?: boolean;
    "terms": BillingTermsReference;
    "total"?: number;
    "trackingNumber"?: string;
    "updateShipmentInfo"?: boolean;
    "updateVendorOrderNumber"?: boolean;
    "vendorCompany": CompanyReference;
    "vendorContact"?: ContactReference;
    "vendorInvoiceDate"?: Date;
    "vendorInvoiceNumber"?: string;
    "vendorOrderNumber"?: string;
    "vendorSite"?: SiteReference;
    "warehouse"?: WarehouseReference;
}
export interface PurchaseOrderLineItem {
    "id"?: number;
    "backorderedFlag"?: boolean;
    "canceledBy"?: string;
    "canceledFlag"?: boolean;
    "canceledReason"?: string;
    "closedFlag"?: boolean;
    "dateCanceled"?: Date;
    "description": string;
    "displayInternalNotesFlag"?: boolean;
    "expectedShipDate"?: Date;
    "internalNotes"?: string;
    "lineNumber": number;
    "packingSlip"?: string;
    "product": IvItemReference;
    "purchaseOrderId"?: number;
    "quantity": number;
    "receivedQuantity"?: number;
    "serialNumbers"?: string;
    "shipDate"?: Date;
    "shipmentMethod"?: ShipmentMethodReference;
    "tax"?: number;
    "trackingNumber"?: string;
    "unitCost"?: number;
    "unitOfMeasure": UnitOfMeasureReference;
    "vendorOrderNumber"?: string;
    "warehouse"?: WarehouseReference;
    "warehouseBin"?: WarehouseBinReference;
    "info"?: Metadata;
}
export interface PurchaseOrderStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface SLAReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ShipmentMethod {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "trackingUrl"?: string;
    "shippingType"?: ShippingTypeEnum;
    "info"?: Metadata;
}
export enum ShippingTypeEnum {
    None,
    FedExTwoDay,
    FedExPriority,
    FedExGround,
    UpsNextDay,
    UpsSecondDay,
    UpsGround,
    CourierService,
    UspsPriority,
    UspsExpress,
}
export interface ShipmentMethodReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface SiteReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface SubCategory {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "info"?: Metadata;
}
export interface TaxCodeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface UnitOfMeasureReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ValidationError {
    "code"?: string;
    "message"?: string;
    "resource"?: string;
    "field"?: string;
}
export interface WarehouseBinReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface WarehouseReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export class CatalogComponentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementCatalogIdComponentsComponentIdDelete(params: {
        id: number;
        componentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementCatalogIdComponentsComponentIdGet(params: {
        id: number;
        componentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogComponent>;
    procurementCatalogIdComponentsComponentIdPatch(params: {
        id: number;
        componentId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogComponent>;
    procurementCatalogIdComponentsComponentIdPut(params: {
        id: number;
        componentId: number;
        catalogComponent: CatalogComponent;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogComponent>;
    procurementCatalogIdComponentsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementCatalogIdComponentsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CatalogComponent>>;
    procurementCatalogIdComponentsPost(params: {
        id: number;
        catalogComponent: CatalogComponent;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogComponent>;
}
export class CatalogsItemApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementCatalogCatalogItemIdentifierQuantityOnHandGet(params: {
        catalogItemIdentifier: string;
        warehouseBinId?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementCatalogCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementCatalogGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CatalogItem>>;
    procurementCatalogIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementCatalogIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogItem>;
    procurementCatalogIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogItem>;
    procurementCatalogIdPut(params: {
        id: number;
        catalogItem: CatalogItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogItem>;
    procurementCatalogPost(params: {
        catalogItem: CatalogItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CatalogItem>;
}
export class CategoriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementCategoriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementCategoriesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Category>>;
    procurementCategoriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementCategoriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Category>;
    procurementCategoriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Category>;
    procurementCategoriesIdPut(params: {
        id: number;
        category: Category;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Category>;
    procurementCategoriesPost(params: {
        category: Category;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Category>;
}
export class ManufacturersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementManufacturersCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementManufacturersGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Manufacturer>>;
    procurementManufacturersIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementManufacturersIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Manufacturer>;
    procurementManufacturersIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Manufacturer>;
    procurementManufacturersIdPut(params: {
        id: number;
        manufacturer: Manufacturer;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Manufacturer>;
    procurementManufacturersPost(params: {
        manufacturer: Manufacturer;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Manufacturer>;
}
export class PricingBreaksApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdDelete(params: {
        schedId: number;
        detailId: number;
        breakId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdGet(params: {
        schedId: number;
        detailId: number;
        breakId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingBreak>;
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPatch(params: {
        schedId: number;
        detailId: number;
        breakId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingBreak>;
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksBreakIdPut(params: {
        schedId: number;
        detailId: number;
        breakId: number;
        pricingBreak: PricingBreak;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingBreak>;
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksCountGet(params: {
        schedId: number;
        detailId: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksGet(params: {
        schedId: number;
        detailId: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PricingBreak>>;
    procurementPricingschedulesSchedIdDetailsDetailIdBreaksPost(params: {
        schedId: number;
        detailId: number;
        pricingBreak: PricingBreak;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingBreak>;
}
export class PricingDetailsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementPricingschedulesIdDetailsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementPricingschedulesIdDetailsDetailIDDelete(params: {
        id: number;
        detailID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementPricingschedulesIdDetailsDetailIDGet(params: {
        id: number;
        detailID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingDetail>;
    procurementPricingschedulesIdDetailsDetailIDPatch(params: {
        id: number;
        detailID: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingDetail>;
    procurementPricingschedulesIdDetailsDetailIDPut(params: {
        id: number;
        detailID: number;
        pricingDetail: PricingDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingDetail>;
    procurementPricingschedulesIdDetailsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PricingDetail>>;
    procurementPricingschedulesIdDetailsPost(params: {
        id: number;
        pricingDetail: PricingDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingDetail>;
}
export class PricingSchedulesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementPricingschedulesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementPricingschedulesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PricingSchedule>>;
    procurementPricingschedulesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementPricingschedulesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingSchedule>;
    procurementPricingschedulesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingSchedule>;
    procurementPricingschedulesIdPut(params: {
        id: number;
        pricingSchedule: PricingSchedule;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingSchedule>;
    procurementPricingschedulesPost(params: {
        pricingSchedule: PricingSchedule;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PricingSchedule>;
}
export class ProductComponentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementProductsIdComponentsComponentIdDelete(params: {
        id: number;
        componentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementProductsIdComponentsComponentIdGet(params: {
        id: number;
        componentId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductComponent>>;
    procurementProductsIdComponentsComponentIdPatch(params: {
        id: number;
        componentId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductComponent>>;
    procurementProductsIdComponentsComponentIdPut(params: {
        id: number;
        componentId: number;
        productComponent: ProductComponent;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductComponent>>;
    procurementProductsIdComponentsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementProductsIdComponentsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductComponent>>;
    procurementProductsIdComponentsPost(params: {
        id: number;
        productComponent: ProductComponent;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductComponent>>;
}
export class ProductPickingShippingDetailsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementProductsIdPickingShippingDetailsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementProductsIdPickingShippingDetailsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductPickingShippingDetail>>;
    procurementProductsIdPickingShippingDetailsPickingShippingDetailIdDelete(params: {
        id: number;
        pickingShippingDetailId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementProductsIdPickingShippingDetailsPickingShippingDetailIdGet(params: {
        id: number;
        pickingShippingDetailId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductPickingShippingDetail>>;
    procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPatch(params: {
        id: number;
        pickingShippingDetailId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductPickingShippingDetail>>;
    procurementProductsIdPickingShippingDetailsPickingShippingDetailIdPut(params: {
        id: number;
        pickingShippingDetailId: number;
        productPickingShippingDetails: ProductPickingShippingDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductPickingShippingDetail>>;
    procurementProductsIdPickingShippingDetailsPost(params: {
        id: number;
        productPickingShippingDetails: ProductPickingShippingDetail;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductPickingShippingDetail>>;
}
export class ProductTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductType>>;
    procurementTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductType>;
    procurementTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductType>;
    procurementTypesIdPut(params: {
        id: number;
        productTypes: ProductType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductType>;
    procurementTypesPost(params: {
        productTypes: ProductType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductType>;
}
export class ProductsItemApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementProductsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementProductsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductItem>>;
    procurementProductsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementProductsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductItem>;
    procurementProductsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductItem>;
    procurementProductsIdPut(params: {
        id: number;
        productItem: ProductItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductItem>;
    procurementProductsPost(params: {
        productItem: ProductItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProductItem>;
}
export class PurchaseOrderLineItemsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementPurchaseordersIdPurchaseorderlineitemsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementPurchaseordersIdPurchaseorderlineitemsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PurchaseOrderLineItem>>;
    procurementPurchaseordersIdPurchaseorderlineitemsLineItemIdDelete(params: {
        id: number;
        lineItemId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementPurchaseordersIdPurchaseorderlineitemsLineItemIdGet(params: {
        id: number;
        lineItemId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderLineItem>;
    procurementPurchaseordersIdPurchaseorderlineitemsLineItemIdPatch(params: {
        id: number;
        lineItemId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderLineItem>;
    procurementPurchaseordersIdPurchaseorderlineitemsLineItemIdPut(params: {
        id: number;
        lineItemId: number;
        purchaseOrderLineItem: PurchaseOrderLineItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderLineItem>;
    procurementPurchaseordersIdPurchaseorderlineitemsPost(params: {
        id: number;
        purchaseOrderLineItem: PurchaseOrderLineItem;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrderLineItem>;
}
export class PurchaseOrdersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementPurchaseordersCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementPurchaseordersGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<PurchaseOrder>>;
    procurementPurchaseordersIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementPurchaseordersIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrder>;
    procurementPurchaseordersIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrder>;
    procurementPurchaseordersIdPut(params: {
        id: number;
        purchaseOrder: PurchaseOrder;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrder>;
    procurementPurchaseordersPost(params: {
        purchaseOrder: PurchaseOrder;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<PurchaseOrder>;
}
export class ShipmentMethodsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementShipmentmethodsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementShipmentmethodsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ShipmentMethod>>;
    procurementShipmentmethodsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementShipmentmethodsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ShipmentMethod>;
    procurementShipmentmethodsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ShipmentMethod>;
    procurementShipmentmethodsIdPut(params: {
        id: number;
        shipmentMethod: ShipmentMethod;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ShipmentMethod>;
    procurementShipmentmethodsPost(params: {
        shipmentMethod: ShipmentMethod;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ShipmentMethod>;
}
export class SubCategoriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    procurementCategoriesIdSubcategoriesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    procurementCategoriesIdSubcategoriesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SubCategory>>;
    procurementCategoriesIdSubcategoriesPost(params: {
        id: number;
        subCategory: SubCategory;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SubCategory>;
    procurementCategoriesIdSubcategoriesSubcategoryIDDelete(params: {
        id: number;
        subcategoryID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    procurementCategoriesIdSubcategoriesSubcategoryIDGet(params: {
        id: number;
        subcategoryID: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SubCategory>;
    procurementCategoriesIdSubcategoriesSubcategoryIDPatch(params: {
        id: number;
        subcategoryID: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SubCategory>;
    procurementCategoriesIdSubcategoriesSubcategoryIDPut(params: {
        id: number;
        subcategoryID: number;
        subCategory: SubCategory;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SubCategory>;
}
}
declare module 'connectwise-rest-api/release/api/procurementAPI' {
import alias = require('~connectwise-rest-api/release/api/procurementAPI');
export = alias;
}

// Generated by typings
// Source: release/api/projectAPI.d.ts
declare module '~connectwise-rest-api/release/api/projectAPI' {
export interface AgreementReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CompanyReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface ContactReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Count {
    "value"?: number;
}
export interface Error {
    "code"?: string;
    "message"?: string;
    "errors"?: Array<ValidationError>;
}
export interface MemberReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface Metadata {
}
export interface NoteTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface OpportunityReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface PatchOperation {
    "op"?: string;
    "path"?: string;
    "value"?: string;
}
export interface PhaseStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Project {
    "id"?: number;
    "name": string;
    "company": CompanyReference;
    "site"?: SiteReference;
    "opportunity"?: OpportunityReference;
    "contact"?: ContactReference;
    "manager"?: MemberReference;
    "type"?: ProjectTypeReference;
    "board": ProjectBoardReference;
    "status"?: ProjectStatusReference;
    "agreement"?: AgreementReference;
    "billingMethod": BillingMethodEnum;
    "billingAmount"?: number;
    "estimatedTimeRevenue"?: number;
    "estimatedExpenseRevenue"?: number;
    "estimatedProductRevenue"?: number;
    "estimatedStart": Date;
    "estimatedEnd": Date;
    "estimatedHours"?: number;
    "description"?: string;
    "timeApprover"?: MemberReference;
    "expenseApprover"?: MemberReference;
    "budgetAnalysis"?: BudgetAnalysisEnum;
    "budgetFlag"?: boolean;
    "billingRateType"?: BillingRateTypeEnum;
    "billTime"?: BillTimeEnum;
    "billExpenses"?: BillExpensesEnum;
    "billProducts"?: BillProductsEnum;
    "downpayment"?: number;
    "restrictDownPaymentFlag"?: boolean;
    "billingAttention"?: string;
    "customerPO"?: string;
    "billProjectAfterClosedFlag"?: boolean;
    "billUnapprovedTimeAndExpense"?: boolean;
    "scheduledHours"?: number;
    "scheduledStart"?: string;
    "scheduledEnd"?: string;
    "actualHours"?: number;
    "actualStart"?: string;
    "actualEnd"?: string;
    "budgetHours"?: number;
    "projectTemplateId"?: number;
    "locationId"?: number;
    "businessUnitId"?: number;
    "shipToCompany"?: CompanyReference;
    "shipToContact"?: ContactReference;
    "shipToSite"?: SiteReference;
    "billToCompany"?: CompanyReference;
    "billToContact"?: ContactReference;
    "billToSite"?: SiteReference;
    "info"?: Metadata;
}
export enum BudgetAnalysisEnum {
    ActualHours,
    BillableHours,
}
export enum BillingRateTypeEnum {
    WorkRole,
    StaffMember,
}
export interface ProjectBoardReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProjectContact {
    "id"?: number;
    "projectId"?: number;
    "contact": ContactReference;
    "info"?: Metadata;
}
export interface ProjectNote {
    "id"?: number;
    "projectId"?: number;
    "text": string;
    "type"?: NoteTypeReference;
    "flagged"?: boolean;
    "info"?: Metadata;
}
export interface ProjectPhase {
    "id"?: number;
    "projectId"?: number;
    "description": string;
    "board"?: ProjectBoardReference;
    "status"?: PhaseStatusReference;
    "agreement"?: AgreementReference;
    "opportunity"?: OpportunityReference;
    "parentPhase"?: ProjectPhaseReference;
    "wbsCode"?: string;
    "billTime"?: BillTimeEnum;
    "billExpenses"?: BillExpensesEnum;
    "billProducts"?: BillProductsEnum;
    "markAsMilestoneFlag"?: boolean;
    "notes"?: string;
    "deadlineDate"?: Date;
    "billSeparatelyFlag"?: boolean;
    "billingMethod"?: BillingMethodEnum;
    "scheduledHours"?: number;
    "scheduledStart"?: string;
    "scheduledEnd"?: string;
    "actualHours"?: number;
    "actualStart"?: string;
    "actualEnd"?: string;
    "budgetHours"?: number;
    "locationId"?: number;
    "businessUnitId"?: number;
    "info"?: Metadata;
}
export enum BillTimeEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export enum BillExpensesEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export enum BillProductsEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export enum BillingMethodEnum {
    ActualRates,
    FixedFee,
    NotToExceed,
    OverrideRate,
}
export interface ProjectPhaseReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProjectRoleReference {
    "id"?: number;
    "identifier"?: string;
    "info"?: Metadata;
}
export interface ProjectStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProjectTeamMember {
    "id"?: number;
    "projectId"?: number;
    "hours"?: number;
    "member": MemberReference;
    "projectRole": ProjectRoleReference;
    "workRole"?: WorkRoleReference;
    "startDate"?: Date;
    "endDate"?: Date;
    "info"?: Metadata;
}
export interface ProjectTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface SiteReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ValidationError {
    "code"?: string;
    "message"?: string;
    "resource"?: string;
    "field"?: string;
}
export interface WorkRoleReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export class ProjectContactsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    projectProjectsIdContactsContactIdDelete(params: {
        id: number;
        contactId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    projectProjectsIdContactsContactIdGet(params: {
        id: number;
        contactId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectContact>;
    projectProjectsIdContactsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProjectContact>>;
    projectProjectsIdContactsPost(params: {
        id: number;
        contact: ProjectContact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectContact>;
}
export class ProjectNotesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    projectProjectsIdNotesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    projectProjectsIdNotesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProjectNote>>;
    projectProjectsIdNotesNoteIdDelete(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    projectProjectsIdNotesNoteIdGet(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectNote>;
    projectProjectsIdNotesNoteIdPatch(params: {
        id: number;
        noteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectNote>;
    projectProjectsIdNotesNoteIdPut(params: {
        id: number;
        noteId: number;
        note: ProjectNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectNote>;
    projectProjectsIdNotesPost(params: {
        id: number;
        note: ProjectNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectNote>;
}
export class ProjectPhasesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    projectProjectsIdPhasesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    projectProjectsIdPhasesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProjectPhase>>;
    projectProjectsIdPhasesPhaseIdDelete(params: {
        id: number;
        phaseId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    projectProjectsIdPhasesPhaseIdGet(params: {
        id: number;
        phaseId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectPhase>;
    projectProjectsIdPhasesPhaseIdPatch(params: {
        id: number;
        phaseId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectPhase>;
    projectProjectsIdPhasesPhaseIdPut(params: {
        id: number;
        phaseId: number;
        projectPhase: ProjectPhase;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectPhase>;
    projectProjectsIdPhasesPost(params: {
        id: number;
        projectPhase: ProjectPhase;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectPhase>;
}
export class ProjectsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    projectProjectsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    projectProjectsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Project>>;
    projectProjectsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    projectProjectsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Project>;
    projectProjectsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Project>;
    projectProjectsIdPut(params: {
        id: number;
        project: Project;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Project>;
    projectProjectsPost(params: {
        project: Project;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Project>;
}
export class ProjectsTeamMembersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    projectProjectsIdTeamMembersCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    projectProjectsIdTeamMembersGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProjectTeamMember>>;
    projectProjectsIdTeamMembersPost(params: {
        id: number;
        teamMember: ProjectTeamMember;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectTeamMember>;
    projectProjectsIdTeamMembersTeamMemberIdDelete(params: {
        id: number;
        teamMemberId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    projectProjectsIdTeamMembersTeamMemberIdGet(params: {
        id: number;
        teamMemberId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectTeamMember>;
    projectProjectsIdTeamMembersTeamMemberIdPatch(params: {
        id: number;
        teamMemberId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectTeamMember>;
    projectProjectsIdTeamMembersTeamMemberIdPut(params: {
        id: number;
        teamMemberId: number;
        teamMember: ProjectTeamMember;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ProjectTeamMember>;
}
}
declare module 'connectwise-rest-api/release/api/projectAPI' {
import alias = require('~connectwise-rest-api/release/api/projectAPI');
export = alias;
}

// Generated by typings
// Source: release/api/salesAPI.d.ts
declare module '~connectwise-rest-api/release/api/salesAPI' {
export interface Activity {
    "id"?: number;
    "name": string;
    "type"?: ActivityTypeReference;
    "company"?: CompanyReference;
    "contact"?: ContactReference;
    "phoneNumber"?: string;
    "email"?: string;
    "status": ActivityStatusReference;
    "opportunity"?: OpportunityReference;
    "ticket"?: TicketReference;
    "agreement"?: AgreementReference;
    "campaign"?: CampaignReference;
    "notes"?: string;
    "dateStart"?: Date;
    "dateEnd"?: Date;
    "assignedBy"?: MemberReference;
    "assignTo": MemberReference;
    "scheduleStatus"?: ScheduleStatusReference;
    "reminder"?: ReminderReference;
    "where"?: ServiceLocationReference;
    "notifyFlag"?: boolean;
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export interface ActivityStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "spawnFollowupFlag"?: boolean;
    "closedFlag"?: boolean;
    "info"?: Metadata;
}
export interface ActivityStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ActivityType {
    "id"?: number;
    "name": string;
    "points"?: number;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "emailFlag"?: boolean;
    "memoFlag"?: boolean;
    "info"?: Metadata;
}
export interface ActivityTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Agreement {
    "id"?: number;
    "name": string;
    "type": AgreementTypeReference;
    "company": CompanyReference;
    "contact": ContactReference;
    "subContractCompany"?: CompanyReference;
    "subContractContact"?: ContactReference;
    "parentAgreementId"?: number;
    "customerPO"?: string;
    "locationId"?: number;
    "businessUnitId"?: number;
    "restrictLocationFlag"?: boolean;
    "restrictDepartmentFlag"?: boolean;
    "startDate"?: Date;
    "endDate"?: Date;
    "noEndingDateFlag"?: boolean;
    "opportunity"?: OpportunityReference;
    "cancelledFlag"?: boolean;
    "dateCancelled"?: Date;
    "reasonCancelled"?: string;
    "slaId"?: number;
    "workOrder"?: string;
    "internalNotes"?: string;
    "applicationUnits"?: ApplicationUnitsEnum;
    "applicationLimit"?: number;
    "applicationCycle"?: ApplicationCycleEnum;
    "applicationUnlimitedFlag"?: boolean;
    "oneTimeFlag"?: boolean;
    "coverAgreementTime"?: boolean;
    "coverAgreementProduct"?: boolean;
    "coverAgreementExpense"?: boolean;
    "coverSalesTax"?: boolean;
    "carryOverUnused"?: boolean;
    "allowOverruns"?: boolean;
    "expiredDays"?: number;
    "limit"?: number;
    "expireWhenZero"?: boolean;
    "chargeToFirm"?: boolean;
    "employeeCompRate"?: EmployeeCompRateEnum;
    "employeeCompNotExceed"?: EmployeeCompNotExceedEnum;
    "compHourlyRate"?: number;
    "compLimitAmount"?: number;
    "billCycleId"?: number;
    "billOneTimeFlag"?: boolean;
    "billTermsId"?: number;
    "invoicingCycle"?: InvoicingCycleEnum;
    "billToCompany"?: CompanyReference;
    "billToSite"?: SiteReference;
    "billAmount"?: number;
    "taxable"?: boolean;
    "prorateFirstBill"?: number;
    "billStartDate"?: Date;
    "taxCodeId"?: number;
    "restrictDownPayment"?: boolean;
    "invoiceDescription"?: string;
    "topComment"?: boolean;
    "bottomComment"?: boolean;
    "workRole"?: WorkRoleReference;
    "workType"?: WorkTypeReference;
    "projectTypeId"?: number;
    "invoiceTemplateSetupId"?: number;
    "billTime"?: BillTimeEnum;
    "billExpenses"?: BillExpensesEnum;
    "billProducts"?: BillProductsEnum;
    "billableTimeInvoice"?: boolean;
    "billableExpenseInvoice"?: boolean;
    "billableProductInvoice"?: boolean;
    "info"?: Metadata;
    "periodType"?: PeriodTypeEnum;
}
export enum ApplicationUnitsEnum {
    Amount,
    Hours,
    Incidents,
}
export enum ApplicationCycleEnum {
    Contract2Weeks,
    Contract4Weeks,
    ContractYear,
    CalendarMonth,
    CalendarQuarter,
    CalendarWeek,
    ContractQuarter,
    CalendarYear,
}
export enum EmployeeCompRateEnum {
    Actual,
    Hourly,
}
export enum EmployeeCompNotExceedEnum {
    Billing,
    Percent,
    Amount,
}
export enum InvoicingCycleEnum {
    CalendarYear,
    ContractYear,
}
export enum PeriodTypeEnum {
    Current,
    Future,
    Both,
    Undefined,
}
export interface AgreementReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface AgreementTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface BillingTermsReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface BoardReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CampaignReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CompanyReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface ContactReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Count {
    "count"?: number;
}
export interface CountryReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CustomFieldValue {
    "id"?: number;
    "caption"?: string;
    "type"?: TypeEnum;
    "entryMethod"?: EntryMethodEnum;
    "numberOfDecimals"?: number;
    "value"?: string;
}
export enum TypeEnum {
    Text,
    Button,
    Currency,
    Date,
    Hyperlink,
    IPAddress,
    Checkbox,
    Number,
    Percent,
    TextArea,
    Password,
}
export enum EntryMethodEnum {
    EntryField,
    List,
    Option,
}
export interface Error {
    "code"?: string;
    "message"?: string;
    "errors"?: Array<ValidationError>;
}
export interface Forecast {
    "id"?: number;
    "name"?: string;
    "revenue"?: number;
    "cost"?: number;
    "type": ForecastTypeEnum;
    "status"?: OpportunityStatusReference;
    "includedFlag"?: boolean;
    "recurring"?: ProductRecurring;
    "percent"?: number;
    "margin"?: number;
    "opportunityId"?: number;
    "info"?: Metadata;
}
export enum ForecastTypeEnum {
    Product,
    Service,
    Agreement,
    Other1,
    Other2,
}
export interface Guid {
}
export interface MemberReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface Metadata {
}
export interface NoteTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Opportunity {
    "id"?: number;
    "name": string;
    "expectedCloseDate"?: Date;
    "type"?: OpportunityTypeReference;
    "stage"?: OpportunityStageReference;
    "status"?: OpportunityStatusReference;
    "priority"?: OpportunityPriorityReference;
    "notes"?: string;
    "probability"?: OpportunityProbabilityReference;
    "source"?: string;
    "rating"?: OpportunityRatingReference;
    "campaign"?: CampaignReference;
    "primarySalesRep": MemberReference;
    "secondarySalesRep"?: MemberReference;
    "locationId"?: number;
    "businessUnitId"?: number;
    "company": CompanyReference;
    "contact": ContactReference;
    "site": SiteReference;
    "customerPO"?: string;
    "pipelineChangeDate"?: Date;
    "dateBecameLead"?: Date;
    "closedDate"?: Date;
    "closedBy"?: MemberReference;
    "totalSalesTax"?: number;
    "shipToCompany"?: CompanyReference;
    "shipToContact"?: ContactReference;
    "shipToSite"?: SiteReference;
    "billToCompany"?: CompanyReference;
    "billToContact"?: ContactReference;
    "billToSite"?: SiteReference;
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export interface OpportunityContact {
    "id"?: number;
    "contact": ContactReference;
    "company"?: CompanyReference;
    "role"?: OpportunitySalesRoleReference;
    "notes"?: string;
    "referralFlag"?: boolean;
    "opportunityId"?: number;
    "phoneNumber"?: string;
    "emailAddress"?: string;
    "info"?: Metadata;
}
export interface OpportunityNote {
    "id"?: number;
    "opportunityId"?: number;
    "type"?: NoteTypeReference;
    "text": string;
    "flagged"?: boolean;
    "enteredBy"?: string;
    "mobileGuid"?: Guid;
    "info"?: Metadata;
}
export interface OpportunityPriorityReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface OpportunityProbabilityReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface OpportunityRating {
    "id"?: number;
    "name": string;
    "sortOrder"?: number;
    "info"?: Metadata;
}
export interface OpportunityRatingReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface OpportunityReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface OpportunitySalesRoleReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface OpportunityStageReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface OpportunityStatus {
    "id"?: number;
    "name": string;
    "wonFlag"?: boolean;
    "lostFlag"?: boolean;
    "closedFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "defaultFlag"?: boolean;
    "info"?: Metadata;
    "enteredBy"?: string;
    "dateEntered"?: Date;
}
export interface OpportunityStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface OpportunityToAgreementConversion {
    "agreementId"?: number;
    "name"?: string;
    "type"?: AgreementTypeReference;
    "startDate"?: string;
    "endDate"?: string;
    "noEndingDateFlag"?: boolean;
    "billCycleId"?: number;
    "locationId"?: number;
    "businessUnitId"?: number;
    "includeAllNotesFlag"?: boolean;
    "includeAllDocumentsFlag"?: boolean;
    "includeAllProductsFlag"?: boolean;
    "includeNoteIds"?: Array<number>;
    "includeDocumentIds"?: Array<number>;
    "includeProductIds"?: Array<number>;
}
export interface OpportunityToProjectConversion {
    "projectId"?: number;
    "name"?: string;
    "status"?: ProjectStatusReference;
    "locationId"?: number;
    "businessUnitId"?: number;
    "board"?: ProjectBoardReference;
    "manager"?: MemberReference;
    "estimatedStart"?: string;
    "estimatedEnd"?: string;
    "includeAllNotesFlag"?: boolean;
    "includeAllDocumentsFlag"?: boolean;
    "includeAllProductsFlag"?: boolean;
    "includeNoteIds"?: Array<number>;
    "includeDocumentIds"?: Array<number>;
    "includeProductIds"?: Array<number>;
}
export interface OpportunityToSalesOrderConversion {
    "salesOrderId"?: number;
    "name"?: string;
    "includeAllNotesFlag"?: boolean;
    "includeAllDocumentsFlag"?: boolean;
    "includeAllProductsFlag"?: boolean;
    "includeNoteIds"?: Array<number>;
    "includeDocumentIds"?: Array<number>;
    "includeProductIds"?: Array<number>;
}
export interface OpportunityToServiceTicketConversion {
    "ticketId"?: number;
    "summary"?: string;
    "includeAllNotesFlag"?: boolean;
    "includeAllDocumentsFlag"?: boolean;
    "includeAllProductsFlag"?: boolean;
    "includeNoteIds"?: Array<number>;
    "includeDocumentIds"?: Array<number>;
    "includeProductIds"?: Array<number>;
}
export interface OpportunityType {
    "id"?: number;
    "description": string;
    "inactiveFlag"?: boolean;
    "info"?: Metadata;
}
export interface OpportunityTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Order {
    "id"?: number;
    "company": CompanyReference;
    "contact"?: ContactReference;
    "phone"?: string;
    "phoneExt"?: string;
    "email"?: string;
    "site"?: SiteReference;
    "status": OrderStatusReference;
    "opportunity"?: OpportunityReference;
    "orderDate"?: Date;
    "dueDate"?: Date;
    "billingTerms"?: BillingTermsReference;
    "taxCode"?: TaxCodeReference;
    "poNumber"?: string;
    "locationId"?: number;
    "businessUnitId"?: number;
    "salesRep": MemberReference;
    "notes"?: string;
    "billClosedFlag"?: boolean;
    "billShippedFlag"?: boolean;
    "restrictDownpaymentFlag"?: boolean;
    "description"?: string;
    "topCommentFlag"?: boolean;
    "bottomCommentFlag"?: boolean;
    "shipToCompany"?: CompanyReference;
    "shipToContact"?: ContactReference;
    "shipToSite"?: SiteReference;
    "billToCompany"?: CompanyReference;
    "billToContact"?: ContactReference;
    "billToSite"?: SiteReference;
    "productIds"?: Array<number>;
    "documentIds"?: Array<number>;
    "invoiceIds"?: Array<number>;
    "configIds"?: Array<number>;
    "total"?: number;
    "taxTotal"?: number;
    "info"?: Metadata;
}
export interface OrderStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "sortOrder"?: number;
    "closedFlag"?: boolean;
    "info"?: Metadata;
}
export interface OrderStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface PatchOperation {
    "op"?: string;
    "path"?: string;
    "value"?: string;
}
export interface PriorityReference {
    "id"?: number;
    "name"?: string;
    "sort"?: number;
    "info"?: Metadata;
}
export interface ProductRecurring {
    "recurringRevenue": number;
    "recurringCost": number;
    "startDate": Date;
    "endDate": Date;
    "billCycleId": number;
    "cycles": number;
    "cycleType": CycleTypeEnum;
}
export enum CycleTypeEnum {
    CalendarYear,
    ContractYear,
}
export interface Project {
    "id"?: number;
    "name": string;
    "company": CompanyReference;
    "site"?: SiteReference;
    "opportunity"?: OpportunityReference;
    "contact"?: ContactReference;
    "manager"?: MemberReference;
    "type"?: ProjectTypeReference;
    "board": ProjectBoardReference;
    "status"?: ProjectStatusReference;
    "agreement"?: AgreementReference;
    "billingMethod": BillingMethodEnum;
    "billingAmount"?: number;
    "estimatedTimeRevenue"?: number;
    "estimatedExpenseRevenue"?: number;
    "estimatedProductRevenue"?: number;
    "estimatedStart": Date;
    "estimatedEnd": Date;
    "estimatedHours"?: number;
    "description"?: string;
    "timeApprover"?: MemberReference;
    "expenseApprover"?: MemberReference;
    "budgetAnalysis"?: BudgetAnalysisEnum;
    "budgetFlag"?: boolean;
    "billingRateType"?: BillingRateTypeEnum;
    "billTime"?: BillTimeEnum;
    "billExpenses"?: BillExpensesEnum;
    "billProducts"?: BillProductsEnum;
    "downpayment"?: number;
    "restrictDownPaymentFlag"?: boolean;
    "billingAttention"?: string;
    "customerPO"?: string;
    "billProjectAfterClosedFlag"?: boolean;
    "billUnapprovedTimeAndExpense"?: boolean;
    "scheduledHours"?: number;
    "scheduledStart"?: string;
    "scheduledEnd"?: string;
    "actualHours"?: number;
    "actualStart"?: string;
    "actualEnd"?: string;
    "budgetHours"?: number;
    "projectTemplateId"?: number;
    "locationId"?: number;
    "businessUnitId"?: number;
    "shipToCompany"?: CompanyReference;
    "shipToContact"?: ContactReference;
    "shipToSite"?: SiteReference;
    "billToCompany"?: CompanyReference;
    "billToContact"?: ContactReference;
    "billToSite"?: SiteReference;
    "info"?: Metadata;
}
export enum BillingMethodEnum {
    ActualRates,
    FixedFee,
    NotToExceed,
    OverrideRate,
}
export enum BudgetAnalysisEnum {
    ActualHours,
    BillableHours,
}
export enum BillingRateTypeEnum {
    WorkRole,
    StaffMember,
}
export enum BillTimeEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export enum BillExpensesEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export enum BillProductsEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export interface ProjectBoardReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProjectPhaseReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProjectReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProjectStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProjectTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ReminderReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface SalesTeamReference {
    "id"?: number;
    "identifier"?: string;
    "info"?: Metadata;
}
export interface ScheduleStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceItemReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceLocationReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceSourceReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceSubTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceTeamReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface SiteReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface TaxCodeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Team {
    "id"?: number;
    "type": TeamTypeEnum;
    "member"?: MemberReference;
    "salesTeam"?: SalesTeamReference;
    "commissionPercent"?: number;
    "referralFlag"?: boolean;
    "opportunityId"?: number;
    "responsibleFlag"?: boolean;
    "info"?: Metadata;
}
export enum TeamTypeEnum {
    Individual,
    Team,
}
export interface Ticket {
    "id"?: number;
    "summary": string;
    "recordType"?: RecordTypeEnum;
    "board"?: BoardReference;
    "status"?: ServiceStatusReference;
    "project"?: ProjectReference;
    "phase"?: ProjectPhaseReference;
    "wbsCode"?: string;
    "company": CompanyReference;
    "site"?: SiteReference;
    "siteName"?: string;
    "addressLine1"?: string;
    "addressLine2"?: string;
    "city"?: string;
    "stateIdentifier"?: string;
    "zip"?: string;
    "country"?: CountryReference;
    "contact"?: ContactReference;
    "contactPhoneNumber"?: string;
    "contactPhoneExtension"?: string;
    "contactEmailAddress"?: string;
    "type"?: ServiceTypeReference;
    "subType"?: ServiceSubTypeReference;
    "item"?: ServiceItemReference;
    "team"?: ServiceTeamReference;
    "owner"?: MemberReference;
    "priority"?: PriorityReference;
    "serviceLocation"?: ServiceLocationReference;
    "source"?: ServiceSourceReference;
    "requiredDate"?: Date;
    "budgetHours"?: number;
    "opportunity"?: OpportunityReference;
    "agreement"?: AgreementReference;
    "severity"?: SeverityEnum;
    "impact"?: ImpactEnum;
    "externalXRef"?: string;
    "poNumber"?: string;
    "knowledgeBaseCategoryId"?: number;
    "knowledgeBaseSubCategoryId"?: number;
    "allowAllClientsPortalView"?: boolean;
    "customerUpdatedFlag"?: boolean;
    "automaticEmailContactFlag"?: boolean;
    "automaticEmailResourceFlag"?: boolean;
    "automaticEmailCcFlag"?: boolean;
    "automaticEmailCc"?: string;
    "initialDescription"?: string;
    "initialInternalAnalysis"?: string;
    "initialResolution"?: string;
    "contactEmailLookup"?: string;
    "processNotifications"?: boolean;
    "skipCallback"?: boolean;
    "closedDate"?: string;
    "closedBy"?: string;
    "closedFlag"?: boolean;
    "dateEntered"?: string;
    "enteredBy"?: string;
    "actualHours"?: number;
    "approved"?: boolean;
    "subBillingMethod"?: SubBillingMethodEnum;
    "subBillingAmount"?: number;
    "subDateAccepted"?: string;
    "dateResolved"?: string;
    "dateResplan"?: string;
    "dateResponded"?: string;
    "resolveMinutes"?: number;
    "resPlanMinutes"?: number;
    "respondMinutes"?: number;
    "isInSla"?: boolean;
    "knowledgeBaseLinkId"?: number;
    "resources"?: string;
    "parentTicketId"?: number;
    "hasChildTicket"?: boolean;
    "knowledgeBaseLinkType"?: KnowledgeBaseLinkTypeEnum;
    "billTime"?: BillTimeEnum;
    "billExpenses"?: BillExpensesEnum;
    "billProducts"?: BillProductsEnum;
    "predecessorType"?: PredecessorTypeEnum;
    "predecessorId"?: number;
    "predecessorClosedFlag"?: boolean;
    "lagDays"?: number;
    "lagNonworkingDaysFlag"?: boolean;
    "estimatedStartDate"?: Date;
    "duration"?: number;
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export enum RecordTypeEnum {
    ServiceTicket,
    ProjectTicket,
    ProjectIssue,
}
export enum SeverityEnum {
    Low,
    Medium,
    High,
}
export enum ImpactEnum {
    Low,
    Medium,
    High,
}
export enum SubBillingMethodEnum {
    ActualRates,
    FixedFee,
    NotToExceed,
    OverrideRate,
}
export enum KnowledgeBaseLinkTypeEnum {
    ServiceTicket,
    ProjectTicket,
    ProjectIssue,
    KnowledgeBaseArticle,
    Time,
    Activity,
}
export enum PredecessorTypeEnum {
    Ticket,
    Phase,
}
export interface TicketReference {
    "id"?: number;
    "summary"?: string;
    "info"?: Metadata;
}
export interface ValidationError {
    "code"?: string;
    "message"?: string;
    "resource"?: string;
    "field"?: string;
}
export interface WorkRoleReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface WorkTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export class ActivitiesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesActivitiesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    salesActivitiesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Activity>>;
    salesActivitiesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesActivitiesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Activity>;
    salesActivitiesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Activity>;
    salesActivitiesIdPut(params: {
        id: number;
        activity: Activity;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Activity>;
    salesActivitiesPost(params: {
        activity: Activity;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Activity>;
}
export class ActivityStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesActivitiesStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    salesActivitiesStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ActivityStatus>>;
    salesActivitiesStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesActivitiesStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityStatus>;
    salesActivitiesStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityStatus>;
    salesActivitiesStatusesIdPut(params: {
        id: number;
        activityStatus: ActivityStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityStatus>;
    salesActivitiesStatusesPost(params: {
        activityStatus: ActivityStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityStatus>;
}
export class ActivityTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesActivitiesTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    salesActivitiesTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ActivityType>>;
    salesActivitiesTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesActivitiesTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityType>;
    salesActivitiesTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityType>;
    salesActivitiesTypesIdPut(params: {
        id: number;
        activityType: ActivityType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityType>;
    salesActivitiesTypesPost(params: {
        activityType: ActivityType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ActivityType>;
}
export class OpportunitiesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesOpportunitiesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    salesOpportunitiesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Opportunity>>;
    salesOpportunitiesIdConvertToAgreementPost(params: {
        id: number;
        conversion: OpportunityToAgreementConversion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Agreement>;
    salesOpportunitiesIdConvertToProjectPost(params: {
        id: number;
        conversion: OpportunityToProjectConversion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Project>;
    salesOpportunitiesIdConvertToSalesOrderPost(params: {
        id: number;
        conversion: OpportunityToSalesOrderConversion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Order>;
    salesOpportunitiesIdConvertToServiceTicketPost(params: {
        id: number;
        conversion: OpportunityToServiceTicketConversion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Ticket>;
    salesOpportunitiesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesOpportunitiesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Opportunity>;
    salesOpportunitiesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Opportunity>;
    salesOpportunitiesIdPut(params: {
        id: number;
        opportunity: Opportunity;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Opportunity>;
    salesOpportunitiesPost(params: {
        opportunity: Opportunity;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Opportunity>;
}
export class OpportunityContactsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesOpportunitiesIdContactsContactIdDelete(params: {
        id: number;
        contactId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesOpportunitiesIdContactsContactIdGet(params: {
        id: number;
        contactId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityContact>;
    salesOpportunitiesIdContactsContactIdPatch(params: {
        id: number;
        contactId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityContact>;
    salesOpportunitiesIdContactsContactIdPut(params: {
        id: number;
        contactId: number;
        opportunityContact: OpportunityContact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityContact>;
    salesOpportunitiesIdContactsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    salesOpportunitiesIdContactsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityContact>>;
    salesOpportunitiesIdContactsPost(params: {
        id: number;
        opportunityContact: OpportunityContact;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityContact>;
}
export class OpportunityForecastsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesOpportunitiesIdForecastCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    salesOpportunitiesIdForecastForecastIdDelete(params: {
        id: number;
        forecastId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesOpportunitiesIdForecastForecastIdGet(params: {
        id: number;
        forecastId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Forecast>;
    salesOpportunitiesIdForecastForecastIdPatch(params: {
        id: number;
        forecastId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Forecast>;
    salesOpportunitiesIdForecastForecastIdPut(params: {
        id: number;
        forecastId: number;
        forecast: Forecast;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Forecast>;
    salesOpportunitiesIdForecastGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Forecast>>;
    salesOpportunitiesIdForecastPost(params: {
        id: number;
        forecast: Forecast;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Forecast>;
}
export class OpportunityNotesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesOpportunitiesIdNotesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityNote>>;
    salesOpportunitiesIdNotesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityNote>>;
    salesOpportunitiesIdNotesNoteIdDelete(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesOpportunitiesIdNotesNoteIdGet(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityNote>;
    salesOpportunitiesIdNotesNoteIdPatch(params: {
        id: number;
        noteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityNote>;
    salesOpportunitiesIdNotesNoteIdPut(params: {
        id: number;
        noteId: number;
        note: OpportunityNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityNote>;
    salesOpportunitiesIdNotesPost(params: {
        id: number;
        note: OpportunityNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityNote>;
}
export class OpportunityRatingsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesOpportunitiesRatingsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    salesOpportunitiesRatingsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityRating>>;
    salesOpportunitiesRatingsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesOpportunitiesRatingsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityRating>;
    salesOpportunitiesRatingsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityRating>;
    salesOpportunitiesRatingsIdPut(params: {
        id: number;
        opportunityRating: OpportunityRating;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityRating>;
    salesOpportunitiesRatingsPost(params: {
        opportunityRating: OpportunityRating;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityRating>;
}
export class OpportunityStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesOpportunitiesStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    salesOpportunitiesStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityStatus>>;
    salesOpportunitiesStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesOpportunitiesStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityStatus>;
    salesOpportunitiesStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityStatus>;
    salesOpportunitiesStatusesIdPut(params: {
        id: number;
        status: OpportunityStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityStatus>;
    salesOpportunitiesStatusesPost(params: {
        status: OpportunityStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityStatus>;
}
export class OpportunityTeamsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesOpportunitiesIdTeamCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    salesOpportunitiesIdTeamGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Team>>;
    salesOpportunitiesIdTeamPost(params: {
        id: number;
        team: Team;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Team>;
    salesOpportunitiesIdTeamTeamIdDelete(params: {
        id: number;
        teamId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesOpportunitiesIdTeamTeamIdGet(params: {
        id: number;
        teamId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Team>;
    salesOpportunitiesIdTeamTeamIdPatch(params: {
        id: number;
        teamId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Team>;
    salesOpportunitiesIdTeamTeamIdPut(params: {
        id: number;
        teamId: number;
        team: Team;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Team>;
}
export class OpportunityTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesOpportunitiesTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    salesOpportunitiesTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OpportunityType>>;
    salesOpportunitiesTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesOpportunitiesTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityType>;
    salesOpportunitiesTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityType>;
    salesOpportunitiesTypesIdPut(params: {
        id: number;
        opportunityType: OpportunityType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityType>;
    salesOpportunitiesTypesPost(params: {
        opportunityType: OpportunityType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OpportunityType>;
}
export class OrderStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesOrdersStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    salesOrdersStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OrderStatus>>;
    salesOrdersStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesOrdersStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatus>;
    salesOrdersStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatus>;
    salesOrdersStatusesIdPut(params: {
        id: number;
        status: OrderStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<OrderStatus>;
    salesOrdersStatusesPost(params: {
        status: OrderStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<OrderStatus>>;
}
export class OrdersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    salesOrdersCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    salesOrdersGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Order>>;
    salesOrdersIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    salesOrdersIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Order>;
    salesOrdersIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Order>;
    salesOrdersIdPut(params: {
        id: number;
        order: Order;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Order>;
    salesOrdersPost(params: {
        order: Order;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Order>>;
}
}
declare module 'connectwise-rest-api/release/api/salesAPI' {
import alias = require('~connectwise-rest-api/release/api/salesAPI');
export = alias;
}

// Generated by typings
// Source: release/api/scheduleAPI.d.ts
declare module '~connectwise-rest-api/release/api/scheduleAPI' {
export interface ChargeCodeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Count {
    "value"?: number;
}
export interface Error {
    "code"?: string;
    "message"?: string;
    "errors"?: Array<ValidationError>;
}
export interface MemberReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface Metadata {
}
export interface PatchOperation {
    "op"?: string;
    "path"?: string;
    "value"?: string;
}
export interface ReminderReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ScheduleEntry {
    "id"?: number;
    "objectId"?: number;
    "name"?: string;
    "member"?: MemberReference;
    "where"?: ServiceLocationReference;
    "dateStart"?: Date;
    "dateEnd"?: Date;
    "reminder"?: ReminderReference;
    "status"?: ScheduleStatusReference;
    "type": ScheduleTypeReference;
    "span"?: ScheduleSpanReference;
    "doneFlag"?: boolean;
    "acknowledgedFlag"?: boolean;
    "ownerFlag"?: boolean;
    "allowScheduleConflictsFlag"?: boolean;
    "addMemberToProjectFlag"?: boolean;
    "projectRoleId"?: number;
    "closeDate"?: Date;
    "hours"?: number;
    "info"?: Metadata;
}
export interface ScheduleSpanReference {
    "id"?: number;
    "identifier"?: string;
    "info"?: Metadata;
}
export interface ScheduleStatus {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "showAsTentativeFlag"?: boolean;
    "info"?: Metadata;
}
export interface ScheduleStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ScheduleType {
    "id"?: number;
    "name": string;
    "identifier": string;
    "chargeCode"?: ChargeCodeReference;
    "where"?: ServiceLocationReference;
    "systemFlag"?: boolean;
    "info"?: Metadata;
}
export interface ScheduleTypeReference {
    "id"?: number;
    "identifier"?: string;
    "info"?: Metadata;
}
export interface ServiceLocationReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ValidationError {
    "code"?: string;
    "message"?: string;
    "resource"?: string;
    "field"?: string;
}
export class ScheduleEntriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    scheduleEntriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    scheduleEntriesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleEntry>>;
    scheduleEntriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    scheduleEntriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleEntry>;
    scheduleEntriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleEntry>;
    scheduleEntriesIdPut(params: {
        id: number;
        scheduleEntry: ScheduleEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleEntry>;
    scheduleEntriesPost(params: {
        scheduleEntry: ScheduleEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleEntry>;
}
export class ScheduleStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    scheduleStatusesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    scheduleStatusesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleStatus>>;
    scheduleStatusesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    scheduleStatusesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleStatus>;
    scheduleStatusesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleStatus>;
    scheduleStatusesIdPut(params: {
        id: number;
        scheduleStatus: ScheduleStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleStatus>;
    scheduleStatusesPost(params: {
        scheduleStatus: ScheduleStatus;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleStatus>;
}
export class ScheduleTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    scheduleTypesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    scheduleTypesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleType>>;
    scheduleTypesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    scheduleTypesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleType>;
    scheduleTypesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleType>;
    scheduleTypesIdPut(params: {
        id: number;
        scheduleType: ScheduleType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleType>;
    scheduleTypesPost(params: {
        scheduleType: ScheduleType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ScheduleType>;
}
}
declare module 'connectwise-rest-api/release/api/scheduleAPI' {
import alias = require('~connectwise-rest-api/release/api/scheduleAPI');
export = alias;
}

// Generated by typings
// Source: release/api/serviceAPI.d.ts
declare module '~connectwise-rest-api/release/api/serviceAPI' {
export interface ActivityReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface AgreementReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Board {
    "id"?: number;
    "name": string;
    "locationId": number;
    "businessUnitId": number;
    "inactive"?: boolean;
    "signOffTemplate"?: ServiceSignoffReference;
    "sendToContact"?: boolean;
    "contactTemplateId"?: number;
    "sendToResource"?: boolean;
    "resourceTemplateId"?: number;
    "projectFlag"?: boolean;
    "showDependenciesFlag"?: boolean;
    "showEstimatesFlag"?: boolean;
    "info"?: Metadata;
}
export interface BoardReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Code {
    "id"?: number;
    "name": string;
    "description": string;
    "boardId"?: number;
    "locationId"?: number;
    "businessUnitId"?: number;
    "info"?: Metadata;
}
export interface CompanyReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface ConfigurationReference {
    "id"?: number;
    "deviceIdentifier"?: string;
    "info"?: Metadata;
}
export interface ContactReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Count {
    "count"?: number;
}
export interface CountryReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CustomFieldValue {
    "id"?: number;
    "caption"?: string;
    "type"?: TypeEnum;
    "entryMethod"?: EntryMethodEnum;
    "numberOfDecimals"?: number;
    "value"?: string;
}
export enum TypeEnum {
    Text,
    Button,
    Currency,
    Date,
    Hyperlink,
    IPAddress,
    Checkbox,
    Number,
    Percent,
    TextArea,
    Password,
}
export enum EntryMethodEnum {
    EntryField,
    List,
    Option,
}
export interface DocumentReference {
    "id"?: number;
    "info"?: Metadata;
}
export interface Error {
    "code"?: string;
    "message"?: string;
    "errors"?: Array<ValidationError>;
}
export interface ExcludedMember {
    "id"?: number;
    "memberId": number;
    "boardId"?: number;
    "info"?: Metadata;
}
export interface FilterValues {
    "conditions"?: string;
    "orderBy"?: string;
}
export interface GenericIdIdentifierReference {
    "id"?: number;
    "identifier"?: string;
}
export interface Item {
    "id"?: number;
    "name": string;
    "inactive"?: boolean;
    "typeAssociations"?: Array<TypeAssociations>;
    "addAllSubTypes"?: boolean;
    "removeAllSubTypes"?: boolean;
    "typeId"?: number;
    "boardId"?: number;
    "info"?: Metadata;
}
export interface KnowledgeBaseArticle {
    "id"?: number;
    "title": string;
    "issue": string;
    "resolution": string;
    "locationId"?: number;
    "businessUnitId"?: number;
    "boardId"?: number;
    "categoryId"?: number;
    "subCategoryId"?: number;
    "dateCreated"?: string;
    "createdBy"?: string;
    "info"?: Metadata;
}
export interface Location {
    "id"?: number;
    "name": string;
    "where": WhereEnum;
    "defaultFlag"?: boolean;
    "info"?: Metadata;
}
export enum WhereEnum {
    OnSite,
    Remote,
    InHouse,
}
export interface MemberReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface Metadata {
}
export interface OpportunityReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface PatchOperation {
    "op"?: string;
    "path"?: string;
    "value"?: string;
}
export interface Priority {
    "id"?: number;
    "name": string;
    "color": string;
    "sortOrder"?: number;
    "defaultFlag"?: boolean;
    "imageLink"?: string;
    "info"?: Metadata;
}
export interface PriorityReference {
    "id"?: number;
    "name"?: string;
    "sort"?: number;
    "info"?: Metadata;
}
export interface ProductReference {
    "id"?: number;
    "description"?: string;
    "info"?: Metadata;
}
export interface ProjectPhaseReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ProjectReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ScheduleEntryReference {
    "id"?: number;
    "description"?: string;
    "info"?: Metadata;
}
export interface ServiceCodeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceItemReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceLocationReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceNote {
    "id"?: number;
    "ticketId"?: number;
    "text"?: string;
    "detailDescriptionFlag"?: boolean;
    "internalAnalysisFlag"?: boolean;
    "resolutionFlag"?: boolean;
    "member"?: MemberReference;
    "contact"?: ContactReference;
    "customerUpdatedFlag"?: boolean;
    "processNotifications"?: boolean;
    "dateCreated"?: string;
    "createdBy"?: string;
    "internalFlag"?: boolean;
    "externalFlag"?: boolean;
    "info"?: Metadata;
}
export interface ServiceSignoffReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceSourceReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceStatusReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceSubTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceTeamReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface ServiceTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface SiteReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Source {
    "id"?: number;
    "name": string;
    "defaultFlag"?: boolean;
    "info"?: Metadata;
    "enteredBy"?: string;
    "dateEntered"?: Date;
}
export interface Status {
    "id"?: number;
    "name": string;
    "boardId"?: number;
    "sortOrder"?: number;
    "displayOnBoard"?: boolean;
    "inactive"?: boolean;
    "closedStatus"?: boolean;
    "timeEntryNotAllowed"?: boolean;
    "defaultFlag"?: boolean;
    "escalationStatus"?: EscalationStatusEnum;
    "info"?: Metadata;
}
export enum EscalationStatusEnum {
    NotResponded,
    Responded,
    ResolutionPlan,
    Resolved,
    NoEscalation,
}
export interface SubType {
    "id"?: number;
    "name": string;
    "inactive"?: boolean;
    "typeAssociationIds"?: Array<number>;
    "addAllTypes"?: boolean;
    "removeAllTypes"?: boolean;
    "boardId"?: number;
    "info"?: Metadata;
}
export interface Survey {
    "id"?: number;
    "name": string;
    "inactiveFlag"?: boolean;
    "headerIncludeLogoFlag"?: boolean;
    "headerText"?: string;
    "headerTextVisibleFlag"?: boolean;
    "footerText"?: string;
    "footerTextVisibleFlag"?: boolean;
    "thankYouText"?: string;
    "notifyWho"?: GenericIdIdentifierReference;
    "notifyWhoVisibleFlag"?: boolean;
    "notifyMember"?: MemberReference;
    "info"?: Metadata;
}
export interface SurveyQuestion {
    "id"?: number;
    "sequenceNumber"?: number;
    "type": SurveyTypeEnum;
    "question": string;
    "options"?: Array<SurveyQuestionOption>;
    "includeFlag"?: boolean;
    "requiredFlag"?: boolean;
    "noAnswerPoints"?: number;
    "surveyId"?: number;
    "info"?: Metadata;
}
export enum SurveyTypeEnum {
    OpenEnded,
    Selection,
}
export interface SurveyQuestionOption {
    "includeFlag"?: boolean;
    "caption": string;
    "points"?: number;
}
export interface SurveyResult {
    "id"?: number;
    "ticketId": number;
    "emailAddress"?: string;
    "footerResponse"?: string;
    "contactMeFlag"?: boolean;
    "contact"?: ContactReference;
    "results"?: Array<SurveyResultDetail>;
    "totalPoints"?: number;
    "company"?: CompanyReference;
    "surveyId"?: number;
    "info"?: Metadata;
}
export interface SurveyResultDetail {
    "questionId": number;
    "answer"?: string;
}
export interface Task {
    "id"?: number;
    "ticketId"?: number;
    "notes"?: string;
    "closedFlag"?: boolean;
    "priority"?: number;
    "schedule"?: ScheduleEntryReference;
    "code"?: ServiceCodeReference;
    "resolution"?: string;
    "childScheduleAction"?: ChildScheduleActionEnum;
    "childTicketId"?: number;
    "info"?: Metadata;
}
export enum ChildScheduleActionEnum {
    Transfer,
    Delete,
    Done,
}
export interface Team {
    "id"?: number;
    "name": string;
    "teamLeader": MemberReference;
    "members"?: Array<number>;
    "defaultFlag"?: boolean;
    "notifyOnTicketDelete"?: boolean;
    "boardId"?: number;
    "locationId"?: number;
    "businessUnitId"?: number;
    "info"?: Metadata;
}
export interface Ticket {
    "id"?: number;
    "summary": string;
    "recordType"?: RecordTypeEnum;
    "board"?: BoardReference;
    "status"?: ServiceStatusReference;
    "project"?: ProjectReference;
    "phase"?: ProjectPhaseReference;
    "wbsCode"?: string;
    "company": CompanyReference;
    "site"?: SiteReference;
    "siteName"?: string;
    "addressLine1"?: string;
    "addressLine2"?: string;
    "city"?: string;
    "stateIdentifier"?: string;
    "zip"?: string;
    "country"?: CountryReference;
    "contact"?: ContactReference;
    "contactPhoneNumber"?: string;
    "contactPhoneExtension"?: string;
    "contactEmailAddress"?: string;
    "type"?: ServiceTypeReference;
    "subType"?: ServiceSubTypeReference;
    "item"?: ServiceItemReference;
    "team"?: ServiceTeamReference;
    "owner"?: MemberReference;
    "priority"?: PriorityReference;
    "serviceLocation"?: ServiceLocationReference;
    "source"?: ServiceSourceReference;
    "requiredDate"?: Date;
    "budgetHours"?: number;
    "opportunity"?: OpportunityReference;
    "agreement"?: AgreementReference;
    "severity"?: SeverityEnum;
    "impact"?: ImpactEnum;
    "externalXRef"?: string;
    "poNumber"?: string;
    "knowledgeBaseCategoryId"?: number;
    "knowledgeBaseSubCategoryId"?: number;
    "allowAllClientsPortalView"?: boolean;
    "customerUpdatedFlag"?: boolean;
    "automaticEmailContactFlag"?: boolean;
    "automaticEmailResourceFlag"?: boolean;
    "automaticEmailCcFlag"?: boolean;
    "automaticEmailCc"?: string;
    "initialDescription"?: string;
    "initialInternalAnalysis"?: string;
    "initialResolution"?: string;
    "contactEmailLookup"?: string;
    "processNotifications"?: boolean;
    "skipCallback"?: boolean;
    "closedDate"?: string;
    "closedBy"?: string;
    "closedFlag"?: boolean;
    "dateEntered"?: string;
    "enteredBy"?: string;
    "actualHours"?: number;
    "approved"?: boolean;
    "subBillingMethod"?: SubBillingMethodEnum;
    "subBillingAmount"?: number;
    "subDateAccepted"?: string;
    "dateResolved"?: string;
    "dateResplan"?: string;
    "dateResponded"?: string;
    "resolveMinutes"?: number;
    "resPlanMinutes"?: number;
    "respondMinutes"?: number;
    "isInSla"?: boolean;
    "knowledgeBaseLinkId"?: number;
    "resources"?: string;
    "parentTicketId"?: number;
    "hasChildTicket"?: boolean;
    "knowledgeBaseLinkType"?: KnowledgeBaseLinkTypeEnum;
    "billTime"?: BillTimeEnum;
    "billExpenses"?: BillExpensesEnum;
    "billProducts"?: BillProductsEnum;
    "predecessorType"?: PredecessorTypeEnum;
    "predecessorId"?: number;
    "predecessorClosedFlag"?: boolean;
    "lagDays"?: number;
    "lagNonworkingDaysFlag"?: boolean;
    "estimatedStartDate"?: Date;
    "duration"?: number;
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export enum RecordTypeEnum {
    ServiceTicket,
    ProjectTicket,
    ProjectIssue,
}
export enum SeverityEnum {
    Low,
    Medium,
    High,
}
export enum ImpactEnum {
    Low,
    Medium,
    High,
}
export enum SubBillingMethodEnum {
    ActualRates,
    FixedFee,
    NotToExceed,
    OverrideRate,
}
export enum KnowledgeBaseLinkTypeEnum {
    ServiceTicket,
    ProjectTicket,
    ProjectIssue,
    KnowledgeBaseArticle,
    Time,
    Activity,
}
export enum BillTimeEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export enum BillExpensesEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export enum BillProductsEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export enum PredecessorTypeEnum {
    Ticket,
    Phase,
}
export interface TimeEntryReference {
    "id"?: number;
    "info"?: Metadata;
}
export interface Type {
    "id"?: number;
    "name": string;
    "category"?: CategoryEnum;
    "defaultFlag"?: boolean;
    "inactive"?: boolean;
    "requestForChange"?: boolean;
    "boardId"?: number;
    "locationId"?: number;
    "businessUnitId"?: number;
    "info"?: Metadata;
}
export enum CategoryEnum {
    Reactive,
    Proactive,
}
export interface TypeAssociations {
    "typeId"?: number;
    "subTypeAssociationIds"?: Array<number>;
}
export interface ValidationError {
    "code"?: string;
    "message"?: string;
    "resource"?: string;
    "field"?: string;
}
export class BoardExcludedMembersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceBoardsIdExcludedMembersCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceBoardsIdExcludedMembersExcludedMemberIdDelete(params: {
        id: number;
        excludedMemberId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceBoardsIdExcludedMembersExcludedMemberIdGet(params: {
        id: number;
        excludedMemberId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExcludedMember>;
    serviceBoardsIdExcludedMembersGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ExcludedMember>>;
    serviceBoardsIdExcludedMembersPost(params: {
        id: number;
        excludedMember: ExcludedMember;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ExcludedMember>;
}
export class BoardItemsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceBoardsIdItemsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceBoardsIdItemsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Item>>;
    serviceBoardsIdItemsItemIdDelete(params: {
        id: number;
        itemId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceBoardsIdItemsItemIdGet(params: {
        id: number;
        itemId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Item>;
    serviceBoardsIdItemsItemIdPatch(params: {
        id: number;
        itemId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Item>;
    serviceBoardsIdItemsItemIdPut(params: {
        id: number;
        itemId: number;
        item: Item;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Item>;
    serviceBoardsIdItemsPost(params: {
        id: number;
        item: Item;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Item>;
}
export class BoardStatusesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceBoardsIdStatusesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceBoardsIdStatusesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Status>>;
    serviceBoardsIdStatusesPost(params: {
        id: number;
        status: Status;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Status>;
    serviceBoardsIdStatusesStatusIdDelete(params: {
        id: number;
        statusId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceBoardsIdStatusesStatusIdGet(params: {
        id: number;
        statusId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Status>;
    serviceBoardsIdStatusesStatusIdPatch(params: {
        id: number;
        statusId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Status>;
    serviceBoardsIdStatusesStatusIdPut(params: {
        id: number;
        statusId: number;
        status: Status;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Status>;
}
export class BoardSubTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceBoardsIdSubtypesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceBoardsIdSubtypesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SubType>>;
    serviceBoardsIdSubtypesPost(params: {
        id: number;
        subtype: SubType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SubType>;
    serviceBoardsIdSubtypesSubtypeIdDelete(params: {
        id: number;
        subtypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceBoardsIdSubtypesSubtypeIdGet(params: {
        id: number;
        subtypeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SubType>;
    serviceBoardsIdSubtypesSubtypeIdPatch(params: {
        id: number;
        subtypeId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SubType>;
    serviceBoardsIdSubtypesSubtypeIdPut(params: {
        id: number;
        subtypeId: number;
        subtype: SubType;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SubType>;
}
export class BoardTeamsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceBoardsIdTeamsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceBoardsIdTeamsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Team>>;
    serviceBoardsIdTeamsPost(params: {
        id: number;
        team: Team;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Team>;
    serviceBoardsIdTeamsTeamIdDelete(params: {
        id: number;
        teamId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceBoardsIdTeamsTeamIdGet(params: {
        id: number;
        teamId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Team>;
    serviceBoardsIdTeamsTeamIdPatch(params: {
        id: number;
        teamId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Team>;
    serviceBoardsIdTeamsTeamIdPut(params: {
        id: number;
        teamId: number;
        team: Team;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Team>;
}
export class BoardTypesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceBoardsIdTypesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceBoardsIdTypesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Type>>;
    serviceBoardsIdTypesPost(params: {
        id: number;
        type: Type;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Type>;
    serviceBoardsIdTypesTypeIdDelete(params: {
        id: number;
        typeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceBoardsIdTypesTypeIdGet(params: {
        id: number;
        typeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Type>;
    serviceBoardsIdTypesTypeIdPatch(params: {
        id: number;
        typeId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Type>;
    serviceBoardsIdTypesTypeIdPut(params: {
        id: number;
        typeId: number;
        type: Type;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Type>;
    serviceBoardsIdTypesTypeIdSubTypeAssociationGet(params: {
        id: number;
        typeId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<number>;
}
export class BoardsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceBoardsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceBoardsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Board>>;
    serviceBoardsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceBoardsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Board>;
    serviceBoardsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Board>;
    serviceBoardsIdPut(params: {
        id: number;
        board: Board;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Board>;
    serviceBoardsPost(params: {
        board: Board;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Board>;
}
export class CodesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceCodesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceCodesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Code>>;
    serviceCodesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceCodesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Code>;
    serviceCodesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Code>;
    serviceCodesIdPut(params: {
        id: number;
        code: Code;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Code>;
    serviceCodesPost(params: {
        code: Code;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Code>;
}
export class KnowledgeBaseArticlesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceKnowledgeBaseArticlesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceKnowledgeBaseArticlesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<KnowledgeBaseArticle>>;
    serviceKnowledgeBaseArticlesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceKnowledgeBaseArticlesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<KnowledgeBaseArticle>;
    serviceKnowledgeBaseArticlesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<KnowledgeBaseArticle>;
    serviceKnowledgeBaseArticlesIdPut(params: {
        id: number;
        knowledgeBaseArticle: KnowledgeBaseArticle;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<KnowledgeBaseArticle>;
    serviceKnowledgeBaseArticlesPost(params: {
        knowledgeBaseArticle: KnowledgeBaseArticle;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<KnowledgeBaseArticle>;
}
export class LocationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceLocationsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceLocationsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Location>>;
    serviceLocationsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceLocationsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Location>;
    serviceLocationsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Location>;
    serviceLocationsIdPut(params: {
        id: number;
        location: Location;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Location>;
    serviceLocationsPost(params: {
        location: Location;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Location>;
}
export class PrioritiesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    servicePrioritiesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    servicePrioritiesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Priority>>;
    servicePrioritiesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    servicePrioritiesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Priority>;
    servicePrioritiesIdImageGet(params: {
        id: number;
        useDefaultFlag?: boolean;
        lastModified?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    servicePrioritiesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Priority>;
    servicePrioritiesIdPut(params: {
        id: number;
        priority: Priority;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Priority>;
    servicePrioritiesPost(params: {
        priority: Priority;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Priority>;
}
export class SourcesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceSourcesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceSourcesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Source>>;
    serviceSourcesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceSourcesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Source>;
    serviceSourcesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Source>;
    serviceSourcesIdPut(params: {
        id: number;
        source: Source;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Source>;
    serviceSourcesPost(params: {
        source: Source;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Source>;
}
export class SurveyQuestionsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceSurveysIdQuestionsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceSurveysIdQuestionsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SurveyQuestion>>;
    serviceSurveysIdQuestionsPost(params: {
        id: number;
        surveyQuestion: SurveyQuestion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyQuestion>;
    serviceSurveysIdQuestionsQuestionIdDelete(params: {
        id: number;
        questionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceSurveysIdQuestionsQuestionIdGet(params: {
        id: number;
        questionId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyQuestion>;
    serviceSurveysIdQuestionsQuestionIdPatch(params: {
        id: number;
        questionId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyQuestion>;
    serviceSurveysIdQuestionsQuestionIdPut(params: {
        id: number;
        questionId: number;
        surveyQuestion: SurveyQuestion;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyQuestion>;
}
export class SurveyResultsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceSurveysIdResultsCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceSurveysIdResultsGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<SurveyResult>>;
    serviceSurveysIdResultsPost(params: {
        id: number;
        surveyResult: SurveyResult;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyResult>;
    serviceSurveysIdResultsResultIdDelete(params: {
        id: number;
        resultId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceSurveysIdResultsResultIdGet(params: {
        id: number;
        resultId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyResult>;
    serviceSurveysIdResultsResultIdPatch(params: {
        id: number;
        resultId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyResult>;
    serviceSurveysIdResultsResultIdPut(params: {
        id: number;
        resultId: number;
        surveyResult: SurveyResult;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<SurveyResult>;
}
export class SurveysApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceSurveysCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceSurveysGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Survey>>;
    serviceSurveysIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceSurveysIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Survey>;
    serviceSurveysIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Survey>;
    serviceSurveysIdPut(params: {
        id: number;
        survey: Survey;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Survey>;
    serviceSurveysPost(params: {
        survey: Survey;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Survey>;
}
export class TicketNotesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceTicketsIdNotesCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceTicketsIdNotesGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ServiceNote>>;
    serviceTicketsIdNotesNoteIdDelete(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceTicketsIdNotesNoteIdGet(params: {
        id: number;
        noteId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceNote>;
    serviceTicketsIdNotesNoteIdPatch(params: {
        id: number;
        noteId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceNote>;
    serviceTicketsIdNotesNoteIdPut(params: {
        id: number;
        noteId: number;
        serviceNote: ServiceNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceNote>;
    serviceTicketsIdNotesPost(params: {
        id: number;
        serviceNote: ServiceNote;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ServiceNote>;
}
export class TicketTasksApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceTicketsIdTasksCountGet(params: {
        id: number;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceTicketsIdTasksGet(params: {
        id: number;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Task>>;
    serviceTicketsIdTasksPost(params: {
        id: number;
        task: Task;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Task>;
    serviceTicketsIdTasksTaskIdDelete(params: {
        id: number;
        taskId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceTicketsIdTasksTaskIdGet(params: {
        id: number;
        taskId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Task>;
    serviceTicketsIdTasksTaskIdPatch(params: {
        id: number;
        taskId: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Task>;
    serviceTicketsIdTasksTaskIdPut(params: {
        id: number;
        taskId: number;
        task: Task;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Task>;
}
export class TicketsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    serviceTicketsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceTicketsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Ticket>>;
    serviceTicketsIdActivitiesCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceTicketsIdActivitiesGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ActivityReference>>;
    serviceTicketsIdConfigurationsConfigIdDelete(params: {
        id: number;
        configId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceTicketsIdConfigurationsConfigIdGet(params: {
        id: number;
        configId: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationReference>;
    serviceTicketsIdConfigurationsCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceTicketsIdConfigurationsGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConfigurationReference>>;
    serviceTicketsIdConfigurationsPost(params: {
        id: number;
        configuration: ConfigurationReference;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConfigurationReference>;
    serviceTicketsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    serviceTicketsIdDocumentsCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceTicketsIdDocumentsGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<DocumentReference>>;
    serviceTicketsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Ticket>;
    serviceTicketsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Ticket>;
    serviceTicketsIdProductsCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceTicketsIdProductsGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ProductReference>>;
    serviceTicketsIdPut(params: {
        id: number;
        ticket: Ticket;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Ticket>;
    serviceTicketsIdScheduleentriesCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceTicketsIdScheduleentriesGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ScheduleEntryReference>>;
    serviceTicketsIdTimeentriesCountGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    serviceTicketsIdTimeentriesGet(params: {
        id: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TimeEntryReference>>;
    serviceTicketsPost(params: {
        ticket: Ticket;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Ticket>;
    serviceTicketsSearchPost(params: {
        filterValues: FilterValues;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Ticket>>;
}
}
declare module 'connectwise-rest-api/release/api/serviceAPI' {
import alias = require('~connectwise-rest-api/release/api/serviceAPI');
export = alias;
}

// Generated by typings
// Source: release/api/systemAPI.d.ts
declare module '~connectwise-rest-api/release/api/systemAPI' {
export interface AuditTrailEntry {
    "text"?: string;
    "enteredDate"?: string;
    "enteredBy"?: string;
    "auditType"?: string;
    "auditSource"?: string;
}
export interface AuditTrailEntryInsertRequest {
    "text": string;
    "objects"?: Array<AuditTrailObjects>;
}
export interface AuditTrailObjects {
    "type": TypeEnum;
    "ids": Array<string>;
}
export enum TypeEnum {
    Ticket,
    Configuration,
}
export interface CallbackEntry {
    "id"?: number;
    "url": string;
    "objectId": number;
    "type": string;
    "level": string;
    "memberId"?: number;
    "info"?: Metadata;
}
export interface ConnectWiseHostedSetup {
    "id"?: number;
    "screenId": number;
    "description": string;
    "origin"?: string;
    "url": string;
    "podHeight"?: number;
    "type": ConnectWiseHostedSetupTypeEnum;
    "disabledFlag"?: boolean;
    "createdBy"?: string;
    "dateCreated"?: string;
    "info"?: Metadata;
}
export enum ConnectWiseHostedSetupTypeEnum {
    Tab,
    Pod,
}
export interface Count {
    "count"?: number;
}
export interface DocumentInfo {
    "id"?: number;
    "title"?: string;
    "fileName"?: string;
    "serverFileName"?: string;
    "owner"?: string;
    "linkFlag"?: boolean;
    "imageFlag"?: boolean;
    "publicFlag"?: boolean;
    "readOnlyFlag"?: boolean;
    "info"?: Metadata;
}
export interface Error {
    "code"?: string;
    "message"?: string;
    "errors"?: Array<ValidationError>;
}
export interface Info {
    "version"?: string;
    "isCloud"?: boolean;
    "serverTimeZone"?: string;
}
export interface IntegrationRequest {
    "url": string;
    "actionName": string;
    "token"?: string;
    "helpUrl"?: string;
    "disabledFlag"?: boolean;
}
export interface JObject {
}
export interface Link {
    "id"?: number;
    "name": string;
    "tableReferenceId": number;
    "url"?: string;
    "info"?: Metadata;
}
export interface Member {
    "id"?: number;
    "identifier"?: string;
    "emailAddress"?: string;
    "name"?: string;
    "calendarId"?: number;
    "inactiveFlag"?: boolean;
    "info"?: Metadata;
}
export interface MenuEntry {
    "id"?: number;
    "menuLocation": MenuLocationReference;
    "caption": string;
    "link": string;
    "newWindowFlag": boolean;
    "locationIds"?: Array<number>;
    "origin"?: string;
    "addAllLocations"?: boolean;
    "removeAllLocations"?: boolean;
    "info"?: Metadata;
}
export interface MenuLocationReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface Metadata {
}
export interface PatchOperation {
    "op"?: string;
    "path"?: string;
    "value"?: string;
}
export interface Report {
    "name"?: string;
}
export interface ReportDataResponse {
    "columnDefinitions"?: Array<JObject>;
    "rowValues"?: Array<JObject>;
}
export interface Token {
    "publicKey"?: string;
    "privateKey"?: string;
    "expiration"?: string;
}
export interface UserDefinedField {
    "id"?: number;
    "podId": number;
    "caption": string;
    "sequenceNumber": number;
    "helpText"?: string;
    "fieldTypeIdentifier": FieldTypeIdentifierEnum;
    "numberDecimals"?: number;
    "entryTypeIdentifier"?: EntryTypeIdentifierEnum;
    "requiredFlag"?: boolean;
    "displayOnScreenFlag"?: boolean;
    "readOnlyFlag"?: boolean;
    "listViewFlag"?: boolean;
    "buttonUrl"?: string;
    "options"?: Array<UserDefinedFieldOption>;
    "dateCreated"?: Date;
    "info"?: Metadata;
}
export enum FieldTypeIdentifierEnum {
    Text,
    Button,
    Date,
    Hyperlink,
    Checkbox,
    Number,
    Percent,
    TextArea,
}
export enum EntryTypeIdentifierEnum {
    EntryField,
    List,
    Option,
}
export interface UserDefinedFieldOption {
    "id"?: number;
    "optionValue": string;
    "defaultFlag"?: boolean;
    "inactiveFlag"?: boolean;
    "sortOrder"?: number;
}
export interface ValidationError {
    "code"?: string;
    "message"?: string;
    "resource"?: string;
    "field"?: string;
}
export class AuditTrailApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    systemAudittrailCountGet(params: {
        type?: string;
        id?: number;
        deviceIdentifier?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    systemAudittrailGet(params: {
        type?: string;
        id?: number;
        deviceIdentifier?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<AuditTrailEntry>>;
    systemAudittrailPost(params: {
        insertRequest: AuditTrailEntryInsertRequest;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
}
export class CallbackEntriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    systemCallbacksCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    systemCallbacksGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<CallbackEntry>>;
    systemCallbacksIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    systemCallbacksIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CallbackEntry>;
    systemCallbacksIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CallbackEntry>;
    systemCallbacksIdPut(params: {
        id: number;
        callbackEntry: CallbackEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CallbackEntry>;
    systemCallbacksPost(params: {
        callbackEntry: CallbackEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<CallbackEntry>;
}
export class ConnectWiseHostedSetupsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    systemConnectwisehostedsetupsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    systemConnectwisehostedsetupsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<ConnectWiseHostedSetup>>;
    systemConnectwisehostedsetupsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    systemConnectwisehostedsetupsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConnectWiseHostedSetup>;
    systemConnectwisehostedsetupsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConnectWiseHostedSetup>;
    systemConnectwisehostedsetupsIdPut(params: {
        id: number;
        connectWiseHostedSetup: ConnectWiseHostedSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConnectWiseHostedSetup>;
    systemConnectwisehostedsetupsPost(params: {
        connectWiseHostedSetup: ConnectWiseHostedSetup;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ConnectWiseHostedSetup>;
}
export class DocumentsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    systemDocumentsCountGet(params: {
        recordType?: string;
        recordId?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    systemDocumentsGet(params: {
        recordType?: string;
        recordId?: number;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<DocumentInfo>>;
    systemDocumentsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    systemDocumentsIdDownloadGet(params: {
        id: number;
        lastModified?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    systemDocumentsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DocumentInfo>;
    systemDocumentsIdPost(params: {
        id: number;
        recordId: number;
        recordType: string;
        title: string;
        url: string;
        file?: any;
        privateFlag?: boolean;
        readOnlyFlag?: boolean;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DocumentInfo>;
    systemDocumentsPost(params: {
        recordId: number;
        recordType: string;
        title: string;
        url: string;
        file?: any;
        privateFlag?: boolean;
        readOnlyFlag?: boolean;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<DocumentInfo>;
    systemDocumentsUploadsampleGet(params: {}, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
}
export class InfoApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    systemInfoGet(params: {}, extraQueryParams?: any, extraFetchParams?: any): Promise<Info>;
}
export class IntegrationsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    systemIntegrationsIntegratorPost(params: {
        integrator: string;
        request: IntegrationRequest;
        type?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
}
export class LinksApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    systemLinksCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    systemLinksGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Link>>;
    systemLinksIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    systemLinksIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Link>;
    systemLinksIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Link>;
    systemLinksIdPut(params: {
        id: number;
        link: Link;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Link>;
    systemLinksPost(params: {
        link: Link;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Link>;
}
export class MembersApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    systemMembersCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    systemMembersGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Member>>;
    systemMembersMemberIdentifierGet(params: {
        memberIdentifier: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Member>;
    systemMembersMemberIdentifierImageGet(params: {
        memberIdentifier: string;
        useDefaultFlag?: boolean;
        lastmodified?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    systemMembersMemberIdentifierTokensPost(params: {
        memberIdentifier: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Token>;
}
export class MenuEntriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    systemMenuentriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    systemMenuentriesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<MenuEntry>>;
    systemMenuentriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    systemMenuentriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MenuEntry>;
    systemMenuentriesIdImageGet(params: {
        id: number;
        lastmodified?: string;
        largeFlag?: boolean;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    systemMenuentriesIdImagePost(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    systemMenuentriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MenuEntry>;
    systemMenuentriesIdPut(params: {
        id: number;
        menuEntry: MenuEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MenuEntry>;
    systemMenuentriesPost(params: {
        menuEntry: MenuEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<MenuEntry>;
}
export class ReportsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    systemReportsGet(params: {
        conditions?: string;
        orderBy?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<Report>>;
    systemReportsReportNameColumnsGet(params: {
        reportName: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<JObject>>;
    systemReportsReportNameCountGet(params: {
        reportName: string;
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    systemReportsReportNameGet(params: {
        reportName: string;
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
        columns?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<ReportDataResponse>;
}
export class UserDefinedFieldsApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    systemUserDefinedFieldsCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    systemUserDefinedFieldsGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<UserDefinedField>>;
    systemUserDefinedFieldsIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    systemUserDefinedFieldsIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UserDefinedField>;
    systemUserDefinedFieldsIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UserDefinedField>;
    systemUserDefinedFieldsIdPut(params: {
        id: number;
        userDefinedField: UserDefinedField;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UserDefinedField>;
    systemUserDefinedFieldsPost(params: {
        userDefinedField: UserDefinedField;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<UserDefinedField>;
}
}
declare module 'connectwise-rest-api/release/api/systemAPI' {
import alias = require('~connectwise-rest-api/release/api/systemAPI');
export = alias;
}

// Generated by typings
// Source: release/api/timeAPI.d.ts
declare module '~connectwise-rest-api/release/api/timeAPI' {
export interface AgreementReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface CompanyReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface Count {
    "value"?: number;
}
export interface CustomFieldValue {
    "id"?: number;
    "caption"?: string;
    "type"?: TypeEnum;
    "entryMethod"?: EntryMethodEnum;
    "numberOfDecimals"?: number;
    "value"?: string;
}
export enum TypeEnum {
    Text,
    Button,
    Currency,
    Date,
    Hyperlink,
    IPAddress,
    Checkbox,
    Number,
    Percent,
    TextArea,
    Password,
}
export enum EntryMethodEnum {
    EntryField,
    List,
    Option,
}
export interface Error {
    "code"?: string;
    "message"?: string;
    "errors"?: Array<ValidationError>;
}
export interface MemberReference {
    "id"?: number;
    "identifier"?: string;
    "name"?: string;
    "info"?: Metadata;
}
export interface Metadata {
}
export interface PatchOperation {
    "op"?: string;
    "path"?: string;
    "value"?: string;
}
export interface TimeEntry {
    "id"?: number;
    "company"?: CompanyReference;
    "chargeToId"?: number;
    "chargeToType"?: ChargeToTypeEnum;
    "member"?: MemberReference;
    "locationId"?: number;
    "businessUnitId"?: number;
    "workType"?: WorkTypeReference;
    "workRole"?: WorkRoleReference;
    "agreement"?: AgreementReference;
    "timeStart": Date;
    "timeEnd"?: Date;
    "hoursDeduct"?: number;
    "actualHours"?: number;
    "billableOption": BillableOptionEnum;
    "notes"?: string;
    "internalNotes"?: string;
    "addToDetailDescriptionFlag"?: boolean;
    "addToInternalAnalysisFlag"?: boolean;
    "addToResolutionFlag"?: boolean;
    "emailResourceFlag"?: boolean;
    "emailContactFlag"?: boolean;
    "emailCcFlag"?: boolean;
    "emailCc"?: string;
    "hoursBilled"?: number;
    "enteredBy"?: string;
    "dateEntered"?: Date;
    "info"?: Metadata;
    "customFields"?: Array<CustomFieldValue>;
}
export enum ChargeToTypeEnum {
    ServiceTicket,
    ProjectTicket,
    ChargeCode,
    Activity,
}
export enum BillableOptionEnum {
    Billable,
    DoNotBill,
    NoCharge,
    NoDefault,
}
export interface ValidationError {
    "code"?: string;
    "message"?: string;
    "resource"?: string;
    "field"?: string;
}
export interface WorkRoleReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export interface WorkTypeReference {
    "id"?: number;
    "name"?: string;
    "info"?: Metadata;
}
export class TimeEntriesApi {
    protected basePath: string;
    defaultHeaders: any;
    constructor(basePath?: string);
    timeEntriesCountGet(params: {
        conditions?: string;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Count>;
    timeEntriesGet(params: {
        conditions?: string;
        orderBy?: string;
        page?: number;
        pageSize?: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<Array<TimeEntry>>;
    timeEntriesIdDelete(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<{}>;
    timeEntriesIdGet(params: {
        id: number;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeEntry>;
    timeEntriesIdPatch(params: {
        id: number;
        operations: Array<PatchOperation>;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeEntry>;
    timeEntriesIdPut(params: {
        id: number;
        timeEntry: TimeEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeEntry>;
    timeEntriesPost(params: {
        timeEntry: TimeEntry;
    }, extraQueryParams?: any, extraFetchParams?: any): Promise<TimeEntry>;
}
}
declare module 'connectwise-rest-api/release/api/timeAPI' {
import alias = require('~connectwise-rest-api/release/api/timeAPI');
export = alias;
}

// Generated by typings
// Source: release/connectwise.d.ts
declare module '~connectwise-rest-api/release/connectwise' {
import * as comp from '~connectwise-rest-api/release/api/companyAPI';
import * as exp from '~connectwise-rest-api/release/api/expenseAPI';
import * as fin from '~connectwise-rest-api/release/api/financeAPI';
import * as mark from '~connectwise-rest-api/release/api/marketingAPI';
import * as proc from '~connectwise-rest-api/release/api/procurementAPI';
import * as proj from '~connectwise-rest-api/release/api/projectAPI';
import * as sal from '~connectwise-rest-api/release/api/salesAPI';
import * as sch from '~connectwise-rest-api/release/api/scheduleAPI';
import * as srv from '~connectwise-rest-api/release/api/serviceAPI';
import * as sys from '~connectwise-rest-api/release/api/systemAPI';
import * as tm from '~connectwise-rest-api/release/api/timeAPI';
export class Connectwise {
    CompaniesApi: comp.CompaniesApi;
    CompanyManagementSummarysApi: comp.CompanyManagementSummarysApi;
    CompanyNotesApi: comp.CompanyNotesApi;
    CompanySitesApi: comp.CompanySitesApi;
    CompanyStatusesApi: comp.CompanyStatusesApi;
    CompanyTeamsApi: comp.CompanyTeamsApi;
    ConfigurationsApi: comp.ConfigurationsApi;
    ConfigurationStatusesApi: comp.ConfigurationStatusesApi;
    ConfigurationTypeQuestionsApi: comp.ConfigurationTypeQuestionsApi;
    ConfigurationTypesApi: comp.ConfigurationTypesApi;
    ContactCommunicationsApi: comp.ContactCommunicationsApi;
    ContactDepartmentsApi: comp.ContactDepartmentsApi;
    ContactNotesApi: comp.ContactNotesApi;
    ContactRelationshipsApi: comp.ContactRelationshipsApi;
    ContactsApi: comp.ContactsApi;
    ContactTypesApi: comp.ContactTypesApi;
    ExpenseEntriesApi: exp.ExpenseEntriesApi;
    ExpenseTypesApi: exp.ExpenseTypesApi;
    AgreementAdditionsApi: fin.AgreementAdditionsApi;
    AgreementAdjustmentsApi: fin.AgreementAdjustmentsApi;
    AgreementsApi: fin.AgreementsApi;
    AgreementSitesApi: fin.AgreementSitesApi;
    AgreementTypesApi: fin.AgreementTypesApi;
    AccountingBatchesApi: fin.AccountingBatchesApi;
    AgreementBoardDefaultsApi: fin.AgreementBoardDefaultsApi;
    InvoicePaymentsApi: fin.InvoicePaymentsApi;
    AccountingBatchTransactionsApi: fin.AccountingBatchTransactionsApi;
    AccountingUnpostedExpensesApi: fin.AccountingUnpostedExpensesApi;
    AccountingUnpostedInvoicesApi: fin.AccountingUnpostedinvoicesApi;
    AccountingUnpostedProcurementsApi: fin.AccountingUnpostedProcurementsApi;
    CampaignAuditsApi: mark.CampaignAuditsApi;
    CampaignsApi: mark.CampaignsApi;
    CampaignStatusesApi: mark.CampaignStatusesApi;
    CampaignTypesApi: mark.CampaignTypesApi;
    CampaignEmailsOpenedApi: mark.CampaignEmailsOpenedApi;
    CampaignFormsSubmittedApi: mark.CampaignFormsSubmittedApi;
    GroupsApi: mark.GroupsApi;
    CampaignLinksClickedApi: mark.CampaignLinksClickedApi;
    GroupCompaniesApi: mark.GroupCompaniesApi;
    GroupContactsApi: mark.GroupContactsApi;
    CatalogComponentsApi: proc.CatalogComponentsApi;
    CatalogsItemApi: proc.CatalogsItemApi;
    ManufacturersApi: proc.ManufacturersApi;
    ProductComponentsApi: proc.ProductComponentsApi;
    ProductPickingShippingDetailsApi: proc.ProductPickingShippingDetailsApi;
    ProductsItemApi: proc.ProductsItemApi;
    PurchaseOrdersApi: proc.PurchaseOrdersApi;
    ProjectContactsApi: proj.ProjectContactsApi;
    ProjectNotesApi: proj.ProjectNotesApi;
    ProjectPhasesApi: proj.ProjectPhasesApi;
    ProjectsApi: proj.ProjectsApi;
    ProjectsTeamMembersApi: proj.ProjectsTeamMembersApi;
    ActivitiesApi: sal.ActivitiesApi;
    ActivitiesStatusesApi: sal.ActivityStatusesApi;
    OpportunityForecastsApi: sal.OpportunityForecastsApi;
    OpportunitiesApi: sal.OpportunitiesApi;
    OpportunityContactsApi: sal.OpportunityContactsApi;
    OpportunityNotesApi: sal.OpportunityNotesApi;
    OpportunityRatingsApi: sal.OpportunityRatingsApi;
    OpportunityStatusesApi: sal.OpportunityStatusesApi;
    OpportunityTeamsApi: sal.OpportunityTeamsApi;
    OpportunityTypesApi: sal.OpportunityTypesApi;
    OrdersApi: sal.OrdersApi;
    ScheduleEntriesApi: sch.ScheduleEntriesApi;
    ScheduleStatuesApi: sch.ScheduleStatusesApi;
    ScheduleTypesApi: sch.ScheduleTypesApi;
    BoardsApi: srv.BoardsApi;
    CodesApi: srv.CodesApi;
    BoardExcludedMembersApi: srv.BoardExcludedMembersApi;
    BoardItemsApi: srv.BoardItemsApi;
    KnowledgeBaseArticlesApi: srv.KnowledgeBaseArticlesApi;
    LocationsApi: srv.LocationsApi;
    PrioritiesApi: srv.PrioritiesApi;
    TicketNotesApi: srv.TicketNotesApi;
    SourcesApi: srv.SourcesApi;
    BoardStatusesApi: srv.BoardStatusesApi;
    BoardSubTypesApi: srv.BoardSubTypesApi;
    SurveyQuestionsApi: srv.SurveyQuestionsApi;
    SurveyResultsApi: srv.SurveyResultsApi;
    SurveysApi: srv.SurveysApi;
    TicketTasksApi: srv.TicketTasksApi;
    BoardTeamsApi: srv.BoardTeamsApi;
    TicketsApi: srv.TicketsApi;
    BoardTypesApi: srv.BoardTypesApi;
    AuditTrailApi: sys.AuditTrailApi;
    CallbackEntriesApi: sys.CallbackEntriesApi;
    ConnectWiseHostedSetupsApi: sys.ConnectWiseHostedSetupsApi;
    DocumentsApi: sys.DocumentsApi;
    InfoApi: sys.InfoApi;
    IntegrationsApi: sys.IntegrationsApi;
    LinksApi: sys.LinksApi;
    MembersApi: sys.MembersApi;
    MenuEntriesApi: sys.MenuEntriesApi;
    ReportsApi: sys.ReportsApi;
    UserDefinedFieldsApi: sys.UserDefinedFieldsApi;
    TimeEntriesApi: tm.TimeEntriesApi;
    private authKey;
    constructor(host: string, companyId: string, publicKey: string, privateKey: string);
}
}
declare module 'connectwise-rest-api/release/connectwise' {
import alias = require('~connectwise-rest-api/release/connectwise');
export = alias;
}
declare module 'connectwise-rest-api' {
import alias = require('~connectwise-rest-api/release/connectwise');
export = alias;
}
